<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Codeforces Round 541 (Div. 2)</title>
      <link href="/2019/03/12/Codeforces%20Round%20541%20(Div.%202)/"/>
      <url>/2019/03/12/Codeforces%20Round%20541%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1131" target="_blank" rel="noopener">Codeforces Round #541 (Div. 2)</a></p><h2 id="A-Sea-Battle"><a href="#A-Sea-Battle" class="headerlink" title="A. Sea Battle"></a>A. Sea Battle</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w1, h1, w2, h2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w1 &gt;&gt; h1 &gt;&gt; w2 &gt;&gt; h2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (w1 + h1 + h2 + <span class="number">2</span> &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Draw"><a href="#B-Draw" class="headerlink" title="B. Draw!"></a>B. Draw!</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">res += max(<span class="number">0</span>, min(a, b) - last);</span><br><span class="line">last = max(a, b) - (a != b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Birthday"><a href="#C-Birthday" class="headerlink" title="C. Birthday"></a>C. Birthday</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数子，要求排成一个环，使得相邻的差的绝对值之和最小。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。升序后奇项排一起偶项排一起。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n &amp; <span class="number">1</span> ? n - <span class="number">2</span> : n - <span class="number">1</span>; i != <span class="number">1</span>; i -= <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Gourmet-choice"><a href="#D-Gourmet-choice" class="headerlink" title="D. Gourmet choice"></a>D. Gourmet choice</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>由$~n+m~$个菜品，给出一个$~n\times m~$的矩阵表示相应的比较关系。输出根据这个矩阵的打分方式，满足矩阵的比较关系，且不同的分数数量最小。有可能输出不存在。<br>数据范围$~1\leq n,m\leq1000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>拓扑排序。建图时需要注意如果$~a&gt;b~$且$~b=c~$，则需要增加$~a&gt;c~$。可以用$~\text{DSU}~$并查集和$~\text{bitset}~$来维护相等的联通块，这样建图的时间复杂度上限为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}})~$（不写按秩合并）。应该还有更优的建图方式，但上述做法能过，总时间复杂度为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}}+(n+m)^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, deg[maxn], fa[maxn], res[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; mat[maxn], adj[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; toward[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">mat[fa[y] = x] |= mat[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) adj[i] |= mat[find(j)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) ++deg[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) <span class="keyword">if</span> (!deg[i]) now.push_back(i);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!now.empty()) &#123;</span><br><span class="line">cnt += now.size();</span><br><span class="line">topo.push_back(now);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : now) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j)</span><br><span class="line"><span class="keyword">if</span> (adj[i][j]) <span class="keyword">if</span> (!--deg[j]) tmp.push_back(j);</span><br><span class="line">now = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt != n + m) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) mat[fa[i] = i].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j != n + m; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&lt;'</span>) adj[j].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&gt;'</span>) adj[i].<span class="built_in">set</span>(j);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'='</span>) merge(i, j);</span><br><span class="line">&#125;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; j : topo[i]) res[j] = topo.size() - i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="built_in">cout</span> &lt;&lt; res[i + n] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-String-Multiplication"><a href="#E-String-Multiplication" class="headerlink" title="E. String Multiplication"></a>E. String Multiplication</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于给定字符串$~s=\overline{s_1s_2\dots s_n}~$和$~t=\overline{t_1t_2\dots t_m}~$，定义$~s+t=\overline{s_1s_2\dots s_nt_1t_2\dots t_m}~$和$~s\cdot t=t+s_1+t+s_2+t+\dots+t+s_n+t~$。现给定字符串序列$~p_1,p_2,\dots,p_n~$，问$~(((p_1\cdot p_2)\cdot p3)\cdot\dots)\cdot p_n~$中最长的连续相同子序列长度。<br>数据范围$~\sum{\mid p\mid}\leq100000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现$~\cdot~$运算满足结合律，那么等价于询问$~p_1\cdot(p_2\cdot(\dots\cdot p_n))~$。直接线性模拟即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">strs.push(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">int</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>, res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch1 = now.front(), ch2 = now.back(), last = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++cal1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch2) ++cal2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != last) cnt = <span class="number">0</span>;</span><br><span class="line">res = max(res, ++cnt);</span><br><span class="line">last = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> check = res == (<span class="keyword">int</span>)now.size();</span><br><span class="line"><span class="keyword">while</span> (!strs.empty()) &#123;</span><br><span class="line">now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal1 = tmp1 + (tmp1 + <span class="number">1</span>) * res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal2 = tmp2 + (tmp2 + <span class="number">1</span>) * res;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != ch1) cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> tmp = max(tmp, ++cnt);</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, tmp + (tmp + <span class="number">1</span>) * res);</span><br><span class="line">check = tmp == (<span class="keyword">int</span>)now.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch1 == ch2) &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch2)) res = max(res, cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Asya-And-Kittens"><a href="#F-Asya-And-Kittens" class="headerlink" title="F. Asya And Kittens"></a>F. Asya And Kittens</h2><p>给定正整数$~n~$和$~n-1~$对$~x\not=y~$，满足$~1\leq x,y\leq n~$。需要找到一个全排列，初始每项均属于单独的区间。然后按顺序考虑$~(x,y)~$，$x~$所在的区间必须与$~y~$所在的区间相邻，然后将这两个区间合并，最终整个全排列均在一个区间之内。<br>数据范围$~2\leq n\leq150000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸并查集。不写按秩合并的时间复杂度上限为$~O(n\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150001</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">sons[fa[y] = x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : sons[u]) dfs(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line"><span class="keyword">while</span> (--n) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">merge(x, y);</span><br><span class="line">&#125;</span><br><span class="line">dfs(find(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Most-Dangerous-Shark"><a href="#G-Most-Dangerous-Shark" class="headerlink" title="G. Most Dangerous Shark"></a>G. Most Dangerous Shark</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给出$~m~$个多米诺骨牌的给高度$~a~$和花费$~c~$。问将所有多米诺骨牌推倒的最小总花费。<br>数据范围$~1\leq m\leq10^7,~1\leq a\leq m,~1\leq c\leq100000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用$~left_i~$表示将$~i~$向左推，恰好推倒至$~left_i~$。那么不难发现所有的区间$~I_i=[left_i,i]~$均互相包含或者不交，所以可以通过栈结构来线性求出。同理用$~right_i~$表示将$~i~$向右推，恰好推倒至$~right_i~$。接下来动态规划，用$~dp_i~$表示将前$~i~$个都推倒的最小花费，则有转移式</p><script type="math/tex; mode=display">dp_i=\min\lbrace dp_j+c_i:left_i\leq j< i\rbrace\cup\lbrace dp_{j-1}+c_j:j< i\leq right_j\rbrace</script><p>整个过程均可用栈维护，总时间复杂度为$~O(m)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; blocks(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(m + <span class="number">1</span>), left(m + <span class="number">1</span>), right(m + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; c(m + <span class="number">1</span>), dp(m + <span class="number">1</span>), minn(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; block : blocks) &#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">block.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q, index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> id, mul;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id &gt;&gt; mul;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : blocks[id - <span class="number">1</span>]) &#123;</span><br><span class="line">++index;</span><br><span class="line">a[index] = domi.first;</span><br><span class="line">c[index] = domi.second * mul;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (right[i] = min(m, i + a[i] - <span class="number">1</span>); !sta1.empty() &amp;&amp; right[i] &gt;= sta1.top(); sta1.pop())</span><br><span class="line">right[i] = max(right[i], right[sta1.top()]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!sta1.empty()) sta1.pop();</span><br><span class="line">dp.front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; sta2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">minn[i] = dp[left[i] = max(<span class="number">0</span>, i - a[i])];</span><br><span class="line"><span class="keyword">for</span> (left[i] = max(<span class="number">0</span>, i - a[i]); !sta1.empty() &amp;&amp; left[i] &lt; sta1.top(); sta1.pop()) &#123;</span><br><span class="line">left[i] = min(left[i], left[sta1.top()]);</span><br><span class="line">minn[i] = min(minn[i], minn[sta1.top()]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i] = minn[i] + c[i];</span><br><span class="line"><span class="keyword">while</span> (!sta2.empty() &amp;&amp; i &gt; right[sta2.top().first]) sta2.pop();</span><br><span class="line"><span class="keyword">if</span> (sta2.empty()) &#123;</span><br><span class="line">sta2.push(make_pair(right[i], dp[i - <span class="number">1</span>] + c[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = min(dp[i], sta2.top().second);</span><br><span class="line">sta2.push(make_pair(right[i], min(sta2.top().second, dp[i - <span class="number">1</span>] + c[i])));</span><br><span class="line">&#125;</span><br><span class="line">minn[i] = min(minn[i], dp[i]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2014-2015 ACM-ICPC, NEERC, Northern Subregional (TBC) Contest</title>
      <link href="/2019/03/10/2014-2015%20ACM-ICPC,%20NEERC,%20Northern%20Subregional%20Contest%20(TBC)/"/>
      <url>/2019/03/10/2014-2015%20ACM-ICPC,%20NEERC,%20Northern%20Subregional%20Contest%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/100531" target="_blank" rel="noopener">2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest</a></p><h2 id="A-Alarm-Clock"><a href="#A-Alarm-Clock" class="headerlink" title="A. Alarm Clock"></a>A. Alarm Clock</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"alarm.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"alarm.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">24</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">60</span>; ++j)</span><br><span class="line">res[d[i % <span class="number">10</span>] + d[i / <span class="number">10</span>] + d[j % <span class="number">10</span>] + d[j / <span class="number">10</span>]] = make_pair(i, j);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">auto</span> ite = res.find(n);</span><br><span class="line"><span class="keyword">if</span> (ite == res.end()) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>, ite-&gt;second.first, ite-&gt;second.second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Buffcraft"><a href="#B-Buffcraft" class="headerlink" title="B. Buffcraft"></a>B. Buffcraft</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。有坑。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"buffcraft.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"buffcraft.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> b, k, cd, cp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; k &gt;&gt; cd &gt;&gt; cp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; d(cd + <span class="number">1</span>), p(cp + <span class="number">1</span>);</span><br><span class="line">d.front() = p.front() = make_pair(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) <span class="built_in">cin</span> &gt;&gt; d[i].first, d[i].second = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) <span class="built_in">cin</span> &gt;&gt; p[i].first, p[i].second = i;</span><br><span class="line">sort(d.begin() + <span class="number">1</span>, d.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line">sort(p.begin() + <span class="number">1</span>, p.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; dd(cd + <span class="number">1</span>, <span class="number">0</span>), pp(cp + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) dd[i] = dd[i - <span class="number">1</span>] + d[i].first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) pp[i] = pp[i - <span class="number">1</span>] + p[i].first;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= min(k, cd); ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = (b + dd[i]) * (pp[min(cp, k - i)] + <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (cal &lt; temp) &#123;</span><br><span class="line">cal = temp;</span><br><span class="line">n = i;</span><br><span class="line">m = min(cp, k - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">cout</span> &lt;&lt; d[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (n) <span class="built_in">cout</span> &lt;&lt; d[n].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) <span class="built_in">cout</span> &lt;&lt; p[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (m) <span class="built_in">cout</span> &lt;&lt; p[m].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Digits"><a href="#D-Digits" class="headerlink" title="D. Digits"></a>D. Digits</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出最小的$~n~$个不同正整数的和，满足这些数的各位数之和相等。<br>数据范围$~1\leq n\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到数据范围较小，考虑爆搜。爆搜$~10^7~$以内的正整数更新数据范围内对应的答案即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"digits.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"digits.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res(<span class="number">5001</span>, <span class="number">0x3f3f3f3f3f3f3f3f</span>), cal(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j /= <span class="number">10</span>) sum += j % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (++cnt[sum] &lt;= <span class="number">5000</span>) res[cnt[sum]] = min(res[cnt[sum]], cal[sum] += i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Grave"><a href="#G-Grave" class="headerlink" title="G. Grave"></a>G. Grave</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"grave.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"grave.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">4</span>], y[<span class="number">4</span>], w, h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">2</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">3</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">2</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">3</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Hiking-in-the-Hills"><a href="#H-Hiking-in-the-Hills" class="headerlink" title="H. Hiking in the Hills"></a>H. Hiking in the Hills</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个三维空间下的地形图，表面由$~n~$个三角形拼接而成。然后给定平面上的起点和终点，输出一条路径，使得路径的海拔的最大值最小。<br>数据范围$~2\leq n\leq2000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对偶图的单源最短路问题。将三角形视为点，任意相接触的两三角形的公共边或公共点是为边，那么边权则是公共部分的最低海拔。暴力建图即可，时间复杂度为$~O(n^2)~$，单元最短路用$~\text{Dijstra}~$算法，是否堆优化均不影响时间复杂度。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">ll x, y, z;</span><br><span class="line">Point() &#123;&#125;</span><br><span class="line">Point(ll xx, ll yy, ll zz): x(xx), y(yy), z(zz) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt;  y &lt;&lt; <span class="string">' '</span> &lt;&lt;  z &lt;&lt; <span class="string">'\n'</span>; &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x &amp;&amp; y == p.y; &#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x - p.x, y - p.y, <span class="number">0</span>); &#125;</span><br><span class="line">ll <span class="keyword">operator</span> ^ (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">lower</span><span class="params">(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2)</span> </span>&#123; <span class="keyword">return</span> p1.z &lt; p2.z ? p1 : p2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triagnle</span> &#123;</span></span><br><span class="line">Point p[<span class="number">3</span>];</span><br><span class="line">Triagnle() &#123;&#125;</span><br><span class="line">Triagnle(Point a, Point b, Point c) &#123; p[<span class="number">0</span>] = a, p[<span class="number">1</span>] = b, p[<span class="number">2</span>] = c; &#125;</span><br><span class="line">Triagnle(Point pp[]) &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i] = pp[i]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i].input(); &#125;</span><br><span class="line"><span class="function">ll <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>((p[<span class="number">1</span>] - p[<span class="number">0</span>]) ^ (p[<span class="number">2</span>] - p[<span class="number">0</span>])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">have</span><span class="params">(Point&amp; pp)</span> </span>&#123;</span><br><span class="line">ll cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) cal += <span class="built_in">abs</span>((p[i] - pp) ^ (p[(i + <span class="number">1</span>) % <span class="number">3</span>] - pp));</span><br><span class="line"><span class="keyword">return</span> cal == area();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">vector</span>&lt;Point&gt; <span class="keyword">operator</span> &amp; (<span class="keyword">const</span> Triagnle&amp; t1, <span class="keyword">const</span> Triagnle&amp; t2) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j)</span><br><span class="line"><span class="keyword">if</span> (t1.p[i] == t2.p[j]) ret.push_back(t1.p[i]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">int</span> id, from;</span><br><span class="line">ll h;</span><br><span class="line">Node() &#123;&#125;</span><br><span class="line">Node(Point pp, <span class="keyword">int</span> i, <span class="keyword">int</span> f, ll hh): p(pp), id(i), from(f), h(hh) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> h &gt; n.h; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"hiking.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"hiking.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;Triagnle&gt; planes(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; plane : planes) plane.input();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, Point&gt;&gt;&gt; adj(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != n; ++j) &#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = planes[i] &amp; planes[j];</span><br><span class="line"><span class="keyword">if</span> (tmp.size()) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp.size() == <span class="number">1</span>) &#123;</span><br><span class="line">adj[i].push_back(mp(j, tmp.front()));</span><br><span class="line">adj[j].push_back(mp(i, tmp.front()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> p = lower(tmp.front(), tmp.back());</span><br><span class="line">adj[i].push_back(mp(j, p));</span><br><span class="line">adj[j].push_back(mp(i, p));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Point start, finish;</span><br><span class="line">start.input();</span><br><span class="line">finish.input();</span><br><span class="line"><span class="keyword">int</span> begin, end;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(start)) &#123;</span><br><span class="line">begin = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(finish)) &#123;</span><br><span class="line">end = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; que;</span><br><span class="line">que.push(Node(start, begin, begin, start.z));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(n, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; nodes(n);</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[now.id]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.id] = <span class="literal">true</span>;</span><br><span class="line">from[now.id] = now.from;</span><br><span class="line">nodes[now.id] = now.p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; next : adj[now.id]) <span class="keyword">if</span> (!vis[next.ff]) que.push(Node(next.ss, next.ff, now.id, max(now.h, next.ss.z)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; res(<span class="number">1</span>, finish);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">res.push_back(nodes[end]);</span><br><span class="line"><span class="keyword">if</span> (end == begin) <span class="keyword">break</span>;</span><br><span class="line">end = from[end];</span><br><span class="line">&#125;</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ans : res) ans.output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Instruction"><a href="#I-Instruction" class="headerlink" title="I. Instruction"></a>I. Instruction</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>铁路轨道视为一棵$~n~$个节点的二叉树，起点为根节点，终点为叶节点。然后给定$~m~$列火车的出发时刻$~t~$和终点$~p~$。每个非叶节点的初始指向为编号较小的子节点。为使得每辆火车均到达相应终点，那么需要在一些时刻修改一些非叶节点的指向。输出一种不超过$~100000~$次的修改方案。<br>数据范围$~3\leq n\leq51,~1\leq m\leq100,~0\leq t\leq10000,~1\leq p\leq26~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟。对于每辆火车，考虑它从起点到终点的过程，则可以得到这条路径上的非叶节点在某些时刻需要满足的状态（指向哪个子节点）。最终对于每个节点，所有的状态按时间升序然后去重即可。总时间复杂度为$~O(nm\log m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"instruction.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"instruction.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">128</span>], fa[<span class="number">64</span>], son[<span class="number">64</span>][<span class="number">2</span>], tmp[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, to[<span class="number">64</span>][<span class="number">64</span>], go[<span class="number">64</span>][<span class="number">64</span>], state[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, check[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; f;</span><br><span class="line">fa[i] = f;</span><br><span class="line">to[f][i] = tmp[f];</span><br><span class="line">son[f][tmp[f]++] = i;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'p'</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">p[name] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j = fa[j]) go[fa[j]][i] = to[fa[j]][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; node[<span class="number">64</span>], res;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; ch;</span><br><span class="line"><span class="keyword">int</span> id = p[ch];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != id; i = son[i][go[i][id]]) node[i].push_back(mp(t++, go[i][id]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (check[i]) &#123;</span><br><span class="line">sort(node[i].begin(), node[i].end());</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> fuck : node[i]) <span class="keyword">if</span> (now != fuck.ss) &#123;</span><br><span class="line">now = fuck.ss;</span><br><span class="line">res.push_back(mp(fuck.ff, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ans : res) <span class="built_in">cout</span> &lt;&lt; ans.ss &lt;&lt; <span class="string">' '</span> &lt;&lt; ans.ff &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Joy-of-Flight"><a href="#J-Joy-of-Flight" class="headerlink" title="J. Joy of Flight"></a>J. Joy of Flight</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定起点和终点坐标，飞机需要恰好在第$~k~$秒到达终点，同时给出这期间的风向变化和飞机的最大速度$~v_\max~$，每秒飞机的真实位移等于飞机速度向量于风速向量之和。输出每秒飞机所到达的坐标或者不存在到达终点的方案。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>分离风速与自身速度。那么方案存在等价于起点经过$~k~$秒的风吹所到达的坐标与终点的距离$~dis~$小于等于$~k\cdot v_\max~$。那么每秒的飞机速度即为$~\frac{dis}{k}~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"joy.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"joy.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">pll begin, end;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;begin.ff, &amp;begin.ss, &amp;end.ff, &amp;end.ss);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vmax;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;k, &amp;vmax);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pll&gt;&gt; input(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;pll&gt; winds(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld%lld"</span>, &amp;input[i].ff, &amp;input[i].ss.ff, &amp;input[i].ss.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = input[i - <span class="number">1</span>].ff; i &amp;&amp; j != input[i].ff; ++j) winds[j] = input[i - <span class="number">1</span>].ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = input.back().ff; i != k; ++i) winds[i] = input.back().ss;</span><br><span class="line">pll flow = mp(end.ff - begin.ff, end.ss - begin.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) flow = mp(flow.ff - wind.ff, flow.ss - wind.ss);</span><br><span class="line"><span class="keyword">if</span> (flow.ff * flow.ff + flow.ss * flow.ss &gt; vmax * vmax * k * k) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>), <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">pll temp = begin;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) &#123;</span><br><span class="line">++day;</span><br><span class="line">temp = mp(temp.ff + wind.ff, temp.ss + wind.ss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %f\n"</span>, temp.ff + (<span class="keyword">double</span>)flow.ff * day / k, temp.ss + (<span class="keyword">double</span>)flow.ss * day / k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Kebab-House"><a href="#K-Kebab-House" class="headerlink" title="K. Kebab House"></a>K. Kebab House</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数轴上从$~1~$开始有$~n~$个相连的线段区间，并给出每个区间的长度$~q~$。现要在所有线段内合法的取若干个点，满足相邻的两个点之间所未取到的点的数量至少为$~t~$，每个线段内最多取$~q-x~$个点。问合法的方案数（包括不取）。<br>数据范围$~1\leq n\leq1000,~0\leq t\leq100,~0\leq q\leq250,~0\leq x\leq q~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。问$~\text{WSY}~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul base = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">plus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b &lt; base ? a + b : a + b - base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">minus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a + base - b : a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">mul</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ull(a) * ull(b) % ull(base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define TEST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::istream&amp; myis = <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="built_in">std</span>::ostream&amp; myos = <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">myis</span><span class="params">(<span class="string">"kebab.in"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">myos</span><span class="params">(<span class="string">"kebab.out"</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ul m, n, t;</span><br><span class="line">ul segst[<span class="number">250001</span>];</span><br><span class="line">ul segable[<span class="number">250001</span>];</span><br><span class="line">ul sum[<span class="number">250001</span>];</span><br><span class="line">ul ans[<span class="number">250001</span>][<span class="number">251</span>];</span><br><span class="line">ul finalans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">myis.tie(<span class="number">0</span>);</span><br><span class="line">myis &gt;&gt; m &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>, st = <span class="number">1</span>; i != m; ++i) &#123;</span><br><span class="line">ul q, x;</span><br><span class="line">myis &gt;&gt; q &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (ul j = st; j != st + q; ++j) &#123;</span><br><span class="line">segst[j] = st;</span><br><span class="line">segable[j] = q - x;</span><br><span class="line">&#125;</span><br><span class="line">st = st + q;</span><br><span class="line">n = st - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= segable[i]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span>) &#123;</span><br><span class="line">ans[i][j] = sum[<span class="built_in">std</span>::min(i - t - <span class="number">1</span>, segst[i] - <span class="number">1</span>)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span> &amp;&amp; i - t - <span class="number">1</span> &gt;= segst[i] + j - <span class="number">2</span>) &#123;</span><br><span class="line">ans[i][j] = minus(ans[i - t - <span class="number">1</span>][j - <span class="number">1</span>], segst[i] + j - <span class="number">2</span> &gt;= <span class="number">1</span> ? ans[segst[i] + j - <span class="number">3</span>][j - <span class="number">1</span>] : ul(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = plus(sum[i], ans[i][j]);</span><br><span class="line">finalans = plus(finalans, ans[i][j]);</span><br><span class="line">ans[i][j] = plus(ans[i - <span class="number">1</span>][j], ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myos &lt;&lt; finalans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 61 (Rated for Div. 2)</title>
      <link href="/2019/03/10/Educational%20Codeforces%20Round%2061%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/03/10/Educational%20Codeforces%20Round%2061%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1132" target="_blank" rel="noopener">Educational Codeforces Round 61 (Rated for Div. 2)</a></p><h2 id="A-Regular-Bracket-Sequence"><a href="#A-Regular-Bracket-Sequence" class="headerlink" title="A. Regular Bracket Sequence"></a>A. Regular Bracket Sequence</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>现有$~cnt_1~$个$~\text{((}~$，$cnt_2~$个$~\text{()}~$，$~cnt_3~$个$~\text{)(}~$，$~cnt_4~$个$~\text{))}~$。问能否组合成一个合法括号串。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>判断$~cnt_1=cnt_4~$，且$~cnt_1&gt;0~$或$~cnt_3=0~$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; cnt[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (cnt[<span class="number">0</span>] == cnt[<span class="number">3</span>] &amp;&amp; (cnt[<span class="number">0</span>] &amp;&amp; !cnt[<span class="number">2</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Discounts"><a href="#B-Discounts" class="headerlink" title="B. Discounts"></a>B. Discounts</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = accumulate(a.begin(), a.end(), <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - a[n - q] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Painting-the-Fence"><a href="#C-Painting-the-Fence" class="headerlink" title="C. Painting the Fence"></a>C. Painting the Fence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$以内$~q~$个离散区间，问$~q-2~$个区间的并集最多包含多少个整点。<br>数据范围$~3\leq n,q\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~q-1~$的做法。对于数轴$~1,2,\dots,n~$上差分，则得到所包含于区间数量的差分数组。同时把每个区间放入其右端点的$~\text{vector}~$之中。从小到大枚举右端点，则可以知道每个区间中有多少个点的值为$~1~$，代表不取这个区间所减少的答案。整个过程都是线性的，所以时间复杂度为$~O(n+q)~$。那么对于本体，现暴力枚举第一个不选的区间即可，总时间复杂度为$~O(q\cdot(n+q))~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; seg(q);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; line(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">++d[seg[i].first];</span><br><span class="line">--d[++seg[i].second];</span><br><span class="line">line[seg[i].second - <span class="number">1</span>].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dd(d), sweep(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">--dd[seg[i].first];</span><br><span class="line">++dd[seg[i].second];</span><br><span class="line"><span class="keyword">int</span> sub = <span class="number">0x3f3f3f3f</span>, cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">sweep[j] = sweep[j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ((dd[j] += dd[j - <span class="number">1</span>]) == <span class="number">1</span>) ++sweep[j];</span><br><span class="line"><span class="keyword">if</span> (dd[j]) ++cal;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; k : line[j]) <span class="keyword">if</span> (i != k)</span><br><span class="line">sub = min(sub, sweep[seg[k].second - <span class="number">1</span>] - sweep[seg[k].first - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> res = max(res, cal - sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Stressful-Training"><a href="#D-Stressful-Training" class="headerlink" title="D. Stressful Training"></a>D. Stressful Training</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$台电脑，给出初始电量$~a~$和每分钟耗电$~b~$。总共$~k~$分钟，现有$~1~$个充电器，每分钟只能给$~1~$台电脑充电。问使得在最后一刻之前没有电脑没电（为负）的最小功率或者不存在。<br>数据范围$~1\leq n,k\leq2\cdot10^5,~1\leq a\leq10^{17},~1\leq b\leq10^{12}~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分答案，然后判断是否合法。使用优先队列的话总时间复杂度为$~O(k\log n\log\max)~$，很难通过。对于每台电脑，将其放入没电的时刻所对应的$~\text{vector}~$之中，模拟这$~k~$分钟即可。这样总时间复杂度为$~O((n+k)\log\max)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; ab;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) time.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first / laptop.second &lt; k) line[laptop.first / laptop.second].push_back(laptop);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fuck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : time) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = ((laptop.first / laptop.second + <span class="number">1</span>) * laptop.second - laptop.first - <span class="number">1</span>) / x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((cnt -= temp) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> ((laptop.first + temp * x) / laptop.second &lt; k) line[(laptop.first + temp * x) / laptop.second].push_back(make_pair(laptop.first + temp * x, laptop.second));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">ab.resize(n);</span><br><span class="line">line.resize(--k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.second;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first &lt; laptop.second * k) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line">x = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check()) right = x;</span><br><span class="line"><span class="keyword">else</span> left = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (right == INF ? <span class="number">-1</span> : right) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Knapsack"><a href="#E-Knapsack" class="headerlink" title="E. Knapsack"></a>E. Knapsack</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数字$~1\leq i\leq8~$有$~cnt_i~$个。问组成的和在不超过$~W~$下的最大值。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~S=\gcd(1,2,\dots,8)=840~$。对于数字$~i~$，取$~\frac{S}{i}~$个求和能得到$~S~$。动态规划，记$~dp[i][j]~$为已经考虑了前$~i~$个数字，每个数字至多取$~\min(\frac{S}{i},cnt_i)~$个，未取过的数字还能凑出多少$~S~$。这样空间复杂度为$~O(8^2\cdot840)~$，时间复杂度为$~O(8\cdot\log8\cdot840^2)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> gcd = <span class="number">840</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w, cnt, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(maxn + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(maxn * gcd + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">dp.front().front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= gcd / i &amp;&amp; j &lt;= cnt; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = i * j; k &lt;= maxn * gcd; ++k)</span><br><span class="line"><span class="keyword">if</span> (~dp[i - <span class="number">1</span>][k - i * j]) dp[i][k] = max(dp[i][k], dp[i - <span class="number">1</span>][k - i * j] + (cnt - j) / (gcd / i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn * gcd &amp;&amp; i &lt;= w; ++i) <span class="keyword">if</span> (~dp.back()[i])</span><br><span class="line">res = max(res, i + gcd * min(dp.back()[i], (w - i) / gcd));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Clear-the-String"><a href="#F-Clear-the-String" class="headerlink" title="F. Clear the String"></a>F. Clear the String</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，每次可以消除连续的相同子串，问最小消除次数。<br>数据范围$~1\leq n\leq500~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>相邻去重后就是一个区间$~\text{DP}~$问题。具体见代码，时间复杂度为$~O(n^3)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~dp[l][r]) <span class="keyword">return</span> dp[l][r];</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> dp[l][r] = <span class="number">0</span>;</span><br><span class="line">dp[l][r] = calc(l + <span class="number">1</span>, r) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i) <span class="keyword">if</span> (str[l] == str[i]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, i - <span class="number">1</span>) + calc(i, r));</span><br><span class="line"><span class="keyword">if</span> (str[l] == str[r]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, r - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> dp[l][r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">str = <span class="built_in">string</span>(str.begin(), unique(str.begin(), str.end()));</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(<span class="number">0</span>, str.size() - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Greedy-Subsequences"><a href="#G-Greedy-Subsequences" class="headerlink" title="G. Greedy Subsequences"></a>G. Greedy Subsequences</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列$~a_1,a_2,\dots,a_n~$，定义贪心子序列满足除首项外，每一项均为原序列中右边第一个大于前一项的值。给定$~k~$，输出区间$~[1,k],~[2,k+1],~\dots,~[n-k+1,n]~$的最长贪心子序列长度。<br>数据范围$~1\leq k\leq n\leq10^6,~1\leq a\leq n~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~f(r)=\max\lbrace l:a_r\geq a_l,~l&lt; r\rbrace~$，其中不妨设$~a_0=\inf~$。这一步可以通过单调栈线性求出。再令$~g(l,r)~$表示首相为$~a_l~$，右边不超过$~r~$的最长贪心子序列长度。则有转移式</p><script type="math/tex; mode=display">g(l,r)=\begin{cases}g(l,r-1)    &\text{$l\leq f(r)$}    \\g(l,r-1)+1  &\text{$l>f(r)$}\end{cases}</script><p>且区间$~[r-k+1,r]~$的答案为$~\max_{l=r-k+1}^{r}{g(l,r)}~$。用线段树维护即可，总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line"><span class="keyword">if</span> (index &lt; maxn) &#123;</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">&#125;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">++tag[index];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(LEFT, SEG);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(RIGHT, SEG);</span><br><span class="line">seg[index] = max(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> max(query(LEFT, SEG), query(RIGHT, SEG));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">sta.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (a[sta.top()] &lt; a[i]) sta.pop();</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, sta.top(), i);</span><br><span class="line">sta.push(i);</span><br><span class="line"><span class="keyword">if</span> (i &gt;= k) <span class="built_in">cout</span> &lt;&lt; query(<span class="number">0</span>, n, <span class="number">1</span>, i - k, i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EOJ Monthly 2019.2 (based on February Selection)</title>
      <link href="/2019/02/25/EOJ%20Monthly%202019.2%20(based%20on%20February%20Selection)/"/>
      <url>/2019/02/25/EOJ%20Monthly%202019.2%20(based%20on%20February%20Selection)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.ecnu.edu.cn/contest/140" target="_blank" rel="noopener">EOJ Monthly 2019.2 (based on February Selection)</a></p><h2 id="A-回收卫星"><a href="#A-回收卫星" class="headerlink" title="A. 回收卫星"></a>A. 回收卫星</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。有一个球心为$~(x,~y,~z)~$半径为$~r~$的球，且原点$~(0,~0,~0)~$保证在球内部或边界上。每次可以询问一个点是否在球的内部或边界上，需要在至多$~200~$次询问下确定球心坐标。<br>数据范围$~{\mid x\mid}\leq10^9,~{\mid y\mid}\leq10^9,~{\mid z\mid}\leq10^9,~1\leq r\leq10^9~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过二分可以确定$~x_1=\max\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$和$~x_2=\min\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$。注意到绝对值最大为$~2\times10^9~$，二分上界必须大于该数，且会爆$~\text{int}~$。<br>考虑关于$~x_0~$的一元二次方程</p><script type="math/tex; mode=display">(x-x_0)^2+y^2+z^2=r^2</script><p>解为</p><script type="math/tex; mode=display">x_0=x\pm\sqrt{r^2-y^2-z^2}</script><p>于是有</p><script type="math/tex; mode=display">x_1=x+\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x_2=x-\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x={\frac{x_1+x_2}{2}}</script><p>同理可解出$~y~$与$~z~$。次数最多$~6\times32=192~$次。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2000000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y, <span class="keyword">const</span> <span class="keyword">int</span>&amp; z)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="string">' '</span> &lt;&lt; z &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left, right, x1, x2, y1, y2, z1, z2;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(-mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, -mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, -mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z2 = -left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; (x1 + x2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (y1 + y2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (z1 + z2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-解题"><a href="#B-解题" class="headerlink" title="B. 解题"></a>B. 解题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$位大整数，询问$~q~$次，每次给定一个正整数$~m~$。选取大整数十进制表示下连续的一段保留，其余全变成$~0~$，找出最小的如此生成的正整数满足是$~m~$的倍数，或者不存在。<br>数据范围$~1\leq n\leq10^6,~1\leq q\leq500,~\sum m\leq5\times10^7~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~a_i~$为大整数后$~i~$位模$~m~$的余数，注意需要添加$~a_0=0~$。取区间$~[l,r]~$生成的数字是$~m~$的倍数，等价于$~a_{n+1-l}=a_{n-r}~$。只要将$~i~$从小到大计算$~a_i~$，对于最小的$~j~$，存在$~i&lt; j~$满足$~a_i=a_j~$，则答案$~[l,r]=[n+1-j,n-i]~$。由抽屉原理，至多计算$~m+1~$次就一定能得出答案。总时间复杂度为$~O(\sum m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = num.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dig(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) dig[i] = num[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos(m, <span class="number">0</span>);</span><br><span class="line">pos[<span class="number">0</span>] = n;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> base = <span class="number">1</span>, now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">now = (now + base * dig[i]) % m;</span><br><span class="line"><span class="keyword">if</span> (pos[now]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; pos[now] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos[now] = i;</span><br><span class="line">base = base * <span class="number">10</span> % m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-魔板"><a href="#C-魔板" class="headerlink" title="C. 魔板"></a>C. 魔板</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个$~n\times m~$个格点的网格图，第$~i~$行第$~j~$列的坐标为$~(i,j)~$。每个点有个数字，有序状态下$~(i,j)~$的数字为$~(i-1)\times m+j~$。有两种置换方式：选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x,y+1)~$上的数字顺时针交换；选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x+1,y+1),(x,y+1)~$上的数字顺时针交换。现给定一个打乱的状态，输出任意一种使其有序的操作方式，且次数不能超过$~3\cdot10^6~$。<br>数据范围$~2\leq n,m\leq100~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>构造大模拟。注意到先进行$~1~$次操作$~2~$再进行$~2~$次操作$~1~$，等价于只交换$~(x+1,y)~$和$~(x+1,y+1)~$。先进行$~2~$次操作$~1~$再进行$~1~$次操作$~2~$，等价于只交换$~(x,y+1)~$和$~(x+1,y+1)~$。那么暴力模拟即可，上限$~3\cdot10^6~$其实很宽松。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line">pii pos[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">101</span>][<span class="number">101</span>], m, n, res_size;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, pii&gt; res[<span class="number">1</span> &lt;&lt; <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = b] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = c] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">1</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x + <span class="number">1</span>][y + <span class="number">1</span>], d = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y + <span class="number">1</span>] = b] = mp(x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = c] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = d] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">2</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work2(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_right</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work2(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line">pos[mat[i][j]] = mp(i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j, ++k) &#123;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &lt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss);</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &gt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ff &gt; i + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">1</span>) &#123;</span><br><span class="line">work2(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != i) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != m) &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_right(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res_size &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != res_size; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[i].ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ss &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-进制转换"><a href="#D-进制转换" class="headerlink" title="D. 进制转换"></a>D. 进制转换</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问$~[l,r]~$中有多少个数的$~k~$进制表示恰好有$~m~$个末尾$~0~$。<br>数据范围$1\leq T\leq10^5,~1\leq l\leq r\leq10^18,~2\leq k,m\leq100$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。预处理所有的$~k^m~$，然后将$~k^m~$的倍数的数量减去$~k^{m+1}~$的数量即可。总时间复杂度为$~O(km+T)~$，注意细节。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pown[<span class="number">101</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k, <span class="keyword">const</span> <span class="keyword">int</span>&amp; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~pown[k][m] ? n / pown[k][m] : <span class="number">0</span>) - (~pown[k][m + <span class="number">1</span>] ? n / pown[k][m + <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">pown[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">101</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pown[i][j - <span class="number">1</span>] &lt; INF / i &amp;&amp; ~pown[i][j - <span class="number">1</span>])</span><br><span class="line">pown[i][j] = pown[i][j - <span class="number">1</span>] * i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pown[i][j] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line"><span class="keyword">int</span> k, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k &gt;&gt; m;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(r, k, m) - calc(l - <span class="number">1</span>, k, m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-中位数"><a href="#E-中位数" class="headerlink" title="E. 中位数"></a>E. 中位数</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个带点权有重边的有向无环图$~\text{DAG}~$，问点$~1~$到点$~n~$所有路径的最大中位数。路径的中位数定义为升序后角标为$~\lfloor\frac{x}{2}\rfloor+1~$的权值。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分套$~\text{DAG}~$上差分$~\text{DP}~$。二分答案，然后对于权值大于等于当前值的点标记为$~1~$反之为$~-1~$。从点$~1~$开始跑$~\text{DP}~$，如果点$~n~$的结果小于$~0~$，则当前值过大。可以先对$~\text{DAG}~$先拓扑排序，这样$~\text{DP}~$过程不需要用递归实现，常数小。总时间复杂度为$~O(n\log A)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> deg[maxn], a[maxn], cal[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!deg[v]++) dfs(v); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">topo.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[topo[i]]) <span class="keyword">if</span> (!--deg[j]) topo.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; end)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cal, <span class="number">0xc0</span>, <span class="keyword">sizeof</span> (cal));</span><br><span class="line">cal[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> u : topo) &#123;</span><br><span class="line">a[u] &lt; x ? --cal[u] : ++cal[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) cal[v] = max(cal[v], cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cal[end] &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line">dfs();</span><br><span class="line"><span class="keyword">if</span> (!deg[n]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid, n)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; left &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-方差"><a href="#F-方差" class="headerlink" title="F. 方差"></a>F. 方差</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数，问$~m~$个数的最小方差$~\sigma^2~$是多少，输出$~\sigma^2m^2~$。<br>数据范围$~1\leq m\leq n\leq10^6,~1\leq x\leq10^3~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先排序，注意到数据范围，桶排（基数排序）的时间复杂度为$~O(n+x)~$。注意到方差计算公式</p><script type="math/tex; mode=display">\begin{aligned}\sigma^2    &=\frac{1}{m}\sum(a-\bar{a})^2   \\            &=\frac{1}{m}\sum a^2-\bar{a}^2\end{aligned}</script><p>于是答案计算公式为</p><script type="math/tex; mode=display">\max\{m\sum_{i=l}^{r}a_i^2-(\sum_{i=l}^{r}a_i)^2\}</script><p>滑窗即可。总时间复杂度为$~O(n+x)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) cal1 += a[i] * a[i], cal2 += a[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = cal1 * m - cal2 * cal2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i ^ n; ++i) &#123;</span><br><span class="line">cal1 += a[i] * a[i] - a[i - m] * a[i - m];</span><br><span class="line">cal2 += a[i] - a[i - m];</span><br><span class="line">res = min(res, cal1 * m - cal2 * cal2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 60 (Rated for Div. 2)</title>
      <link href="/2019/02/24/Educational%20Codeforces%20Round%2060%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/02/24/Educational%20Codeforces%20Round%2060%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1117" target="_blank" rel="noopener">Educational Codeforces Round 60 (Rated for Div. 2)</a></p><h2 id="A-Best-Subsegment"><a href="#A-Best-Subsegment" class="headerlink" title="A. Best Subsegment"></a>A. Best Subsegment</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> x = * max_element(a.begin(), a.end());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> aa : a) &#123;</span><br><span class="line"><span class="keyword">if</span> (aa ^ x) res = max(res, cnt), cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> ++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(res, cnt) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Emotes"><a href="#B-Emotes" class="headerlink" title="B. Emotes"></a>B. Emotes</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>  (n--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &gt; max2) max2 = a;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m / (k + <span class="number">1</span>) * (max1 * k + max2) + m % (k + <span class="number">1</span>) * max1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Magic-Ship"><a href="#C-Magic-Ship" class="headerlink" title="C. Magic Ship"></a>C. Magic Ship</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要让一艘船从$~(x_1,~y_1)~$走到$~(x_2,~y_2)~$，每天可以选择上下左右或者不走。但是还有给定的周期为$~n~$的风速影响，每天船的最终移动为当前的风速与船速的选择之和。问到达目的地的最短时间或达不到。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将船速和风速分开考虑。那么第$~k~$天能到达目的地，当且仅当$~{\mid x_2-x_3\mid+\mid y_2-y_3\mid}\leq k~$。其中$~(x_3,~y_3)~$为如果这$~k~$天船本身静止依靠风速所到达的地点。那么就可以二分天数得出答案了。总时间复杂度为$~O(n+\log\max)~$。</p><h3 id="代码、"><a href="#代码、" class="headerlink" title="代码、"></a><strong>代码</strong>、</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> + (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> pll&amp; y) &#123;<span class="keyword">return</span> mp(x.ff + y.ff, x.ss + y.ss);&#125;</span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> - (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> pll&amp; y) &#123;<span class="keyword">return</span> mp(x.ff - y.ff, x.ss - y.ss);&#125;</span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> * (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y) &#123;<span class="keyword">return</span> mp(x.ff * y, x.ss * y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pll wind[maxn], p1, p2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; step)</span> </span>&#123;</span><br><span class="line">pll tmp = wind[n] * (step / n) + wind[step % n] - p2;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(tmp.ff) + <span class="built_in">abs</span>(tmp.ss) &lt;= step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p1.ff &gt;&gt; p1.ss &gt;&gt; p2.ff &gt;&gt; p2.ss &gt;&gt; n;</span><br><span class="line">p2 = p2 - p1;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, pll&gt; cal;</span><br><span class="line">cal[<span class="string">'U'</span>] = mp(<span class="number">0L</span>L, <span class="number">1L</span>L);</span><br><span class="line">cal[<span class="string">'D'</span>] = mp(<span class="number">0L</span>L, <span class="number">-1L</span>L);</span><br><span class="line">cal[<span class="string">'L'</span>] = mp(<span class="number">-1L</span>L, <span class="number">0L</span>L);</span><br><span class="line">cal[<span class="string">'R'</span>] = mp(<span class="number">1L</span>L, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">wind[i] = wind[i - <span class="number">1</span>] + cal[ch];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) right = mid;</span><br><span class="line"><span class="keyword">else</span> left = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (right ^ INF ? right : <span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Magic-Gems"><a href="#D-Magic-Gems" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>观察样例可知题目等价于询问有多少长度为$~N~$的$~01~$序列使得每段连续的$~0~$的长度都是$~M~$的倍数。<br>数据范围$~1\leq N\leq10^{18},~2\leq M\leq100~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然有答案序列的转移式$~res_N=res_{N-1}+res_{N-M}~$。那么转化为矩阵快速幂问题可以在$~O(M^3\log N)~$的时间复杂内解决。当然也存在$~O(M^2\log N)~$与$~O(M\log M\log N)~$的算法。</p><h3 id="代码（-O-M-3-log-N-）"><a href="#代码（-O-M-3-log-N-）" class="headerlink" title="代码（$~O(M^3\log N)~$）"></a><strong>代码（$~O(M^3\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], mat[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>], m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ m; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = base[<span class="number">0</span>][m - <span class="number">1</span>] = mat[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ m; ++i) base[i][i - <span class="number">1</span>] = mat[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, mat, base);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mat[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-M-2-log-N-）"><a href="#代码（-O-M-2-log-N-）" class="headerlink" title="代码（$~O(M^2\log N)~$）"></a><strong>代码（$~O(M^2\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function">vi <span class="title">linear_calc</span><span class="params">(vi&amp; c, <span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = c.size();</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = c.front(); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vi(<span class="number">1</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;vi&gt; base(size &lt;&lt; <span class="number">1</span>, vi(size, <span class="number">0</span>)), <span class="built_in">pow</span>(<span class="number">64</span>, vi(size, <span class="number">0</span>));</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">base[i][j] = add(mul(base[i - <span class="number">1</span>].back(), c[j]), j ? base[i - <span class="number">1</span>][j - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (n &lt; (size &lt;&lt; <span class="number">1</span>)) <span class="keyword">return</span> base[n];</span><br><span class="line"><span class="built_in">pow</span>[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) &#123;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line">tmp[j + k] = add(tmp[j + k], mul(<span class="built_in">pow</span>[i - <span class="number">1</span>][j], <span class="built_in">pow</span>[i - <span class="number">1</span>][k]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size &lt;&lt; <span class="number">1</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line"><span class="built_in">pow</span>[i][k] = add(<span class="built_in">pow</span>[i][k], mul(tmp[j], base[j][k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">vi ret = <span class="built_in">pow</span>[index];</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">tmp[i + j] = add(tmp[i + j], mul(ret[i], <span class="built_in">pow</span>[index][j]));</span><br><span class="line">fill(ret.begin(), ret.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">ret[j] = add(ret[j], mul(tmp[i], base[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vi <span class="title">base</span><span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">base.front() = base.back() = <span class="number">1</span>;</span><br><span class="line">base = linear_calc(base, n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : base) res = add(res, x);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Decypher-the-String"><a href="#E-Decypher-the-String" class="headerlink" title="E. Decypher the String"></a>E. Decypher the String</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。现有一个确定但不给出的字符串重排置换，然后给定一个某字符串经过该置换得到的新串。你可以询问任意一个同样长度的字符串，然后返回经过该置换得到的新串。要求在$~3~$次询问以内找出给定串的原串。所有字符串均为小写字母串。<br>数据范围$~1\leq n\leq10^4~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>字符集大小为$~26~$。那么考虑这样的一个询问：字符串开头从$~\text{a}~$开始，每隔$~26^k~$个字符切换到下一个字母。那么就可以得到逆置换下，每个位置所指向的新位置模$~26^{k+1}~$的余数$~x~$再除以$~26^k~$的下取整$~\lfloor\frac{x}{26^k}\rfloor~$的值是多少。所以当$~n\leq10^4\leq26^3~$时，做$~3~$次询问就能确定置换。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str, ask[<span class="number">3</span>], ans[<span class="number">3</span>], res(<span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> j = <span class="string">'a'</span>; j &lt;= <span class="string">'z'</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> k = <span class="string">'a'</span>; k &lt;= <span class="string">'z'</span>; ++k) &#123;</span><br><span class="line">ask[<span class="number">0</span>].append(<span class="number">1</span>, i);</span><br><span class="line">ask[<span class="number">1</span>].append(<span class="number">1</span>, j);</span><br><span class="line">ask[<span class="number">2</span>].append(<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = str.size();</span><br><span class="line">str.append(<span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span> - n, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; ask[i].substr(<span class="number">0</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ans[i];</span><br><span class="line">ans[i].append(ask[i], n, <span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span> - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span>; ++i)</span><br><span class="line">res[<span class="number">26</span> * <span class="number">26</span> * (ans[<span class="number">0</span>][i] - <span class="string">'a'</span>) + <span class="number">26</span> * (ans[<span class="number">1</span>][i] - <span class="string">'a'</span>) + (ans[<span class="number">2</span>][i] - <span class="string">'a'</span>)] = str[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; res.substr(<span class="number">0</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Crisp-String"><a href="#F-Crisp-String" class="headerlink" title="F. Crisp String"></a>F. Crisp String</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$由前$~p~$个小写字母组成的字符串，以及一个$~p\times p~$的$~01~$对称矩阵。定义一个字符串是$~\text{crisp}~$的，当且仅当字符串中所有相邻的字符对在矩阵中对应的值是$~1~$，保证给定字符串是$~\text{crisp}~$的。每一步操作可以选择一个还有的字母，将字符串中所有该字母删除。在保证每一步操作后字符串依然是$~\text{crisp}~$的条件下，问字符串最短长度。<br>数据范围$~1\leq n\leq10^5,~1\leq p\leq17~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\text{DP}~$。按位储存当前状态下还有那些字母存在，那么只需要考虑每个状态的合法性即可。对于每对字母$~(i,~j)~$，可以线性对字符串扫描一遍，算出恰好使得$~i~$与$~j~$相邻所需要删除的状态。然后再对所有状态$~\text{DP}~$，得出在每个状态下$~i~$与$~j~$是否相邻。总时间复杂度为$~O(np^2+p^32^p)~$。代码所写的常数比较大，也存在$~O(np+p^32^p)~$的做法。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, A[<span class="number">17</span>][<span class="number">17</span>], cnt[<span class="number">17</span>], cal[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], res = maxn, a[maxn];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], adj[<span class="number">17</span>][<span class="number">17</span>][<span class="number">1</span> &lt;&lt; <span class="number">17</span>], vis[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[mask]) <span class="keyword">return</span>;</span><br><span class="line">vis[mask] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j)</span><br><span class="line"><span class="keyword">if</span> (mask &amp; <span class="number">1</span> &lt;&lt; i &amp;&amp; mask &amp; <span class="number">1</span> &lt;&lt; j &amp;&amp; !A[i][j] &amp;&amp; adj[i][j][((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>) ^ mask]) <span class="keyword">return</span>;</span><br><span class="line">res = min(res, cal[mask]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">if</span> (mask &amp; <span class="number">1</span> &lt;&lt; i) dfs(mask ^ <span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j) <span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) ++cnt[a[i] = str[i] - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; p); ++i) cal[i] = cal[i ^ (i &amp; -i)] + cnt[__builtin_ctz(i)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j) &#123;</span><br><span class="line"><span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, l; k != n; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[k] == j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check) adj[i][j][l] = adj[j][i][l] = <span class="literal">true</span>;</span><br><span class="line">check = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[k] == i) &#123;</span><br><span class="line">check = <span class="literal">true</span>;</span><br><span class="line">l = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[k] != i &amp;&amp; a[k] != j) l |= <span class="number">1</span> &lt;&lt; a[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != (<span class="number">1</span> &lt;&lt; p); ++k) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l != p; ++l)</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span> &lt;&lt; l) adj[i][j][k] |= adj[i][j][k ^ <span class="number">1</span> &lt;&lt; l];</span><br><span class="line">dfs((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Recursive-Queries"><a href="#G-Recursive-Queries" class="headerlink" title="G. Recursive Queries"></a>G. Recursive Queries</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个全排列$~p_1,~p_2,~\dots,~p_n~$，定义</p><script type="math/tex; mode=display">f(l,~r)=\begin{cases}(r-l+1)+f(l,~m_{lr}-1)+f(m_{lr}+1,~r)   &\text{$l\leq r$}   \\0                                       &\text{$l>r$}\end{cases}</script><p>其中$~m_{lr}~$表示$~p_l,~\dots,~p_r~$中最大值的角标。一共问$~q~$组$~f(l,~r)~$。<br>数据范围$~1\leq n\leq10^6,~1\leq q\leq10^6~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>定义</p><script type="math/tex; mode=display">fl(l,~r)=(m_{lr}-l)+fl(l,~m_{lr}-1)+fl(m_{lr}+1,~r) \\fr(l,~r)=(r-m_{lr})+fr(l,~m_{lr}-1)+fr(m_{lr}+1,~r)</script><p>则有</p><script type="math/tex; mode=display">f(l,~r)=(r-l+1)+fl(l,~r)+fr(l,~r)</script><p>先计算$~fl(l,~r)~$。令</p><script type="math/tex; mode=display">g(i)=\min\{j\mid p_k\leq p_i,~\forall~k\in[j,~i]\}</script><p>这一步可以通过<strong>单调栈</strong>线性处理。此时$~[l,~r]~$中每个点$~i~$作为计算过程中的$~m_{lr}~$时对于$~fl(l,~r)~$的贡献为$~i-\max(l,~g(i))~$。即</p><script type="math/tex; mode=display">fl(l,~r)=\sum_{i=l}^{r}i-\max(l,~g(i))</script><p>在固定$~r~$的条件下，$~fl(l,~r)~$可以视为关于$~l~$的分段线性函数。将询问离线，然后对右端点$~r~$从小到大扫一遍，每次对当前的分段线性函数增加$~r-\max(l,~g(r))~$。如何维护分段线性函数？考虑分段线性函数中的斜率$~k~$和截距$~b~$。当$~l&lt; g(r)~$时，可视为$~b~$增加$~r-g(r)~$。反之$~b~$增加$~r~$，而$~k~$减少$~1~$。于是需要一个支持<strong>区间修改</strong>和<strong>单点查询</strong>的数据结构，用<strong>差分树状数组</strong>即可。对于$~fr(l,~r)~$的计算，将所有数据翻转后等价于计算$~fl(l,~r)~$，总时间复杂度为$~O((n+q)\log n)~$。<strong>不推荐使用递归线段树</strong>，大常数加上递归复杂度基本会$~\text{TLE}~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], l[maxn], r[maxn], sta[maxn], sta_size, cal[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res[maxn], bit1[maxn], bit2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> bit[], <span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt; maxn; i += lowbit(i)) bit[i] += a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pre_sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> bit[], <span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i ^= lowbit(i)) ret += bit[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cin</span> &gt;&gt; l[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cin</span> &gt;&gt; r[i], query[r[i]].push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (sta_size &amp;&amp; p[sta[sta_size]] &lt; p[i]) --sta_size;</span><br><span class="line">cal[i] = sta[sta_size] + <span class="number">1</span>;</span><br><span class="line">sta[++sta_size] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">modify(bit1, <span class="number">1</span>, i - cal[i]);</span><br><span class="line">modify(bit1, i + <span class="number">1</span>, -i);</span><br><span class="line">modify(bit1, cal[i], cal[i]);</span><br><span class="line">modify(bit2, cal[i], <span class="number">1</span>);</span><br><span class="line">modify(bit2, i + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : query[i]) res[x] += pre_sum(bit1, l[x]) - pre_sum(bit2, l[x]) * l[x];</span><br><span class="line">&#125;</span><br><span class="line">reverse(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line">sta_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (sta_size &amp;&amp; p[sta[sta_size]] &lt; p[i]) --sta_size;</span><br><span class="line">cal[i] = sta[sta_size] + <span class="number">1</span>;</span><br><span class="line">sta[++sta_size] = i;</span><br><span class="line">query[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">r[i] = n + <span class="number">1</span> - r[i];</span><br><span class="line">query[n + <span class="number">1</span> - l[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(bit1, <span class="number">0</span>, <span class="keyword">sizeof</span> (bit1));</span><br><span class="line"><span class="built_in">memset</span>(bit2, <span class="number">0</span>, <span class="keyword">sizeof</span> (bit2));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">modify(bit1, <span class="number">1</span>, i - cal[i]);</span><br><span class="line">modify(bit1, i + <span class="number">1</span>, -i);</span><br><span class="line">modify(bit1, cal[i], cal[i]);</span><br><span class="line">modify(bit2, cal[i], <span class="number">1</span>);</span><br><span class="line">modify(bit2, i + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : query[i]) res[x] += pre_sum(bit1, r[x]) - pre_sum(bit2, r[x]) * r[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ m; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] - l[i] - r[i] + n + <span class="number">2</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[m] - l[m] - r[m] + n + <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 539 (Div. 2) (TBC)</title>
      <link href="/2019/02/19/Codeforces%20Round%20539%20(Div.%202)%20(TBC)/"/>
      <url>/2019/02/19/Codeforces%20Round%20539%20(Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1113" target="_blank" rel="noopener">Codeforces Round #539 (Div. 2)</a></p><h2 id="A-Sasha-and-His-Trip"><a href="#A-Sasha-and-His-Trip" class="headerlink" title="A. Sasha and His Trip"></a>A. Sasha and His Trip</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n &gt; v ? (n - v + <span class="number">1</span>) * (n - v) / <span class="number">2</span> + v - <span class="number">1</span> : n - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Sasha-and-Magnetic-Machines"><a href="#B-Sasha-and-Magnetic-Machines" class="headerlink" title="B. Sasha and Magnetic Machines"></a>B. Sasha and Magnetic Machines</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a.back(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j; --j)</span><br><span class="line"><span class="keyword">if</span> (a[j] % i == <span class="number">0</span>)</span><br><span class="line">cal = min(cal, (i - <span class="number">1</span>) * (a.front() - a[j] / i));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(a.begin(), a.end(), <span class="number">0</span>) + cal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Sasha-and-a-Bit-of-Relax"><a href="#C-Sasha-and-a-Bit-of-Relax" class="headerlink" title="C. Sasha and a Bit of Relax"></a>C. Sasha and a Bit of Relax</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的序列，问有多少个偶数长度的连续子序列满足前一半的$~\text{xor}~$和等于后一半的$~\text{xor}~$和。<br>数据范围$~2\leq n\leq3\cdot10^5,~0\leq a&lt; 2^{20}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>条件其实等价于这个区间的$~\text{xor}~$和为$~0~$。注意到数据范围，只需要开一个$~cnt~$数组记录前缀$~\text{xor}~$和，然从前往后扫的过程中更新答案和$~cnt~$即可。时间复杂度为$~O(n)~$，空间复杂度$~O(a)~$。当然用$~\text{map}~$来储存$~cnt~$也可以，这样的时间复杂度为$~O(n\log n)~$，空间复杂度为$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[<span class="number">1</span> &lt;&lt; <span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], ++cnt[a[i] ^= a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">res += cnt[a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span> ^ <span class="number">1</span>];</span><br><span class="line">--cnt[a[i]][i &amp; <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sasha-and-One-More-Name"><a href="#D-Sasha-and-One-More-Name" class="headerlink" title="D. Sasha and One More Name"></a>D. Sasha and One More Name</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个回文串，需要切$~k~$刀将其拆成$~k+1~$个连续字串，使得存在一种重新组合是个不同于原串的回文串。输出$~k~$的最小值或不存在。<br>数据范围$~1\leq{\mid s\mid}\leq5000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然如果前$~\frac{\mid s\mid}{2}~$个字符一样，则$~k~$不存在。否则存在一个前缀和后缀，将它们交换后可以得到一个新的回文串，于是$~1\leq k\leq2~$。暴力枚举判断即可，时间复杂度为$~O(n^2)~$。但是这题可以进一步优化，如果$~k=1~$，由对称性，不妨设在切在前半段，则所切的那一刀必然得到一个偶数长度的回文前缀的前一半，且剩下的后缀也是回文串（或空串）。运用$~\text{Manacher}~$算法可以在线性时间内处理出每个中心所对应的最长回文串。那怎么判断这样的做法得到的新串是否和原串不一样呢？最朴素的方式是运用$~\text{ex-KMP}~$算法。另一种只需要判断切的这一刀的左边，也就是这个回文前缀的的前一半，是否也是个回文串。如果是，则得到的新串必然和原串一样，这个可以自行证明。不论是否运用$~\text{ex-KMP}~$算法，总时间复杂度均为$~O(n)~$。</p><h3 id="代码（-O-n-2-）"><a href="#代码（-O-n-2-）" class="headerlink" title="代码（$~O(n^2)~$）"></a><strong>代码（$~O(n^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(o) o.begin(), o.end()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.size() &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (*max_element(all(sub)) == *min_element(all(sub)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!sub.empty()) &#123;</span><br><span class="line"><span class="built_in">string</span> tmp = str.substr(sub.size()) + sub;</span><br><span class="line"><span class="built_in">string</span> pmt = tmp;</span><br><span class="line">reverse(all(pmt));</span><br><span class="line"><span class="keyword">if</span> (tmp == pmt &amp;&amp; str != tmp) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">sub.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn], tmp[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> n, <span class="keyword">char</span> tmp[], <span class="keyword">int</span> len[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = n + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, ret = <span class="number">1</span>;</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="string">'$'</span>, tmp[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] = str[i], tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, mid = <span class="number">1</span>, right = <span class="number">1</span>; i ^ l; ++i)</span><br><span class="line"><span class="keyword">if</span> ((i &gt; right) | (i + (len[i] = len[(mid &lt;&lt; <span class="number">1</span>) - i]) &gt; right)) &#123;</span><br><span class="line"><span class="keyword">for</span> (len[mid = i] = <span class="number">1</span>; tmp[i - len[i]] == tmp[i + len[i]]; ++len[i]);</span><br><span class="line">ret = max(ret, len[i] - <span class="number">1</span>);</span><br><span class="line">right = i + len[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;<span class="keyword">return</span> right - left + <span class="number">2</span> == len[left + right + <span class="number">2</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">if</span> (*max_element(str, str + (n &gt;&gt; <span class="number">1</span>)) == *min_element(str, str + (n &gt;&gt; <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">manacher(str, n, tmp, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (!is_palindrome(<span class="number">0</span>, i) &amp;&amp; is_palindrome(<span class="number">0</span>, i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>) &amp;&amp; is_palindrome(i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Sasha-and-Interesting-Fact-from-Graph-Theory"><a href="#F-Sasha-and-Interesting-Fact-from-Graph-Theory" class="headerlink" title="F. Sasha and Interesting Fact from Graph Theory"></a>F. Sasha and Interesting Fact from Graph Theory</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多少棵节点编号为$~1,~2,~\dots,~n~$，边权范围为$~[1,~m]~$的树，满足连接$~a~$与$~b~$的简单路径的边权之和为$~m~$。<br>数据范围$~2\leq n\leq10^6,~1\leq m\leq10^6~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>有编号生成树计数问题离不开<a href="https://en.wikipedia.org/wiki/Pr%C3%BCfer_sequence" target="_blank" rel="noopener">$~\text{Pru2fer}~$序列</a>。一棵大小为$~n~$的无根树的$~\text{Pru2fer}~$序列定义为：每次删去编号最小的叶节点并记录唯一与之相邻的编号，直到还剩$~2~$个点所构成的长度为$~n-2~$的序列。容易证明不同无根树的$~\text{Pru2fer}~$序列一定不同。相反的对于每个长度为$~n-2~$数据范围为$~[1,~n]~$的序列，可以唯一构造出一无根棵树，过程自行思考。于是得到了一个$~n~$阶完全图的无根生成树与$~\text{Pru2fer}~$序列的双射。所以$~n~$阶完全图的无根生成树个数为$~n^{n-2}~$，这也就是<a href="https://en.wikipedia.org/wiki/Cayley&#39;s_formula" target="_blank" rel="noopener">$~\text{Cayley}~$公式</a>。<br>显然$~a~$和$~b~$的值并不影响答案。暴力枚举连接$~a~$与$~b~$的简单路径上的点的个数$~x\in[2,~\min(n,~m+1)]~$。先考虑边权部分，对于路径上$~x-1~$条边的边权，这是个很普通的组合数学问题，答案为$~\binom{m-1}{x-1}~$。对于路径外$~n-x~$条边的边权，没有任何限制，答案为$~m^{n-x}~$。对于路径上的点的组合，答案为$~A_{n-2}^{x-2}=\frac{(n-2)!}{(n-x)!}~$。现在问题剩下的部分等价于给定一条$~x~$点的路径的生成树计数问题。<br>不妨设这些点为$~n,~n-1,~\dots,~n-x+1~$。那么这棵树的的$~\text{Pru2fer}~$序列的后$~x-2~$项必为$~n-x+2,~n-x+3,~\dots,~n~$，且倒数第$~x-1~$项必然在$~[n-x+1,~n]~$之中。有了这些限制，合法的$~\text{Pru2fer}~$序列数量为$~x\cdot n^{n-x-1}~$，也就是对应生成树的数量。最终答案公式为</p><script type="math/tex; mode=display">\sum_{x=2}^{\min(n,~m+1)}\frac{x\cdot(n-2)!}{n\cdot(n-x)!}(nm)^{n-x}\binom{m-1}{x-1}</script><p>如果线性预处理完所有数组，时间复杂度可优化至$~O(n+m)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], pownm[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), mul(c, d));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(fact[a], finv[b], finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">pownm[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">pownm[<span class="number">1</span>] = mul(n, m);</span><br><span class="line"><span class="keyword">int</span> nm = mul(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) pownm[i] = mul(pownm[i - <span class="number">1</span>], nm);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= min(n, m + <span class="number">1</span>); ++x)</span><br><span class="line">res = add(res, mul(mul(pownm[n - x], x, inv[n], bino(m - <span class="number">1</span>, x - <span class="number">2</span>)), fact[n - <span class="number">2</span>], finv[n - x]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 539 (Div. 1) (TBC)</title>
      <link href="/2019/02/18/Codeforces%20Round%20539%20(Div.%201)%20(TBC)/"/>
      <url>/2019/02/18/Codeforces%20Round%20539%20(Div.%201)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1109" target="_blank" rel="noopener">Codeforces Round #539 (Div. 1)</a></p><h2 id="A-Sasha-and-a-Bit-of-Relax"><a href="#A-Sasha-and-a-Bit-of-Relax" class="headerlink" title="A. Sasha and a Bit of Relax"></a>A. Sasha and a Bit of Relax</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的序列，问有多少个偶数长度的连续子序列满足前一半的$~\text{xor}~$和等于后一半的$~\text{xor}~$和。<br>数据范围$~2\leq n\leq3\cdot10^5,~0\leq a&lt; 2^{20}~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>条件其实等价于这个区间的$~\text{xor}~$和为$~0~$。注意到数据范围，只需要开一个$~cnt~$数组记录前缀$~\text{xor}~$和，然从前往后扫的过程中更新答案和$~cnt~$即可。时间复杂度为$~O(n)~$，空间复杂度$~O(a)~$。当然用$~\text{map}~$来储存$~cnt~$也可以，这样的时间复杂度为$~O(n\log n)~$，空间复杂度为$~O(n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[<span class="number">1</span> &lt;&lt; <span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], ++cnt[a[i] ^= a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">res += cnt[a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span> ^ <span class="number">1</span>];</span><br><span class="line">--cnt[a[i]][i &amp; <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Sasha-and-One-More-Name"><a href="#B-Sasha-and-One-More-Name" class="headerlink" title="B. Sasha and One More Name"></a>B. Sasha and One More Name</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个回文串，需要切$~k~$刀将其拆成$~k+1~$个连续字串，使得存在一种重新组合是个不同于原串的回文串。输出$~k~$的最小值或不存在。<br>数据范围$~1\leq{\mid s\mid}\leq5000~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然如果前$~\frac{\mid s\mid}{2}~$个字符一样，则$~k~$不存在。否则存在一个前缀和后缀，将它们交换后可以得到一个新的回文串，于是$~1\leq k\leq2~$。暴力枚举判断即可，时间复杂度为$~O(n^2)~$。但是这题可以进一步优化，如果$~k=1~$，由对称性，不妨设在切在前半段，则所切的那一刀必然得到一个偶数长度的回文前缀的前一半，且剩下的后缀也是回文串（或空串）。运用$~\text{Manacher}~$算法可以在线性时间内处理出每个中心所对应的最长回文串。那怎么判断这样的做法得到的新串是否和原串不一样呢？最朴素的方式是运用$~\text{ex-KMP}~$算法。另一种只需要判断切的这一刀的左边，也就是这个回文前缀的的前一半，是否也是个回文串。如果是，则得到的新串必然和原串一样，这个可以自行证明。不论是否运用$~\text{ex-KMP}~$算法，总时间复杂度均为$~O(n)~$。</p><h3 id="代码（-O-n-2-）"><a href="#代码（-O-n-2-）" class="headerlink" title="代码（$~O(n^2)~$）"></a><strong>代码（$~O(n^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(o) o.begin(), o.end()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.size() &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (*max_element(all(sub)) == *min_element(all(sub)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!sub.empty()) &#123;</span><br><span class="line"><span class="built_in">string</span> tmp = str.substr(sub.size()) + sub;</span><br><span class="line"><span class="built_in">string</span> pmt = tmp;</span><br><span class="line">reverse(all(pmt));</span><br><span class="line"><span class="keyword">if</span> (tmp == pmt &amp;&amp; str != tmp) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">sub.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn], tmp[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> n, <span class="keyword">char</span> tmp[], <span class="keyword">int</span> len[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = n + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, ret = <span class="number">1</span>;</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="string">'$'</span>, tmp[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] = str[i], tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, mid = <span class="number">1</span>, right = <span class="number">1</span>; i ^ l; ++i)</span><br><span class="line"><span class="keyword">if</span> ((i &gt; right) | (i + (len[i] = len[(mid &lt;&lt; <span class="number">1</span>) - i]) &gt; right)) &#123;</span><br><span class="line"><span class="keyword">for</span> (len[mid = i] = <span class="number">1</span>; tmp[i - len[i]] == tmp[i + len[i]]; ++len[i]);</span><br><span class="line">ret = max(ret, len[i] - <span class="number">1</span>);</span><br><span class="line">right = i + len[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;<span class="keyword">return</span> right - left + <span class="number">2</span> == len[left + right + <span class="number">2</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">if</span> (*max_element(str, str + (n &gt;&gt; <span class="number">1</span>)) == *min_element(str, str + (n &gt;&gt; <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">manacher(str, n, tmp, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (!is_palindrome(<span class="number">0</span>, i) &amp;&amp; is_palindrome(<span class="number">0</span>, i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>) &amp;&amp; is_palindrome(i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sasha-and-Interesting-Fact-from-Graph-Theory"><a href="#D-Sasha-and-Interesting-Fact-from-Graph-Theory" class="headerlink" title="D. Sasha and Interesting Fact from Graph Theory"></a>D. Sasha and Interesting Fact from Graph Theory</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多少棵节点编号为$~1,~2,~\dots,~n~$，边权范围为$~[1,~m]~$的树，满足连接$~a~$与$~b~$的简单路径的边权之和为$~m~$。<br>数据范围$~2\leq n\leq10^6,~1\leq m\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>有编号生成树计数问题离不开<a href="https://en.wikipedia.org/wiki/Pr%C3%BCfer_sequence" target="_blank" rel="noopener">$~\text{Pru2fer}~$序列</a>。一棵大小为$~n~$的无根树的$~\text{Pru2fer}~$序列定义为：每次删去编号最小的叶节点并记录唯一与之相邻的编号，直到还剩$~2~$个点所构成的长度为$~n-2~$的序列。容易证明不同无根树的$~\text{Pru2fer}~$序列一定不同。相反的对于每个长度为$~n-2~$数据范围为$~[1,~n]~$的序列，可以唯一构造出一无根棵树，过程自行思考。于是得到了一个$~n~$阶完全图的无根生成树与$~\text{Pru2fer}~$序列的双射。所以$~n~$阶完全图的无根生成树个数为$~n^{n-2}~$，这也就是<a href="https://en.wikipedia.org/wiki/Cayley&#39;s_formula" target="_blank" rel="noopener">$~\text{Cayley}~$公式</a>。<br>显然$~a~$和$~b~$的值并不影响答案。暴力枚举连接$~a~$与$~b~$的简单路径上的点的个数$~x\in[2,~\min(n,~m+1)]~$。先考虑边权部分，对于路径上$~x-1~$条边的边权，这是个很普通的组合数学问题，答案为$~\binom{m-1}{x-1}~$。对于路径外$~n-x~$条边的边权，没有任何限制，答案为$~m^{n-x}~$。对于路径上的点的组合，答案为$~A_{n-2}^{x-2}=\frac{(n-2)!}{(n-x)!}~$。现在问题剩下的部分等价于给定一条$~x~$点的路径的生成树计数问题。<br>不妨设这些点为$~n,~n-1,~\dots,~n-x+1~$。那么这棵树的的$~\text{Pru2fer}~$序列的后$~x-2~$项必为$~n-x+2,~n-x+3,~\dots,~n~$，且倒数第$~x-1~$项必然在$~[n-x+1,~n]~$之中。有了这些限制，合法的$~\text{Pru2fer}~$序列数量为$~x\cdot n^{n-x-1}~$，也就是对应生成树的数量。最终答案公式为</p><script type="math/tex; mode=display">\sum_{x=2}^{\min(n,~m+1)}\frac{x\cdot(n-2)!}{n\cdot(n-x)!}(nm)^{n-x}\binom{m-1}{x-1}</script><p>如果线性预处理完所有数组，时间复杂度可优化至$~O(n+m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], pownm[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), mul(c, d));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(fact[a], finv[b], finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">pownm[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">pownm[<span class="number">1</span>] = mul(n, m);</span><br><span class="line"><span class="keyword">int</span> nm = mul(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) pownm[i] = mul(pownm[i - <span class="number">1</span>], nm);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= min(n, m + <span class="number">1</span>); ++x)</span><br><span class="line">res = add(res, mul(mul(pownm[n - x], x, inv[n], bino(m - <span class="number">1</span>, x - <span class="number">2</span>)), fact[n - <span class="number">2</span>], finv[n - x]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 533 (Div. 2)</title>
      <link href="/2019/02/17/Codeforces%20Round%20533%20(Div.%202)/"/>
      <url>/2019/02/17/Codeforces%20Round%20533%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1105" target="_blank" rel="noopener">Codeforces Round #533 (Div. 2)</a></p><h2 id="A-Salem-and-Sticks"><a href="#A-Salem-and-Sticks" class="headerlink" title="A. Salem and Sticks"></a>A. Salem and Sticks</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>, cost = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> aa : a) now += max(<span class="built_in">abs</span>(aa - i) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (now &lt; cost) t = i, cost = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">' '</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Zuhair-and-Strings"><a href="#B-Zuhair-and-Strings" class="headerlink" title="B. Zuhair and Strings"></a>B. Zuhair and Strings</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">128</span>, <span class="number">0</span>), cal(<span class="number">128</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (++cnt[str.front()] == k) ++cal[str.front()], --cnt[str.front()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[i - <span class="number">1</span>]) cnt[str[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ++cnt[str[i]];</span><br><span class="line"><span class="keyword">if</span> (cnt[str[i]] == k) ++cal[str[i]], cnt[str[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i) res = max(res, cal[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Ayoub-and-Lost-Array"><a href="#C-Ayoub-and-Lost-Array" class="headerlink" title="C. Ayoub and Lost Array"></a>C. Ayoub and Lost Array</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问有多少个长度为$~n~$且取值为$~[l,~r]~$的序列满足总和是$~3~$的倍数。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq l\leq r\leq10^9~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。递推出到每一位上满足总和模$~3~$的余数为$~0,~1,~2~$的序列分别由多少个。这个过程可以用矩阵快速幂优化，总时间复杂度为$~O(\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">3</span>], <span class="keyword">int</span> A[][<span class="number">3</span>], <span class="keyword">int</span> B[][<span class="number">3</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">3</span>; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">3</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) dp[i] = (r - i + <span class="number">3</span>) / <span class="number">3</span> - (l - i + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;dp[<span class="number">0</span>], dp[<span class="number">2</span>], dp[<span class="number">1</span>]&#125;, &#123;dp[<span class="number">1</span>], dp[<span class="number">0</span>], dp[<span class="number">2</span>]&#125;, &#123;dp[<span class="number">2</span>], dp[<span class="number">1</span>], dp[<span class="number">0</span>]&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;, tmp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) mat[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, mat, base);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mat[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Kilani-and-the-Game"><a href="#D-Kilani-and-the-Game" class="headerlink" title="D. Kilani and the Game"></a>D. Kilani and the Game</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times m~$的网格图和$~p~$种颜色的初始位置以及扩散速度$~s~$。每回合每种颜色可以按曼哈顿距离扩散至空白处。问最终每种颜色的大小。<br>数据范围$~1\leq m\leq1000,~1\leq m\leq1000,~1\leq p\leq9,~1\leq s\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸$~\text{BFS}~$，具体实现见代码。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; speed(p), res(p, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;pii&gt;&gt; que(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : speed) <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; vis(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch ^ <span class="string">'.'</span>) &#123;</span><br><span class="line">vis[i][j] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ch ^ <span class="string">'#'</span>) &#123;</span><br><span class="line">++res[ch - <span class="string">'1'</span>];</span><br><span class="line">que[ch - <span class="string">'1'</span>].push(mp(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v(<span class="number">4</span>);</span><br><span class="line">v[<span class="number">0</span>] = mp(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">v[<span class="number">1</span>] = mp(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">v[<span class="number">2</span>] = mp(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">v[<span class="number">3</span>] = mp(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ speed[i]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (que[i].empty()) <span class="keyword">break</span>;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pii&gt; tmp;</span><br><span class="line"><span class="keyword">while</span> (!que[i].empty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> d : v) &#123;</span><br><span class="line"><span class="keyword">int</span> x = que[i].front().ff + d.ff;</span><br><span class="line"><span class="keyword">int</span> y = que[i].front().ss + d.ss;</span><br><span class="line"><span class="keyword">if</span> (!~x || !~y || x == n || y == m || vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">++res[i];</span><br><span class="line">tmp.push(mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line">que[i].pop();</span><br><span class="line">&#125;</span><br><span class="line">que[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ p - <span class="number">1</span>; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Helping-Hiasat"><a href="#E-Helping-Hiasat" class="headerlink" title="E. Helping Hiasat"></a>E. Helping Hiasat</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~m~$个字符串，现给出若干个字符串集合，要求选出最多的字符串使得每个集合里至多选一个。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq40,~1\leq{\mid s\mid}\leq40~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然可以通过$~\text{map}~$之类的手段化为一个图上<strong>最大独立集</strong>的问题。而它的<strong>补图</strong>是个<strong>最大团</strong>问题。用$~\text{Bron-Kerbosch}~$算法可以在$~O(3^\frac{m}{3})~$的时间复杂度内解决。总时间复杂度为$~O(n\log\mid s\mid+3^\frac{m}{3})~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> count1_64 __builtin_popcountll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> low0_64 __builtin_ctzll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">40</span>;</span><br><span class="line">ull adj[maxn];</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bk</span><span class="params">(ull cur, ull allow, ull forbid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!allow) &#123;</span><br><span class="line"><span class="keyword">if</span> (!forbid) res = max(res, count1_64(cur));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ull tmp = allow &amp; ~adj[low0_64(allow | forbid)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (<span class="number">1U</span>LL &lt;&lt; i &amp; tmp) &#123;</span><br><span class="line">bk(cur ^ <span class="number">1U</span>LL &lt;&lt; i, allow &amp; adj[i], forbid &amp; adj[i]);</span><br><span class="line">allow ^= <span class="number">1U</span>LL &lt;&lt; i;</span><br><span class="line">forbid ^= <span class="number">1U</span>LL &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line">ull now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> id_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (now &amp; <span class="number">1U</span>LL &lt;&lt; i) adj[i] |= now;</span><br><span class="line">now = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (id.find(str) == id.end()) id[str] = id_++;</span><br><span class="line">now |= <span class="number">1U</span>LL &lt;&lt; id[str];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now &amp; <span class="number">1U</span>LL &lt;&lt; i) adj[i] |= now;</span><br><span class="line">adj[i] ^= (<span class="number">1U</span>LL &lt;&lt; m) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">bk(<span class="number">0</span>, (<span class="number">1U</span>LL &lt;&lt; maxn) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019 Wannafly Winter Camp Day1 Div1</title>
      <link href="/2019/02/16/2019%20Wannafly%20Winter%20Camp%20Day1%20Div1/"/>
      <url>/2019/02/16/2019%20Wannafly%20Winter%20Camp%20Day1%20Div1/</url>
      
        <content type="html"><![CDATA[<h2 id="A-机器人"><a href="#A-机器人" class="headerlink" title="A. 机器人"></a>A. 机器人</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。注意特殊情况讨论。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, r, m, k, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r &gt;&gt; m &gt;&gt; k &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> left[<span class="number">2</span>] = &#123;n, n&#125;, right[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (r--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">left[y] = min(left[y], x);</span><br><span class="line">right[y] = max(right[y], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">flag[<span class="number">1</span>] = flag[n] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos;</span><br><span class="line">flag[pos] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ll = min(left[<span class="number">0</span>], left[<span class="number">1</span>]), rr = max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> lll = ll, rrr = rr;</span><br><span class="line"><span class="keyword">while</span> (!flag[lll]) --lll;</span><br><span class="line"><span class="keyword">while</span> (!flag[rrr]) ++rrr;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span> (right[<span class="number">1</span>]) &#123;</span><br><span class="line">res = k;</span><br><span class="line"><span class="keyword">if</span> (s &lt; ll) &#123;</span><br><span class="line">lll = left[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (!flag[lll]) --lll;</span><br><span class="line">res += rrr - min(s, lll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s &gt; rr) &#123;</span><br><span class="line">rrr = right[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (!flag[rrr]) ++rrr;</span><br><span class="line">res += max(s, rrr) - lll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">res += rrr - lll;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s &lt; ll) res = rrr - s;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s &gt; rr) res = s - lll;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ll == rr) res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> res = rrr - lll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (res &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-吃豆豆"><a href="#B-吃豆豆" class="headerlink" title="B. 吃豆豆"></a>B. 吃豆豆</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~n\times m~$的网格图上，对于格子$~(i,~j)~$，在$~T[i][j]~$的整数倍秒时会由糖果在上面。现给定起点和终点，每秒可以选择上下左右或者不动，然后可以取走当前格子上的糖果，如果存在的话。问要获得$~C~$个糖果的最短时间。<br>数据范围$~1\leq n\leq10,~1\leq m\le10,~1\leq T\leq10,~1\leq C\leq10^{18}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划，记录$~dp[i][j][k]~$表示第$~0~$秒在$~j~$点，第$~i~$秒在$~k~$点最多能得到多少颗糖果，这里$~j~$和$~k~$的范围是$~[0,~nm)~$。枚举$~i~$到$~\gcd(1,~2,~\dots,~10)=2520~$即可，因为第$~2520x~$秒在$~j~$点$~2520x+i~$秒在$~k~$点最多能得到的糖果数也为$~dp[i][j][k]~$。这里我们可以将$~dp[i]~$看作一个$~nm\times nm~$的矩阵，将正常的矩阵乘法中的数值乘法变为加法，数值乘法变为取$~\max~$。于是对于从$~0~$秒到第$~2520x~$秒的最多糖果矩阵，即为$~dp[2520]^x~$。由于可以原地不动，所以从$~(xs,~ys)~$到$~(xt,~yt)~$经过$~t~$秒所能得到的最多糖果数是单调递增的。用带余除法分解$~t=2520x+y~$，于是通过倍增可以求出$~x~$，然后二分$~y~$可以算出最小的$~t~$值。<br>总时间复杂度为$~O(12600n^4+n^6\log C)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> STEP = <span class="number">2520</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mat_size = <span class="number">10000</span> * <span class="keyword">sizeof</span> (__int128);</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">100</span>];</span><br><span class="line">__int128 dp0[<span class="number">100</span>][<span class="number">100</span>], dp1[<span class="number">100</span>][<span class="number">100</span>], dp[STEP + <span class="number">1</span>][<span class="number">100</span>], mat[<span class="number">64</span>][<span class="number">100</span>][<span class="number">100</span>], now[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>], cal[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(__int128&amp; x, <span class="keyword">const</span> __int128&amp; y)</span> </span>&#123;x &lt; y ? (x = y) : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(__int128 C[][<span class="number">100</span>], __int128 A[][<span class="number">100</span>], __int128 B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) <span class="keyword">if</span> (~A[i][k] &amp;&amp; ~B[k][j]) update(C[i][j], A[i][k] + B[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(__int128 C[], __int128 A[][<span class="number">100</span>], __int128 B[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">C[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">if</span> (~A[i][j] &amp;&amp; ~B[j]) update(C[i], A[i][j] + B[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cout128</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) cout128(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">int</span>(x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; C;</span><br><span class="line"><span class="keyword">int</span> size = n * m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="built_in">cin</span> &gt;&gt; T[i];</span><br><span class="line"><span class="keyword">int</span> xss, yss, xtt, ytt;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; xss &gt;&gt; yss &gt;&gt; xtt &gt;&gt; ytt;</span><br><span class="line"><span class="keyword">int</span> ss = xss * m + yss - m - <span class="number">1</span>, tt = xtt * m + ytt - m - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">100</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">100</span>; ++j) <span class="keyword">if</span> (i ^ j) dp0[i][j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt;= STEP; ++step) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs ^ n; ++xs) <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys ^ m; ++ys) &#123;</span><br><span class="line"><span class="keyword">int</span> s = xs * m + ys;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> xt = <span class="number">0</span>; xt ^ n; ++xt) <span class="keyword">for</span> (<span class="keyword">int</span> yt = <span class="number">0</span>; yt ^ m; ++yt) &#123;</span><br><span class="line"><span class="keyword">int</span> t = xt * m + yt;</span><br><span class="line">dp1[s][t] = dp0[s][t];</span><br><span class="line"><span class="keyword">if</span> (xt) update(dp1[s][t], dp0[s][t - m]);</span><br><span class="line"><span class="keyword">if</span> (yt) update(dp1[s][t], dp0[s][t - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (xt ^ n - <span class="number">1</span>) update(dp1[s][t], dp0[s][t + m]);</span><br><span class="line"><span class="keyword">if</span> (yt ^ m - <span class="number">1</span>) update(dp1[s][t], dp0[s][t + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (~dp1[s][t]) dp1[s][t] += !(step % T[t]);</span><br><span class="line">&#125;</span><br><span class="line">dp[step][s] = dp1[s][tt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(dp0, dp1, <span class="keyword">sizeof</span> (dp0));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= STEP; ++i) <span class="keyword">if</span> (dp[i][ss] &gt;= C) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(mat[<span class="number">0</span>], dp0, mat_size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) mul(mat[i], mat[i - <span class="number">1</span>], mat[i - <span class="number">1</span>], size);</span><br><span class="line"><span class="keyword">int</span> up = <span class="number">63</span>;</span><br><span class="line"><span class="keyword">while</span> (mat[up][ss][tt] &gt;= C) --up;</span><br><span class="line"><span class="built_in">memcpy</span>(now, mat[up], mat_size);</span><br><span class="line">__int128 X = <span class="number">1L</span>L &lt;&lt; up;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = up - <span class="number">1</span>; ~k; --k) &#123;</span><br><span class="line">mul(tmp, now, mat[k], size);</span><br><span class="line"><span class="keyword">if</span> (tmp[ss][tt] &lt; C) &#123;</span><br><span class="line">X ^= <span class="number">1L</span>L &lt;&lt; k;</span><br><span class="line"><span class="built_in">memcpy</span>(now, tmp, mat_size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = STEP;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">mul(cal, now, dp[mid], size);</span><br><span class="line"><span class="keyword">if</span> (cal[ss] &lt; C) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line">cout128(STEP * X + r);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-拆拆拆数"><a href="#C-拆拆拆数" class="headerlink" title="C. 拆拆拆数"></a>C. 拆拆拆数</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>将$~A~$和$~B~$分别拆成尽量小的$~n~$组，然后组成$~n~$对，使得每对互质。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先猜想$~n\leq 2~$，下面通过奇偶性对于$~\gcd(A,~B)&gt;1~$的情况考虑构造。如果$~2\nmid A,~2\nmid B~$，则拆成$~(2,~A-2),~(B-2,~2)~$是显然满足题意的。剩下的情况不妨设$~2\mid A~$，则$~(3,~A-3),~(B-2,~2)~$和$~(3,~A-3),~(B-4,~4)~$中必有一组是全部互质的。此时只有$~B=5~$的时候会产生非法情况。此时拆成$~(5,~A-5),~(3,~2)~$即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A, B;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line"><span class="keyword">if</span> (__gcd(A, B) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A &lt;&lt; <span class="string">' '</span> &lt;&lt; B &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">if</span> (A &amp; B &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (A == <span class="number">5</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">5</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A % <span class="number">3</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">4</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (B == <span class="number">5</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">5</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (B % <span class="number">3</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">4</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-超难的数学题"><a href="#D-超难的数学题" class="headerlink" title="D. 超难的数学题"></a>D. 超难的数学题</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个十进制数是好的，当且仅当它的十进制表示下存在$~3~$个连续的数字满足中间的严格大于两边的。现要求求出最小的$~n~$满足$~1,~2,~\dots,~n~$中好数的比例不小于给定的比例$~p~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设$~f(n)~$为$~[1,~n]~$中好数的个数，则下面想办法构造一个序列$~a~$逼近正确答案。先令$~a_0=122~$为满足$~f=0~$的最大正整数,于是必有$~\frac{f(a_0)}{a_0}&lt; p~$。若$~\frac{f(a_i)}{a_i}&lt; p~$，那么考虑如何将$~a_i~$放大为$~a_{i+1}~$来逼近正确答案。为了不超过正确答案，假设$~(a_i,~a_{i+1}]~$内全是好数，那么必有$~\frac{f(a_i)+a_{i+1}-a_i-1}{a_{i+1}-1}&lt; p~$。同时为了更快的逼近正确答案，有$~\frac{f(a_i)+a_{i+1}-a_i}{a_{i+1}}\geq p~$，于是有</p><script type="math/tex; mode=display">a_{i+1}=\left\lceil\frac{a_i-f(a_i)}{1-p}\right\rceil</script><p>若$~\frac{f(a_i)}{a_i}\geq p~$，则代表此时已经求出答案$~a_i~$。由于$~a~$是严格单增的，在确保有界的情况下，一定存在$~a_i~$为正解。这个序列的逼近速度取决于$~f~$的分布密度和$~p~$的大小，但是过程是类似于牛顿迭代的思想，所以复杂度可以视为大常数$~C~$。<br>下面计算$~f~$，数位$~\text{DP}~$即可。记录$~dp[i][j][0/1]~$表示考虑到第$~i~$位还没有达成好数条件且当前是$~j~$左边有$~0/1~$个数字比$~j~$小的情况数量。这里要用到大整数高精度，在$~100~$位以内就能得出答案。总时间复杂度为$~O(100\cdot10^2\cdot C\cdot\text{BigInteger})~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> BigInteger[] pow10 = <span class="keyword">new</span> BigInteger[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">static</span> BigInteger[][][] dp = <span class="keyword">new</span> BigInteger[<span class="number">100</span>][<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> p = in.nextDouble();</span><br><span class="line">BigInteger hunredThousand = <span class="keyword">new</span> BigInteger(<span class="string">"100000"</span>);</span><br><span class="line"><span class="keyword">int</span> pp = (<span class="keyword">int</span>)(p * <span class="number">100000</span> + <span class="number">0.1</span>);</span><br><span class="line">BigInteger ppp = <span class="keyword">new</span> BigInteger(Integer.toString(pp));</span><br><span class="line">BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"122"</span>);</span><br><span class="line">initDP();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">BigInteger f = func(a);</span><br><span class="line"><span class="keyword">if</span> (f.multiply(hunredThousand).compareTo(a.multiply(ppp)) != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">a = a.subtract(f).multiply(hunredThousand).subtract(BigInteger.ONE).divide(hunredThousand.subtract(ppp)).add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pow10[<span class="number">0</span>] = BigInteger.ONE;</span><br><span class="line">pow10[<span class="number">1</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"10"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="number">100</span>; ++i) &#123;</span><br><span class="line">pow10[i] = pow10[i - <span class="number">1</span>].multiply(pow10[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> BigInteger <span class="title">func</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line">String str = n.toString();</span><br><span class="line"><span class="keyword">int</span> size = str.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != <span class="number">2</span>; ++k) &#123;</span><br><span class="line">dp[i][j][k] = BigInteger.ZERO;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BigInteger ret = BigInteger.ZERO;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last = (<span class="keyword">int</span>)(str.charAt(<span class="number">0</span>) - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != last; ++i) &#123;</span><br><span class="line">dp[<span class="number">0</span>][i][<span class="number">0</span>] = dp[<span class="number">0</span>][i][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> now = (<span class="keyword">int</span>)(str.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != now; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; last) &#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i][j][<span class="number">1</span>].add(BigInteger.ONE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = ret.add(pow10[size - i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (now &gt; last) &#123;</span><br><span class="line">++count;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">ret = ret.add(BigInteger.ONE);</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> != size) &#123;</span><br><span class="line">ret = ret.add(<span class="keyword">new</span> BigInteger(str.substring(i + <span class="number">1</span>, size)));</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != j; ++k) &#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i][j][<span class="number">1</span>].add(dp[i - <span class="number">1</span>][k][<span class="number">0</span>]);</span><br><span class="line">ret = ret.add(dp[i - <span class="number">1</span>][k][<span class="number">1</span>].multiply(pow10[size - i - <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k != <span class="number">10</span>; ++k) &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(dp[i - <span class="number">1</span>][k][<span class="number">0</span>]).add(dp[i - <span class="number">1</span>][k][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-流流流动"><a href="#E-流流流动" class="headerlink" title="E. 流流流动"></a>E. 流流流动</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>当$~i\not=1~$且是奇数时，与$~3i+1~$连一条边。偶数时与$~\frac{i}{2}~$连一条边。取点可以得到$~f[i]~$的收益，但是如果一条边的两个端点$~x~$和$~y~$都取了，则会失去$~d[\min(x,~y)]~$。问最大收益。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>根据角谷猜想，图一定是一个森林，于是树形$~01\text{DP}~$即可。时间复杂度为$~O(n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; adj[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v, <span class="keyword">const</span> <span class="keyword">int</span>&amp; w)</span> </span>&#123;adj[u].push_back(make_pair(v, w));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">biadd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v, <span class="keyword">const</span> <span class="keyword">int</span>&amp; w)</span> </span>&#123;add(u, v, w); add(v, u, w);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">101</span>], d[<span class="number">101</span>], dp[<span class="number">101</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line">dp[u][<span class="number">1</span>] = f[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!vis[v.first]) &#123;</span><br><span class="line">dfs(v.first);</span><br><span class="line">dp[u][<span class="number">0</span>] += max(dp[v.first][<span class="number">0</span>], dp[v.first][<span class="number">1</span>]);</span><br><span class="line">dp[u][<span class="number">1</span>] += max(dp[v.first][<span class="number">0</span>], dp[v.first][<span class="number">1</span>] - v.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; f[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp; <span class="number">1</span> &amp;&amp; i * <span class="number">3</span> + <span class="number">1</span> &lt;= n) biadd(i, i * <span class="number">3</span> + <span class="number">1</span>, d[i]);</span><br><span class="line"><span class="keyword">if</span> (!(i &amp; <span class="number">1</span>)) biadd(i, i &gt;&gt; <span class="number">1</span>, d[i &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">dfs(i);</span><br><span class="line">res += max(dp[i][<span class="number">0</span>], dp[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-爬爬爬山"><a href="#F-爬爬爬山" class="headerlink" title="F.爬爬爬山"></a>F.爬爬爬山</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问带点权边权的单源最短路。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>堆优化的带点权的$~\text{Dijkstra}~$单源最短路，时间复杂度为$~O(m\log m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, h;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; h;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; cost(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">k += h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="keyword">if</span> (h &gt; k) cost[i] = (h - k) * (h - k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; adj(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">adj[x].push_back(make_pair(y, z));</span><br><span class="line">adj[y].push_back(make_pair(x, z));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res(n + <span class="number">1</span>);</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;&gt; que;</span><br><span class="line">que.push(make_pair(cost[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[now.second]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.second] = <span class="literal">true</span>;</span><br><span class="line">res[now.second] = now.first;</span><br><span class="line"><span class="keyword">if</span> (now.second == n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : adj[now.second]) que.push(make_pair(now.first + next.second + cost[next.first], next.first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-双重矩阵"><a href="#G-双重矩阵" class="headerlink" title="G. 双重矩阵"></a>G. 双重矩阵</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times m~$的矩阵，以它位子矩阵单位构造一个$x\times y$个该矩阵的大矩阵，问大矩阵最大的子矩阵满足不互质。<br>数据范围$~1\leq n\leq100,~1\leq m\leq100,~1\leq x\leq1000000,~1\leq y\leq1000000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul sz = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">ul data;</span><br><span class="line">ul vtrees[<span class="number">201</span>][sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ul htree[sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ull n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">gcd</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a) &#123;</span><br><span class="line">a ^= b ^= a ^= b %= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ul tree[], ul pos, ul v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (tree[pos |= sz] = v, pos &gt;&gt;= <span class="number">1</span>; pos; pos &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">tree[pos] = gcd(tree[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tree[pos &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">get</span><span class="params">(<span class="keyword">const</span> ul tree[], ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ul ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (l = l - <span class="number">1</span> | sz, r = r + <span class="number">1</span> | sz; l ^ r ^ <span class="number">1</span>; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (~l &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = gcd(ret, tree[l ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = gcd(ret, tree[r ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">fn</span><span class="params">(ull t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t == n ? x * n : t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">fm</span><span class="params">(ull t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t == m ? y * m : t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">change(vtrees[j], i, data);</span><br><span class="line">change(vtrees[j], i + n, data);</span><br><span class="line">change(vtrees[j + m], i, data);</span><br><span class="line">change(vtrees[j + m], i + n, data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ull ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul up = <span class="number">1</span>; up &lt;= n; ++up) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul low = up; low &lt;= up + n - <span class="number">1</span>; ++low) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= m + m; ++i) &#123;</span><br><span class="line">change(htree, i, get(vtrees[i], up, low));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ul l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= m; ++l) &#123;</span><br><span class="line"><span class="keyword">while</span> (r &lt; l) &#123;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &lt; l + m - <span class="number">1</span> &amp;&amp; get(htree, l, r + <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (get(htree, l, r) != <span class="number">1</span>) &#123;</span><br><span class="line">ans = <span class="built_in">std</span>::max(ans, fn(low - up + <span class="number">1</span>) * fm(r - l + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-我爱割葱"><a href="#H-我爱割葱" class="headerlink" title="H. 我爱割葱"></a>H. 我爱割葱</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$棵葱，第$~i~$棵的高度为$~a_i~$。定义在高度$~h~$割区间$~[l,~r]~$是合法的，如果对于任意$~i\in[l,~r]~$，均满足$~h\leq a_i~$。割完一刀后将获得下面的部分，且上面的部分不会掉落。现在最多割$~k~$刀，问能获得葱的总长度的最大值。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul sz = <span class="number">128</span>;</span><br><span class="line">ul a[<span class="number">102</span>];</span><br><span class="line">ul least[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">ul n, k;</span><br><span class="line">ul tree[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;&gt; paras;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; <span class="built_in">stack</span>;</span><br><span class="line">ul segid[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">ul valid[<span class="number">1000001</span>];</span><br><span class="line">ul idval[<span class="number">101</span>];</span><br><span class="line">ul ans[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> already[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">segment</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ul l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">segment(ul a, ul b): l(a), r(b) &#123; &#125;</span><br><span class="line">segment()=<span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt; sons[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">segment bigson[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">segment bro[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt;&gt; segstack(<span class="number">1</span>);</span><br><span class="line">segment idseg[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getbroandbigson</span><span class="params">(ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!sons[l][r].size()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">bigson[l][r] = sons[l][r][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != sons[l][r].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line">bro[sons[l][r][i - <span class="number">1</span>].l][sons[l][r][i - <span class="number">1</span>].r] = sons[l][r][i];</span><br><span class="line">&#125;</span><br><span class="line">getbroandbigson(sons[l][r][i].l, sons[l][r][i].r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">search</span><span class="params">(ul l, ul r, ul c, ul k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!l || !r || !k) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (already[segid[l][r]][valid[c]][k]) &#123;</span><br><span class="line"><span class="keyword">return</span> ans[segid[l][r]][valid[c]][k];</span><br><span class="line">&#125;</span><br><span class="line">already[segid[l][r]][valid[c]][k] = <span class="literal">true</span>;</span><br><span class="line">ul temp1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul sonk = <span class="number">0</span>; sonk &lt;= k; ++sonk) &#123;</span><br><span class="line">temp1 = <span class="built_in">std</span>::max(temp1, search(bro[l][r].l, bro[l][r].r, c, k - sonk) + search(bigson[l][r].l, bigson[l][r].r, c, sonk));</span><br><span class="line">&#125;</span><br><span class="line">ul temp2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul sonk = <span class="number">0</span>; sonk &lt; k; ++sonk) &#123;</span><br><span class="line">temp2 = <span class="built_in">std</span>::max(temp2, search(bro[l][r].l, bro[l][r].r, c, k - <span class="number">1</span> - sonk) + search(bigson[l][r].l, bigson[l][r].r, least[l][r], sonk));</span><br><span class="line">&#125;</span><br><span class="line">temp2 += (r - l + <span class="number">1</span>) * (least[l][r] - c);</span><br><span class="line"><span class="keyword">return</span> ans[segid[l][r]][valid[c]][k] = <span class="built_in">std</span>::max(temp1, temp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ul tree[], ul pos, ul val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (tree[pos |= sz] = val, pos &gt;&gt;= <span class="number">1</span>; pos; pos &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">tree[pos] = <span class="built_in">std</span>::min(tree[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tree[pos &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">get</span><span class="params">(<span class="keyword">const</span> ul tree[], ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ul ret = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (l = l - <span class="number">1</span> | sz, r = r + <span class="number">1</span> | sz; l ^ r ^ <span class="number">1</span>; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (~l &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = <span class="built_in">std</span>::min(ret, tree[l ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = <span class="built_in">std</span>::min(ret, tree[r ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">   change(tree, i, a[i]); </span><br><span class="line">&#125;</span><br><span class="line">ul cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ul l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul r = l; r &lt;= n; ++r) &#123;</span><br><span class="line">least[l][r] = get(tree, l, r);</span><br><span class="line"><span class="keyword">if</span> (least[l][r] &gt; a[l - <span class="number">1</span>] &amp;&amp; least[l][r] &gt; a[r + <span class="number">1</span>]) &#123;</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(l, <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(r, <span class="literal">true</span>));</span><br><span class="line">segid[l][r] = cnt;</span><br><span class="line">valid[least[l][r]] = cnt;</span><br><span class="line">idseg[cnt] = segment(l, r);</span><br><span class="line">idval[cnt] = least[l][r];</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(paras.begin(), paras.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; para : paras) &#123;</span><br><span class="line"><span class="keyword">if</span> (para.second) &#123;</span><br><span class="line">ul l = <span class="built_in">stack</span>.back();</span><br><span class="line">ul r = para.first;</span><br><span class="line"><span class="built_in">stack</span>.pop_back();</span><br><span class="line">sons[l][r] = <span class="built_in">std</span>::move(segstack.back());</span><br><span class="line">segstack.pop_back();</span><br><span class="line">segstack.back().push_back(segment(l, r));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(para.first);</span><br><span class="line">segstack.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt;());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getbroandbigson(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; search(<span class="number">1</span>, n, <span class="number">0</span>, k) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-起起落落"><a href="#I-起起落落" class="headerlink" title="I. 起起落落"></a>I. 起起落落</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列$~p~$，定义一个奇数长度且至少为$~3~$的子序列$~p_{a_1},~p_{a_2},~\dots,~p_{a_m}~$是持续下降的，如果对于任意$~i~$为偶数，均满足$~p_{a_{i-1}}&gt;p_{a_{i+1}}&gt;p_{a_i}~$。计算出有多少个持续下降子序列。<br>数据范围$~1\leq n\leq100000~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WJR}~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn],t[maxn],e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pos</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> lower_bound(t+<span class="number">1</span>,t+<span class="number">1</span>+e,x) - t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> seg[maxn*<span class="number">5</span>],lazy[maxn*<span class="number">5</span>],g[maxn*<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(seg,<span class="number">0</span>,<span class="keyword">sizeof</span> seg);</span><br><span class="line"><span class="built_in">memset</span>(lazy,<span class="number">0</span>,<span class="keyword">sizeof</span> seg);</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">lazy[lson(v)] += lazy[v];</span><br><span class="line">lazy[rson(v)] += lazy[v];</span><br><span class="line">lazy[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; qr||r &lt; ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">lazy[v] = <span class="number">0</span>;</span><br><span class="line">g[v] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">change(l,mid,ql,qr,lson(v),val);</span><br><span class="line">change(mid+<span class="number">1</span>,r,ql,qr,rson(v),val);</span><br><span class="line">pushup(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">seg[v] = (seg[lson(v)] +  <span class="number">1l</span>l * g[lson(v)] * lazy[lson(v)] % mod) % mod;</span><br><span class="line">seg[v] += (seg[rson(v)] + <span class="number">1l</span>l * g[rson(v)] * lazy[rson(v)] % mod) % mod;</span><br><span class="line">seg[v] %= mod;</span><br><span class="line">g[v] = (g[lson(v)] + g[rson(v)]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr &lt; ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l&amp;&amp;r &lt;= qr) &#123;</span><br><span class="line">lazy[v] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l &gt; qr||r &lt; ql) <span class="keyword">return</span>;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) update(l,mid,ql,qr,lson(v),val);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) update(mid+<span class="number">1</span>,r,ql,qr,rson(v),val);</span><br><span class="line">pushup(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr &lt; ql) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l&amp;&amp;r &lt;= qr)&#123;</span><br><span class="line"><span class="keyword">return</span> (seg[v] + <span class="number">1l</span>l * g[v] * lazy[v] % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r &lt; ql||l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>,mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) res += sum(l,mid,ql,qr,lson(v));</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) res = (res + sum(mid+<span class="number">1</span>,r,ql,qr,rson(v))) % mod;</span><br><span class="line">pushup(v);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">memcpy</span>(t,a,<span class="keyword">sizeof</span> a);</span><br><span class="line">e = n;</span><br><span class="line">sort(t+<span class="number">1</span>,t+<span class="number">1</span>+e);</span><br><span class="line">e = unique(t+<span class="number">1</span>,t+<span class="number">1</span>+e) - (t+<span class="number">1</span>);</span><br><span class="line">f.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;i--) &#123;</span><br><span class="line"><span class="keyword">int</span> v = pos(a[i]);</span><br><span class="line"><span class="keyword">int</span> temp = f.sum(<span class="number">1</span>,e,<span class="number">1</span>,v<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">ans = (ans + temp) % mod;</span><br><span class="line">f.update(<span class="number">1</span>,e,v+<span class="number">1</span>,e,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">f.change(<span class="number">1</span>,e,v,v,<span class="number">1</span>,(temp + <span class="number">1</span>) % mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-夺宝奇兵"><a href="#J-夺宝奇兵" class="headerlink" title="J. 夺宝奇兵"></a>J. 夺宝奇兵</h2><p>有$~n~$个人，他们总共有$~m~$个宝物。现已知每个宝物在谁手上和它的售价，问最少花多少钱买可以使得自己的宝物数量严格大于任何人的宝物数量。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对所有人所持有的宝物排序，然后暴力枚举交易结束后其他人宝物数量的最大值。在这个过程中维护一棵权值线段树，这样每次枚举过程中树上二分即可得到相应的最小花费。我的代码是使用二分权值树状数组，复杂度多一层$~O(\log m)~$，但是常数比权值线段树递归写法小很多，也很方便。权值线段树或权值树状数组二分写法的时间复杂度为$~o((n+m)\log m)~$，下面代码的时间复杂度为$~O((n+m)\log^2m)~$。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[maxn], bit2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; have[maxn], flr[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn], bit1[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Input</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Input&gt; input(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input[i].a &gt;&gt; input[i].c;</span><br><span class="line">sort(input.begin(), input.end(), [](Input a, Input b) &#123;<span class="keyword">return</span> a.a &lt; b.a;&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">num[i] = input[i].a;</span><br><span class="line">have[input[i].c].push_back(i);</span><br><span class="line">flr[have[input[i].c].size()].push_back(input[i].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sort(have[i].begin(), have[i].end(), greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;());</span><br><span class="line"><span class="keyword">int</span> up;</span><br><span class="line"><span class="keyword">for</span> (up = <span class="number">1</span>; flr[up].size(); ++up)</span><br><span class="line">cnt[up] = cnt[up - <span class="number">1</span>] + flr[up].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxn; j += lowbit(j))</span><br><span class="line">++bit1[j], bit2[j] += num[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = up; cnt[up - <span class="number">1</span>] - cnt[i - <span class="number">1</span>] &lt;= i &amp;&amp; i; --i) &#123;</span><br><span class="line"><span class="keyword">int</span> rem = i - cnt[up - <span class="number">1</span>] + cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : flr[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = have[j][i - <span class="number">1</span>];</span><br><span class="line">tot += num[idx];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = idx; k &lt; maxn; k += lowbit(k))</span><br><span class="line">--bit1[k], bit2[k] -= num[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> now = tot;</span><br><span class="line"><span class="keyword">if</span> (rem) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = maxn;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = mid; k; k -= lowbit(k)) sum += bit1[k];</span><br><span class="line"><span class="keyword">if</span> (sum &lt; rem) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = r; k; k -= lowbit(k)) now += bit2[k];</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-星球大战"><a href="#K-星球大战" class="headerlink" title="K. 星球大战"></a>K. 星球大战</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点$~m~$条边的简单连通图，定义两点间的距离为连接连点的简单路径的最小值。现给定邪恶势力的起点位置，需要找到一个正义势力的起点位置，使得势力扩散后最终邪恶势力的数量最少。对于每个点，如果它离邪恶势力的距离严格小于离正义势力的距离，则最终会变为邪恶势力，否则变为正义势力或者保持中立。输出邪恶势力最终数量的最小值。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> vul = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt;;</span><br><span class="line"></span><br><span class="line">vul edges[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul father[ul(<span class="number">1e5</span> + <span class="number">1</span>)][<span class="number">18</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; sons[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul n, m;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;ul&gt; <span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">bool</span> already[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; special;</span><br><span class="line">ul disspecial[<span class="number">202</span>][ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul dis1[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul left[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul right[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;&gt; paras;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">calcfather</span><span class="params">(ul x, ul lg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (~father[x][lg]) &#123;</span><br><span class="line"><span class="keyword">return</span> father[x][lg];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> father[x][lg] = calcfather(calcfather(x, lg - <span class="number">1</span>), lg - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">getfather</span><span class="params">(ul x, ul step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ul lg = <span class="number">0</span>; step; step &gt;&gt;= <span class="number">1</span>, ++lg) &#123;</span><br><span class="line"><span class="keyword">if</span> (step &amp; <span class="number">1</span>) &#123;</span><br><span class="line">x = calcfather(x, lg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">search</span><span class="params">(ul x, ul cnt)</span> </span>&#123;</span><br><span class="line">left[x] = cnt;</span><br><span class="line"><span class="keyword">for</span> (ul son : sons[x]) &#123;</span><br><span class="line">cnt = search(son, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">right[x] = cnt;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">0</span>; j != <span class="number">18</span>; ++j) &#123;</span><br><span class="line">father[i][j] = ~ul(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line">ul u, v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;u, &amp;v);</span><br><span class="line">edges[u].push_back(v);</span><br><span class="line">edges[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>.push(<span class="number">1</span>);</span><br><span class="line">already[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">father[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">queue</span>.size()) &#123;</span><br><span class="line">ul curr = <span class="built_in">queue</span>.front();</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br><span class="line"><span class="keyword">for</span> (ul nex : edges[curr]) &#123;</span><br><span class="line"><span class="keyword">if</span> (father[curr][<span class="number">0</span>] == nex) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (already[nex]) &#123;</span><br><span class="line">special.push_back(curr);</span><br><span class="line">special.push_back(nex);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">father[nex][<span class="number">0</span>] = curr;</span><br><span class="line">sons[curr].push_back(nex);</span><br><span class="line"><span class="built_in">queue</span>.push(nex);</span><br><span class="line">already[nex] = <span class="literal">true</span>;</span><br><span class="line">dis1[nex] = dis1[curr] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(special.begin(), special.end());</span><br><span class="line">special.resize(<span class="built_in">std</span>::unique(special.begin(), special.end()) - special.begin());</span><br><span class="line">search(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != special.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">disspecial[i][j] = ~ul(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>.push(special[i]);</span><br><span class="line">disspecial[i][special[i]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">queue</span>.size()) &#123;</span><br><span class="line">ul curr = <span class="built_in">queue</span>.front();</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br><span class="line"><span class="keyword">for</span> (ul nex : edges[curr]) &#123;</span><br><span class="line"><span class="keyword">if</span> (~disspecial[i][nex]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">disspecial[i][nex] = disspecial[i][curr] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>.push(nex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ul ans = n;</span><br><span class="line"><span class="keyword">for</span> (ul white = <span class="number">2</span>; white &lt;= n; ++white) &#123;</span><br><span class="line">paras.resize(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != special.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis1[special[i]] &lt; disspecial[i][white]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ul temp = getfather(special[i], dis1[special[i]] - disspecial[i][white] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(left[temp], <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(right[temp], <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line">ul temp = getfather(white, dis1[white] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(left[temp], <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(right[temp], <span class="literal">true</span>));</span><br><span class="line"><span class="built_in">std</span>::sort(paras.begin(), paras.end());</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line">ul st = <span class="number">0</span>;</span><br><span class="line">ul prev = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; para : paras) &#123;</span><br><span class="line"><span class="keyword">if</span> (!st) &#123;</span><br><span class="line">prev = para.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (para.second) &#123;</span><br><span class="line">--st;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st) &#123;</span><br><span class="line">temp += para.first - prev + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">std</span>::min(ans, n - temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RMQ与LCA与ST表 (TBC)</title>
      <link href="/2019/02/15/RMQ%E4%B8%8ELCA%E4%B8%8EST%E8%A1%A8%20(TBC)/"/>
      <url>/2019/02/15/RMQ%E4%B8%8ELCA%E4%B8%8EST%E8%A1%A8%20(TBC)/</url>
      
        <content type="html"><![CDATA[<h2 id="RMQ"><a href="#RMQ" class="headerlink" title="RMQ"></a>RMQ</h2><p>区间最值查询$~\text{Range Minimun/Maximun Query}~$，简称$~\text{RMQ}~$。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a><strong>线段树</strong></h3><p>线段树是解决$~\text{RMQ}~$问题最普通的办法，时间复杂度为预处理$~O(n)~$，单次询问$~O(\log n)~$。支持在线。同时也支持$~O(\log n)~$的区间修改的动态$~\text{RMQ}~$问题。下面模板的区间均为左开右闭，角标从$~0~$开始。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index] = min(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index] = a[begin];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line"><span class="keyword">if</span> (index &lt; maxn)) &#123;</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">&#125;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">seg[index] = min(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">return</span> min(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a><strong>ST表</strong></h3><p>如果只有静态查询，那么考虑这样一个数组：记$~st[i][j]~$为$~[i,~i+2^j)~$的最值。那么需要$~O(n\log n)~$的空间。显然$~st[i][0]=a[i]~$。且对于其它项，可以将区间$~[i,~i+2^j)~$二分为$~[i,~i+2^{j-1})~$和$~[i+2^{j-1},~i+2^j)~$，也就是通过$~st[i][j-1]~$和$~st[i+2^{j-1}][j-1]~$来$~O(1)~$地转移。那么对于任意的询问区间$~[l,~r)~$，记$~k=\lfloor\log(r-l)\rfloor~$，均可划分为$~[l,~l+2^k)~$和$~[r-2^k,~r)~$这两个子问题来解决。时间复杂度为预处理$~O(n\log n)~$，单次询问$~O(1)~$。支持在线。下面模板的角标从$~0~$开始。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="keyword">int</span> a[maxn], st[maxn][pow2 + <span class="number">1</span>], log2_floor[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">st_init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">log2_floor[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) log2_floor[i] = log2_floor[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) st[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2_floor[n]; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + (<span class="number">1</span> &lt;&lt; i) ^ n; ++j)</span><br><span class="line">st[j][i] = min(st[j][i - <span class="number">1</span>], st[j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; l, <span class="keyword">const</span> <span class="keyword">int</span>&amp; r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = log2_floor[r - l];</span><br><span class="line"><span class="keyword">return</span> min(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>最近公共祖先$~\text{Lowest Common Ancestors}~$，简称$~\text{LCA}~$。</p><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a><strong>倍增</strong></h3><p>类似于$~\text{ST}~$表的$~\text{DP}~$思想，记$~pa[i][j]~$为节点$~i~$的第$~2^j~$级祖先。为防止溢出，根节点的父亲依然是根节点。现在$~\text{DFS}~$过程中处理出$~pa[i][0]~$，对于其它项，有$~O(1)~$的转移式</p><script type="math/tex; mode=display">pa[i][j]=pa[pa[i][j-1]][j-1]</script><p>这里的时间复杂度和空间复杂度均为$~O(\log n)~$。那么可以用类似快速幂的方式，可以在$~O(\log n)~$的时间内查询任意点的任意级祖先。查询$~\text{LCA}~$时，先将较深的点上升到与另一点等高，然后在保持两点不一样的条件下，将两个点上升至$~\text{LCA}~$的两个儿子处。时间复杂度为预处理$~O(n\log n)~$，单次查询$~O(\log n)~$。支持在线。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> pa[maxn][pow2], dep[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">1</span>, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">dep[u] = d;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ pow2; ++i) pa[u][i] = pa[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) dfs(v, u, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &gt; dep[u]) swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = dep[v] - dep[u], i = <span class="number">0</span>; k; k &gt;&gt;= <span class="number">1</span>, ++i) <span class="keyword">if</span> (k &amp; <span class="number">1</span>) u = pa[u][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pow2 - <span class="number">1</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] ^ pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表-1"><a href="#ST表-1" class="headerlink" title="ST表"></a><strong>ST表</strong></h3><p>首先引入一个叫<strong>欧拉序</strong>的概念，在$~\text{DFS}~$序的基础上，将回溯过程中经过的点也加入到序列之中，则构成了欧拉序。容易证明，序列的长度为$~2n-1~$，且一个节点是叶节点当且仅当它只在欧拉序中出现一次。那么对于非叶节点$~u~$，它在欧拉序中出现至少$~2~$次，那么节点$~v~$是$~u~$的后代，当且仅当$~v~$在欧拉序中，被$~2~$个$~u~$包含。于是对于欧拉序上两个点的$~\text{LCA}~$问题，可以等价于这两个节点构成的闭区间的$~\text{LCA}~$问题，且$~\text{LCA}~$必出现在这个闭区间之中。和$~\text{RMQ}~$问题一样，这类问题是保偏序的。所以可以用$~\text{ST}~$表来支持$~O(n\log n)~$的预处理和$~O(1)~$的单次在线查询。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn &lt;&lt; <span class="number">1</span>][pow2 + <span class="number">1</span>], dep[maxn], euler[maxn], log2_floor[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> euler_clock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">st[++euler_clock][<span class="number">0</span>] = u;</span><br><span class="line">euler[u] = euler_clock;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) &#123;</span><br><span class="line">dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">dfs(v, u);</span><br><span class="line">st[++euler_clock][<span class="number">0</span>] = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> dep[x] &lt; dep[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">upper</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> cmp(x, y) ? x : y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log2_floor[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= euler_clock; ++i) log2_floor[i] = log2_floor[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2_floor[euler_clock]; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) ^ euler_clock + <span class="number">1</span>; ++j)</span><br><span class="line">st[j][i] = upper(st[j][i - <span class="number">1</span>], st[j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">u = euler[u];</span><br><span class="line">v = euler[v];</span><br><span class="line"><span class="keyword">if</span> (u &gt; v) swap(u, v);</span><br><span class="line"><span class="keyword">int</span> temp = log2_floor[++v - u];</span><br><span class="line"><span class="keyword">return</span> upper(st[u][temp], st[v - (<span class="number">1</span> &lt;&lt; temp)][temp]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> RMQ </tag>
            
            <tag> LCA </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Global Round 1 (TBC)</title>
      <link href="/2019/02/15/Codeforces%20Global%20Round%201%20(TBC)/"/>
      <url>/2019/02/15/Codeforces%20Global%20Round%201%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1110" target="_blank" rel="noopener">Codeforces Global Round 1</a></p><h2 id="A-Parity"><a href="#A-Parity" class="headerlink" title="A. Parity"></a>A. Parity</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问一个$~k~$位$~b~$进制数的奇偶性。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, k, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; k;</span><br><span class="line">b &amp;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (--k) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">res ^= a &amp; <span class="number">1</span> &amp; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">res ^= a &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (res) <span class="built_in">cout</span> &lt;&lt; <span class="string">"odd"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"even"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Tape"><a href="#B-Tape" class="headerlink" title="B. Tape"></a>B. Tape</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要求使用$~k~$个区间覆盖$~n~$个点，输出区间长度总和的最小值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。贪心。差分序列排序即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(n), d(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : b) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) d[i] = b[i] - b[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">sort(d.begin(), d.end());</span><br><span class="line"><span class="keyword">int</span> res = b.back() - b.front() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i ^ n; ++i) res -= d[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Meaningless-Operations"><a href="#C-Meaningless-Operations" class="headerlink" title="C. Meaningless Operations"></a>C. Meaningless Operations</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义$~f(a)=\max{\gcd(a\oplus b,~a\odot b)\mid0&lt; b&lt; a}~$其中$~\oplus~$和$~\odot~$分别是位运算中的异或$~\text{xor}~$和与$~\text{and}~$。一共$~q~$次询问，输出对应的$~f(a)~$。<br>数据范围$~1\leq q\leq10^3,~2\leq a\leq2^{25}-1~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>可以发现将$~a~$二进制表示后，如果不全为$~1~$，则$~f(a)~$即为全为$~1~$的数值（取$~b~$为$~a~$的补位）。否则$~f(a)~$为$~a~$的最大非$~a~$因子。具体证明过程可自行考虑。那么只需要预处理所有$~2^n-1~$即可。用$~\text{map}~$储存预处理数值并用$~\text{__builtin}~$优化位运算，总时间复杂度为$~O(\sqrt{a}+q\log a)~$。当然也可以打表后用数组储存答案，时间复杂度可以优化至$~O(q)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">25</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>, k = <span class="built_in">sqrt</span>(x + <span class="number">0.1</span>); j &lt;= k; ++j) <span class="keyword">if</span> (!(x % j)) &#123;</span><br><span class="line">res[x] = x / j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.find(x) == res.end()) res[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="number">1</span> &lt;&lt; <span class="number">32</span> - __builtin_clz(a)) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x ^ a) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; res[x] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>麻将模拟，问最多能凑出多少副顺子或者刻子。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。每个数字如果作为顺子计算，那么只有$~3~$种位置供选择。而若某一位置上这个数字作为顺子出现的次数大于$~2~$，那么对于$~3k~$个一样的顺子，可以化为$~3k~$个刻子。那么对于每一个数字，它前$~2~$个数字的状态总数则是$~3\times3=9~$种，每次转移要计算$~3~$次，这样总时间复杂度为$~O(3^3m)~$。可以用滚动数组优化空间。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(m, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++cnt[--a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) &#123;</span><br><span class="line"><span class="built_in">memset</span>(dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>], <span class="number">0</span>, <span class="number">9</span> * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">3</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">3</span>; ++k) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l ^ <span class="number">3</span>; ++l) </span><br><span class="line"><span class="keyword">if</span> (j + k + l &lt;= cnt[i])</span><br><span class="line">dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][k][l] = max(dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][k][l], dp[i &amp; <span class="number">1</span>][j][k] + l + (cnt[i] - j - k - l) / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[m &amp; <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于一个长度为$~n~$的序列，可以对非端点元素如下操作：将$~c_i~$变为$~c_{i+1}+c_{i-1}-c_i~$。现给定两个序列$~c~$和$~t~$，问$~c~$能否经过若干次操作变成$~t~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑差分序列，不难发现每次操作则是交换差分序列相邻的两个元素。只需要将差分序列排序比较即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : b) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) a[i] -= a[i - <span class="number">1</span>], b[i] -= b[i - <span class="number">1</span>];</span><br><span class="line">sort(a.begin() + <span class="number">1</span>, a.end());</span><br><span class="line">sort(b.begin() + <span class="number">1</span>, b.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a == b ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>编号按照$~\text{DFS}~$序给出一棵边权树，两点之间的距离定义为简单路径的权值和。每次询问编号$~[l,~r]~$内与$~v~$最近的叶子的距离。<br>数据范围$~3\leq n\leq500000,~1\leq q\leq500000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将问题离线，对于$~v=1~$的询问，叶节点的距离保留，其余距离设为$~\inf~$，这样可以用一棵最值线段树来询问最短距离。由$~\text{DFS}~$序的性质，每个节点的子树的编号均为序列上的一个闭区间，那么在$~\text{DFS}~$的过程中，区间修改，就能对所有的节点进行询问。总时间复杂度为$~O((n+q)\log n)~$。注意需要快读。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; son[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; ask[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[maxn], res[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> check[maxn];</span><br><span class="line"><span class="keyword">int</span> n, now, index[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">now = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : son[u]) &#123;</span><br><span class="line">dis[e.first] = dis[u] + e.second;</span><br><span class="line">dfs1(e.first);</span><br><span class="line">&#125;</span><br><span class="line">index[u] = now;</span><br><span class="line">check[u] = son[u].empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index] =  min(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index] = check[end] ? dis[end] : <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">return</span> min(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">seg[index] = min(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> q : ask[u]) res[q.second] = query(<span class="number">0</span>, n, <span class="number">1</span>, q.first.first - <span class="number">1</span>, q.first.second);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : son[u]) &#123;</span><br><span class="line">tag[<span class="number">1</span>] += e.second;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, e.first - <span class="number">1</span>, index[e.first], -(e.second &lt;&lt; <span class="number">1</span>));</span><br><span class="line">dfs2(e.first);</span><br><span class="line">tag[<span class="number">1</span>] -= e.second;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, e.first - <span class="number">1</span>, index[e.first], e.second &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; w;</span><br><span class="line">son[p].push_back(make_pair(i, w));</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>);</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[v].push_back(make_pair(make_pair(l, r), i));</span><br><span class="line">&#125;</span><br><span class="line">dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 59 (Rated for Div. 2) (TBC)</title>
      <link href="/2019/02/14/Educational%20Codeforces%20Round%2059%20(Rated%20for%20Div.%202)%20(TBC)/"/>
      <url>/2019/02/14/Educational%20Codeforces%20Round%2059%20(Rated%20for%20Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1107" target="_blank" rel="noopener">Educational Codeforces Round 59 (Rated for Div. 2)</a></p><h2 id="A-Digits-Sequence-Dividing"><a href="#A-Digits-Sequence-Dividing" class="headerlink" title="A. Digits Sequence Dividing"></a>A. Digits Sequence Dividing</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.size() == <span class="number">2</span> &amp;&amp; str.front() &gt;= str.back())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; str.front() &lt;&lt; <span class="string">' '</span> &lt;&lt; str.substr(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Digital-root"><a href="#B-Digital-root" class="headerlink" title="B. Digital root"></a>B. Digital root</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于任意正整数$~x~$，将其十进制表示下的所有位的数字相加得到新的数字$~\bar{x}~$，不断操作下去，最终会得到一个个位数，记为$~S(x)~$。问第$~k~$大的满足$~S=x~$的数是多少。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。不难发现每次操作均满足$~x=\bar{x}\mod9~$。于是答案即为$~9(k-1)+x~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (k - <span class="number">1</span>) * <span class="number">9</span> + x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Brutality"><a href="#C-Brutality" class="headerlink" title="C. Brutality"></a>C. Brutality</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串和同样长度的数值序列，字符串中每段连续的同字母字串所对应的数值序列中，最多取$~k~$个数，问最大的取值之和。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。直接模拟，用$~\text{mulitset}~$或者$~\text{priority_queue}~$维护均可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'#'</span>);</span><br><span class="line">a.push_back(<span class="number">0</span>);</span><br><span class="line">++n;</span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; heap;</span><br><span class="line">heap.push(a.front());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[i - <span class="number">1</span>]) &#123;</span><br><span class="line">cnt = k;</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) &#123;</span><br><span class="line">res += heap.top();</span><br><span class="line"><span class="keyword">if</span> (!--cnt) <span class="keyword">break</span>;</span><br><span class="line">heap.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) heap.pop();</span><br><span class="line">&#125;</span><br><span class="line">heap.push(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Compression"><a href="#D-Compression" class="headerlink" title="D. Compression"></a>D. Compression</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times n~$的$~01~$矩阵，问$~n~$的最大因子$~x~$，满足把大矩阵划分为$~\frac{n}{x}\times\frac{n}{x}~$个$~x\times x~$的小矩阵之后，所有的小矩阵均只有一个值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><del>水题？</del>直接对每行每列取$~\gcd~$即可。没看标解也看不懂标解。<del>所以这场比赛有$~4~$个签到题？</del></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5200</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; row[maxn], column[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">bitset</span>&lt;maxn&gt;&amp; bit, <span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> last = !bit[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (last ^ bit[i]) &#123;</span><br><span class="line">ret = __gcd(ret, cnt);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">++cnt;</span><br><span class="line">last = bit[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __gcd(ret, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n &gt;&gt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">isdigit</span>(str[j]) ? str[j] - <span class="string">'0'</span> : str[j] - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">4</span>; ++k) <span class="keyword">if</span> (x &amp; <span class="number">1</span> &lt;&lt; <span class="number">3</span> - k) row[i].flip(j &lt;&lt; <span class="number">2</span> ^ k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n; ++j) <span class="keyword">if</span> (row[i][j]) column[j].flip(i);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) res = __gcd(res, __gcd(calc(row[i], n), calc(column[i], n)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Vasya-and-Maximum-Profit"><a href="#G-Vasya-and-Maximum-Profit" class="headerlink" title="G. Vasya and Maximum Profit"></a>G. Vasya and Maximum Profit</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两序列$~d_1,~d_2,~\dots,~d_n~$和$~c_1,~c_2,~\dots,~c_n~$，其中$~d~$严格单增。并定义</p><script type="math/tex; mode=display">gap(l,~r)=\begin{cases}\max_{l\leq i< r}(d_{i+1}-d_i)^2    &\text{$l< r$}  \\0                                   &\text{$l=r$}\end{cases}</script><p>对于区间$~[l,~r]~$的价值，计算公式为</p><script type="math/tex; mode=display">(r-l+1)a-\sum_{i=l}^{r}c_i-gap(l,~r)</script><p>问最大价值。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先预处理$~(d_{i+1}-d_i)^2~$数组。考虑每个区间所对应的$~gap~$在该数组中的位置。用<strong>单调栈</strong>可以线性预处理出$~(d_{i+1}-d_i)^2~$在该数组中，左右边第一个比它大的位置。那么对于取到$~gap(l,~r)=(d_{i+1}-d_i)^2~$的区间$~[l,~r]~$。可以$~O(1)~$地确认区间的左右边界。暴力枚举每个$~(d_{i+1}-d_i)^2~$，接下来就是一个<strong>线段树维护区间求和的最大值</strong>问题了，在普通区间求和线段树的基础上，每个节点还需要维护包含左端点的最大区间和和包含右端点的最大区间和。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[maxn], c[maxn], del[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, left, right;</span><br><span class="line">&#125; tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line"><span class="keyword">if</span> ((tree[index].sum = c[begin]) &gt; <span class="number">0</span>) tree[index].left = tree[index].right = c[begin];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid + <span class="number">1</span>, end, rson);</span><br><span class="line">tree[index].sum = tree[lson].sum + tree[rson].sum;</span><br><span class="line">tree[index].left = max(tree[lson].left, tree[lson].sum + tree[rson].left);</span><br><span class="line">tree[index].right = max(tree[rson].right, tree[rson].sum + tree[lson].right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_sum</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].sum;</span><br><span class="line"><span class="keyword">return</span> query_sum(left, right, begin, mid, lson) + query_sum(left, right, mid + <span class="number">1</span>, end, rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_left</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0xc0c0c0c0c0c0c0c0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].left;</span><br><span class="line"><span class="keyword">return</span> max(query_left(left, right, begin, mid, lson), query_sum(left, right, begin, mid, lson) + query_left(left, right, mid + <span class="number">1</span>, end, rson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_right</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0xc0c0c0c0c0c0c0c0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].right;</span><br><span class="line"><span class="keyword">return</span> max(query_right(left, right, mid + <span class="number">1</span>, end, rson), query_sum(left, right, mid + <span class="number">1</span>, end, rson) + query_right(left, right, begin, mid, lson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; d[i] &gt;&gt; c[i], c[i] = a - c[i];</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) del[i] = (d[i + <span class="number">1</span>] - d[i]) * (d[i + <span class="number">1</span>] - d[i]);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty() &amp;&amp; del[tmp.top()] &lt; del[i]) &#123;</span><br><span class="line">seg[tmp.top()].second = i;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line">tmp.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty()) &#123;</span><br><span class="line">seg[tmp.top()].second = n;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty() &amp;&amp; del[tmp.top()] &lt; del[i]) &#123;</span><br><span class="line">seg[tmp.top()].first = i + <span class="number">1</span>;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line">tmp.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty()) &#123;</span><br><span class="line">seg[tmp.top()].first = <span class="number">1</span>;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = max(res, c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i)</span><br><span class="line">res = max(res, query_right(seg[i].first, i, <span class="number">1</span>, n, <span class="number">1</span>) + query_left(i + <span class="number">1</span>, seg[i].second, <span class="number">1</span>, n, <span class="number">1</span>) - del[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JOISC 2014 Day3 电压</title>
      <link href="/2019/02/14/JOISC%202014%20Day3%20%E7%94%B5%E5%8E%8B/"/>
      <url>/2019/02/14/JOISC%202014%20Day3%20%E7%94%B5%E5%8E%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2881" target="_blank" rel="noopener">LOJ2881</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~N~$个点$~M~$条边的无自环但可能有重边不连通的图，问有多少条边满足：存在一种点的二染色，使得其余其它$~M-1~$条边的端点均被二染色，但该边为单染色。<br>数据范围$~2\leq N\leq10^5,~1\leq M\leq2\times10^5~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>一条边满足题意当且仅当图中的所有奇环均包含该边且所有偶环均不包含该边。考虑$~\text{DFS}~$生成树，记<strong>链</strong>为以树上某点和它某祖先的简单路劲。那么途中的所有环均由这棵$~\text{DFS}~$树上的一条链和不在树上的一条边组成。这样树上满足题意的边为奇环链的交减去偶环链的并，树外若也有边满足题意当且仅当改图只有一个奇环链。链交和链并可以用两个树上差分解决。在$~\text{DFS}~$过程中点$~u~$的相邻点$~v~$已经遍历过，且不是通过$~u~$的父亲遍历到$~u~$的那条边，那么$~v~$必为$~u~$的祖先或后代。若为祖先，则确定了一个环，通过$~u~$和$~v~$的深度可以确定环的奇偶性。如果是奇环，则在点$~u~$的链交差分数组上加$~1~$，在点$~v~$的链并差分数组上减$~1~$。那么最后在自下往上的遍历过程中展开差分，对于权值等于奇环链数量的点，它连向它父亲的边必在链交之中。同理对链并的差分数组同样操作，判断时对于正权值的点，它连向它父亲的边必在链并之中。这样最后的总复杂度为$~O(N+M)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], check[maxn], use[maxn], flag;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], even[maxn], odd[maxn], cnt, tot, cal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v == p &amp;&amp; !check[u]) &#123;</span><br><span class="line">check[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((dep[u] ^ dep[v]) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">++even[u];</span><br><span class="line">--even[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>));</span><br><span class="line">++cnt;</span><br><span class="line">++odd[u];</span><br><span class="line">--odd[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++tot;</span><br><span class="line">dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">dfs1(v, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">use[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!use[v]) &#123;</span><br><span class="line">dfs2(v);</span><br><span class="line">even[u] += even[v];</span><br><span class="line">odd[u] += odd[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (even[u]) --tot;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (odd[u] == cnt) ++cal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">cnt = cal = <span class="number">0</span>;</span><br><span class="line">dfs1(i, <span class="number">0</span>);</span><br><span class="line">dfs2(i);</span><br><span class="line"><span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">res = cal;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">1</span>) ++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) res = tot;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> DFS树 </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 536 (Div. 2)</title>
      <link href="/2019/02/14/Codeforces%20Round%20536%20(Div.%202)/"/>
      <url>/2019/02/14/Codeforces%20Round%20536%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1106" target="_blank" rel="noopener">Codeforces Round #536 (Div. 2)</a></p><h2 id="A-Lunar-New-Year-and-Cross-Counting"><a href="#A-Lunar-New-Year-and-Cross-Counting" class="headerlink" title="A. Lunar New Year and Cross Counting"></a>A. Lunar New Year and Cross Counting</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">1</span> &lt;&lt; <span class="number">9</span>][<span class="number">1</span> &lt;&lt; <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mat, <span class="string">'.'</span>, <span class="keyword">sizeof</span> (mat));</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">if</span> (mat[i][j] == <span class="string">'X'</span> &amp;&amp; mat[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i - <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'X'</span>) ++res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Lunar-New-Year-and-Food-Ordering"><a href="#B-Lunar-New-Year-and-Food-Ordering" class="headerlink" title="B. Lunar New Year and Food Ordering"></a>B. Lunar New Year and Food Ordering</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>餐厅有$~n~$种菜，库存为$~a_1,~a_2,~\dots,~a_n~$，价格为$~c_1,~c_2,~\dots,~c_n~$。依次来$~m~$个客人，第$~i~$个人会点$~d_i~$个$~t_i~$菜。一份份上菜，如果库存没有了$~t_i~$菜，则选择库存里最便宜的菜继续一份份上，即使最终无法上满$~d_i~$份也要继续上，上不满则客人不付钱。输出每个客人要付多少钱。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对价格排序以后双指针模拟即可。时间复杂度$~O(n\log n+m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; c(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), p(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : c) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line">sort(p.begin(), p.end(), [&amp;c] (<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;<span class="keyword">return</span> c[x] &lt; c[y];&#125;);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[--t] &lt; d) &#123;</span><br><span class="line">res += c[t] * a[t];</span><br><span class="line">d -= a[t];</span><br><span class="line">a[t] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index ^ n &amp;&amp; a[p[index]] &lt; d) &#123;</span><br><span class="line">res += c[p[index]] * a[p[index]];</span><br><span class="line">d -= a[p[index]];</span><br><span class="line">a[p[index++]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index ^ n) &#123;</span><br><span class="line">res += c[p[index]] * d;</span><br><span class="line">a[p[index]] -= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">a[t] -= d;</span><br><span class="line">res = c[t] * d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Lunar-New-Year-and-Number-Division"><a href="#C-Lunar-New-Year-and-Number-Division" class="headerlink" title="C. Lunar New Year and Number Division"></a>C. Lunar New Year and Number Division</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定偶数个数字，要求划分为若干组，每组至少$~2~$个。记$~s~$为一组的总和，输出最小的$~\sum s^2~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。每组$~2~$个共$~\frac{n}{2}~$组。其中最大值和最小值一组，次大值和次小值一组，以此类推。正确性可用$~\text{Jensen}~$不等书证明。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i) res += (a[i] + a[n - <span class="number">1</span> - i]) * (a[i] + a[n - <span class="number">1</span> - i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Lunar-New-Year-and-a-Wander"><a href="#D-Lunar-New-Year-and-a-Wander" class="headerlink" title="D. Lunar New Year and a Wander"></a>D. Lunar New Year and a Wander</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点简单连通通图。从$~1~$开始遍历所有的点，根据每个点第一次经过的顺序，可以得到一个$~1,~2,~\dots,~n~$的全排列。输出字典序最小的全排列。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>类似$~\text{Dijstra}~$或$~\text{Prim}~$的思想，每次取与当前联通快相邻的编号最小的点即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.insert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> now = *que.begin();</span><br><span class="line">vis[now] = <span class="literal">true</span>;</span><br><span class="line">res.push_back(now);</span><br><span class="line">que.erase(now);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : adj[now]) <span class="keyword">if</span> (!vis[next]) que.insert(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ res.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Lunar-New-Year-and-Red-Envelopes"><a href="#E-Lunar-New-Year-and-Red-Envelopes" class="headerlink" title="E. Lunar New Year and Red Envelopes"></a>E. Lunar New Year and Red Envelopes</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>再$~[1,~n]~$时间段内有$~k~$个红包，每个红包的出现时间段为$~[s,~t]~$，大小为$~w~$。且如果抢了它，则在$~[s,~d]~$以内无法再抢红包，其中$~s\leq t\leq d~$。现在$~\text{Bob}~$抢红包的策略是如果当前时刻可以抢则会去抢$~w~$最大的那个，如果有多个则去抢$~d~$最大的那个<del>（这个操作没看懂）</del>。然后$~\text{Alice}~$可以令$~\text{Bob}~$在最多$~m~$个时刻无法抢红包，问$~\text{Bob}~$的最小收益。<br>数据范围$~1\leq n\leq10^5,~1\leq k\leq10^5,~1\leq m\leq200~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先处理$~\text{Bob}~$在每个时刻如果能抢红包，他抢的红包所对应的$~w~$和$~d~$是多少。这一步扫描线可以完成，用$~\text{multiset}~$维护当前时刻所有的红包，然后每个红包在$~s~$秒加入$~t+1~$秒移除。接下来就是个动态规划问题，记$~dp[i][j]~$表示$~\text{Alice}~$已经打断了$~i~$次在$~j~$时刻的最小收益，具体转移见代码。其中$~[i]~$维度可以滚动优化，总时间复杂度为$~O((n+k)\log k+mn)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt;&gt; sweep[maxn];</span><br><span class="line">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; red[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp0[maxn], dp1[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t, d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; d &gt;&gt; w;</span><br><span class="line">sweep[s].push_back(make_pair(make_pair(w, d), <span class="literal">true</span>));</span><br><span class="line">sweep[t + <span class="number">1</span>].push_back(make_pair(make_pair(w, d), <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">multiset</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; line;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; now : sweep[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (now.second) line.insert(now.first);</span><br><span class="line"><span class="keyword">else</span> line.erase(line.find(now.first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.empty()) red[i] = make_pair(<span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">else</span> red[i] = *line.rbegin();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">++m;</span><br><span class="line"><span class="built_in">memset</span>(dp1, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp1));</span><br><span class="line">dp1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(dp0, dp1, <span class="keyword">sizeof</span> (dp0));</span><br><span class="line"><span class="built_in">memset</span>(dp1, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp1));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dp0[red[i].second + <span class="number">1</span>] = min(dp0[red[i].second + <span class="number">1</span>], dp0[i] + red[i].first);</span><br><span class="line">dp1[i + <span class="number">1</span>] = min(dp1[i + <span class="number">1</span>], dp0[i]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, dp0[n + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Lunar-New-Year-and-a-Recursive-Sequence"><a href="#F-Lunar-New-Year-and-a-Recursive-Sequence" class="headerlink" title="F. Lunar New Year and a Recursive Sequence"></a>F. Lunar New Year and a Recursive Sequence</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>已知一个序列$~f~$的递推公式是</p><script type="math/tex; mode=display">f_i=\left(\prod_{j=1}^{k}f_{i-j}^{b_j}\right)\mod(p=998244353)</script><p>现给出$~b_1,~b_2,~\dots,~b_k~$且$~f_1=f_2=\dots=f_{k-1}=1,~f_n=m~$，求$~f_k~$。<br>数据范围$~1\leq k\leq100,~k&lt; n\leq10^9,~1\leq m&lt; p=998244353~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>赤裸裸的线性递推套$~N~$次剩余。在不考虑序列$~f~$的前$~k~$项时，对于任意$~f_i~$，存在唯一的一组$~\beta_i=(b_{i1},~b_{i2},~\dots,~b_{ik})~$满足$~f_i=\prod_{j=1}^{k}f_j^{b_j}\mod p~$。于是得到了一个$~k~$维线性空间内的一个线性序列$~\beta~$。由费马小定理，可以对$~\beta~$每个维度都取模$~p-1~$意义下的值。于是有$~N~$次剩余方程$~f_k^{b_{nk}}=m\mod p~$。用$~\text{BSGS}~$算法可在$~O(\sqrt{p}\log p)~$内解出。线性递推部分用矩阵快速幂即可打到要求，总时间复杂度为$~O(k^3\log n+\sqrt{p}\log p)~$。或者用$~O(k^2\log n)~$的线性递推倍增算法优化，总时间复杂度为$~O(k^2\log n+\sqrt{p}\log p)~$。注意线性递推部分是取模$~p-1~$。<del>倍增算法部分还可以用模非质数的$~\text{NTT}~$优化，总时间复杂度为$~O(k\log k\log n+\sqrt{p}\log p)~$。</del></p><h3 id="代码（-O-k-3-log-n-sqrt-p-log-p-）"><a href="#代码（-O-k-3-log-n-sqrt-p-log-p-）" class="headerlink" title="代码（$~O(k^3\log n+\sqrt{p}\log p)~$）"></a><strong>代码（$~O(k^3\log n+\sqrt{p}\log p)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], power[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + p : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> sub(a, p - b, p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(mod + <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = fpow(n, mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; baby;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ sqr; ++i) &#123;</span><br><span class="line">baby[m] = i;</span><br><span class="line">m = mul(m, inv);</span><br><span class="line">&#125;</span><br><span class="line">n = fpow(n, sqr);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sqr + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = baby.find(now);</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end()) <span class="keyword">return</span> i * sqr + ite-&gt;second;</span><br><span class="line">now = mul(now, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x = p - <span class="number">1</span>; <span class="literal">true</span>; ++i)  &#123;</span><br><span class="line"><span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">factors.push_back(i);</span><br><span class="line"><span class="keyword">while</span> (!(x % i)) x /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * i * i &gt; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (x ^ <span class="number">1</span>) factors.push_back(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ret = <span class="number">1</span>; <span class="literal">true</span>; ++ret) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) <span class="keyword">if</span> (fpow(ret, (p - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> <span class="keyword">long</span>&amp; x, <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a ? (x = <span class="number">1</span>, y = <span class="number">0</span>, a) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = get_root(p);</span><br><span class="line"><span class="keyword">int</span> y = bsgs(root, m);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(n, p - <span class="number">1</span>, s, t);</span><br><span class="line"><span class="keyword">if</span> (y % d) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>) s = s * y / d % (p - <span class="number">1</span>) * (<span class="number">2</span> - p) % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> s = s * y / d % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fpow(root, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j], mod - <span class="number">1</span>), mod - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; base[<span class="number">0</span>][i], power[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) base[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = n - k; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (t &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, power, base, k);</span><br><span class="line"><span class="built_in">memcpy</span>(power, tmp, <span class="keyword">sizeof</span> (power));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base, k);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (base));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; power_mod(power[<span class="number">0</span>][<span class="number">0</span>], m, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-k-2-log-n-sqrt-p-log-p-）"><a href="#代码（-O-k-2-log-n-sqrt-p-log-p-）" class="headerlink" title="代码（$~O(k^2\log n+\sqrt{p}\log p)~$）"></a><strong>代码（$~O(k^2\log n+\sqrt{p}\log p)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244352</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function">vi <span class="title">bm</span><span class="params">(vi&amp; c, <span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = c.size();</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = c.front(); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vi(<span class="number">1</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;vi&gt; base(size &lt;&lt; <span class="number">1</span>, vi(size, <span class="number">0</span>)), <span class="built_in">pow</span>(<span class="number">64</span>, vi(size, <span class="number">0</span>));</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">base[i][j] = add(mul(base[i - <span class="number">1</span>].back(), c[j]), j ? base[i - <span class="number">1</span>][j - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (n &lt; (size &lt;&lt; <span class="number">1</span>)) <span class="keyword">return</span> base[n];</span><br><span class="line"><span class="built_in">pow</span>[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) &#123;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line">tmp[j + k] = add(tmp[j + k], mul(<span class="built_in">pow</span>[i - <span class="number">1</span>][j], <span class="built_in">pow</span>[i - <span class="number">1</span>][k]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size &lt;&lt; <span class="number">1</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line"><span class="built_in">pow</span>[i][k] = add(<span class="built_in">pow</span>[i][k], mul(tmp[j], base[j][k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">vi ret = <span class="built_in">pow</span>[index];</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">tmp[i + j] = add(tmp[i + j], mul(ret[i], <span class="built_in">pow</span>[index][j]));</span><br><span class="line">fill(ret.begin(), ret.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">ret[j] = add(ret[j], mul(tmp[i], base[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], power[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + p : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> sub(a, p - b, p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(mod + <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = fpow(n, mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; baby;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ sqr; ++i) &#123;</span><br><span class="line">baby[m] = i;</span><br><span class="line">m = mul(m, inv);</span><br><span class="line">&#125;</span><br><span class="line">n = fpow(n, sqr);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sqr + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = baby.find(now);</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end()) <span class="keyword">return</span> i * sqr + ite-&gt;second;</span><br><span class="line">now = mul(now, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x = p - <span class="number">1</span>; <span class="literal">true</span>; ++i)  &#123;</span><br><span class="line"><span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">factors.push_back(i);</span><br><span class="line"><span class="keyword">while</span> (!(x % i)) x /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * i * i &gt; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (x ^ <span class="number">1</span>) factors.push_back(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ret = <span class="number">1</span>; <span class="literal">true</span>; ++ret) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) <span class="keyword">if</span> (fpow(ret, (p - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> <span class="keyword">long</span>&amp; x, <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a ? (x = <span class="number">1</span>, y = <span class="number">0</span>, a) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = get_root(p);</span><br><span class="line"><span class="keyword">int</span> y = bsgs(root, m);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(n, p - <span class="number">1</span>, s, t);</span><br><span class="line"><span class="keyword">if</span> (y % d) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>) s = s * y / d % (p - <span class="number">1</span>) * (<span class="number">2</span> - p) % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> s = s * y / d % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fpow(root, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j], mod - <span class="number">1</span>), mod - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; base[<span class="number">0</span>][i], power[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; ~i; --i) vec.push_back(base[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) base[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vec = BM::bm(vec, n - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; power_mod(vec.back(), m, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 534 (Div. 2)</title>
      <link href="/2019/02/13/Codeforces%20Round%20534%20(Div.%202)/"/>
      <url>/2019/02/13/Codeforces%20Round%20534%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1104" target="_blank" rel="noopener">Codeforces Round #534 (Div. 2)</a></p><h2 id="A-Splitting-into-digits"><a href="#A-Splitting-into-digits" class="headerlink" title="A. Splitting into digits"></a>A. Splitting into digits</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (--n) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Game-with-string"><a href="#B-Game-with-string" class="headerlink" title="B. Game with string"></a>B. Game with string</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>类似祖玛，两人轮流选择两个一样的相邻字符从字符串中消除，不能操作则失败。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟。一个字符串的可操作次数是固定的且与操作顺序无关。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; chs;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (!chs.empty() &amp;&amp; chs.back() == ch) &#123;</span><br><span class="line">++cnt;</span><br><span class="line">chs.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">chs.push_back(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Grid-game"><a href="#C-Grid-game" class="headerlink" title="C. Grid game"></a>C. Grid game</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~4\times4~$的大正方形内要放入若干$~1\times2~$和$~2\times1~$的小长方形，不能重叠，但是如果某行或者某列被占满则改行或者该列被清空。现给出小长方形的出现顺序，输出一种可行的放置方案。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>前$~2~$排专门放竖的，第$~3~$排专门放横的即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">5</span>) a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">1</span>) b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Game-with-modulo"><a href="#D-Game-with-modulo" class="headerlink" title="D. Game with modulo"></a>D. Game with modulo</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。有个未知数$~a~$，每次只能询问一对数$~(x,~y)~$，如果在模$~a~$意义下满足$~x\geq y~$，则返回$~x~$，否则返回$~y~$。在至多$~60~$次查询内确定$~a~$的大小。<br>数据范围$~1\leq a\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>倍增。如果有$~a&gt;x~$，则通过询问$~(x,~2x)~$得到$~a~$与$~2x~$的大小关系。所以在$~30~$次询问内，可以确认$~a=1~$或者$~a\in(2^i,~2^{i+1}],~i\in[0,~30)~$。对于$~a\in(x,~y]~$，运用同样的思想，询问$~(x,~\frac{x+y}{2})~$，可以确认$~a~$与$~\frac{x+y}{2}~$的关系。于是再用至多$~30~$次询问即可得出答案。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">return</span> str == <span class="string">"start"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; res)</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (game()) &#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (query(now, now &lt;&lt; <span class="number">1</span>)) now &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (now == <span class="number">1</span>) &#123;</span><br><span class="line">solve(query(<span class="number">2</span>, <span class="number">3</span>) ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> left = now, right = now &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(left, mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">solve(right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Johnny-Solving"><a href="#E-Johnny-Solving" class="headerlink" title="E. Johnny Solving"></a>E. Johnny Solving</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点的简单连通图，且每个点的度数至少为$~3~$。再给出一个不大于$~n~$的正整数$~k~$。要求输出一条长度不小于$~\frac{n}{k}~$的简单路径或者$~k~$个长度不是$~3~$的倍数的环，且每个环有个代表点，代表点不能再其他环内。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~\text{DFS}~$生成树。如果有点的深度不小于$~\frac{n}{k}~$，那么可以直接构造出简单路径。否则这棵树必有至少$~k~$个叶节点。考虑每个叶节点，由于每个点的度数至少为$~3~$且根据$~\text{DFS}~$生成树的性质，这个叶节点必有至少$~2~$条边连向不同的非父亲祖先。这样每个叶节点可以找到$~3~$个环，可以自行证明必存在长度不是$~3~$的倍数的环。此时该叶节点也满足代表元性质，构造完毕。所有过程均为线性，不过我的代码不知道为什么不加剪枝会$~\text{TLE}~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn], dep[maxn], n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cycles;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> ((dep[u] = d) &gt; (n - <span class="number">1</span>) / k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"PATH\n"</span> &lt;&lt; d &lt;&lt; <span class="string">'\n'</span> &lt;&lt; u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = fa[u]; i; i = fa[i]) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">fa[v] = u;</span><br><span class="line">dfs(v, d + <span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (adj[u][index] == fa[u]) ++index;</span><br><span class="line"><span class="keyword">int</span> x = adj[u][index++];</span><br><span class="line"><span class="keyword">if</span> (adj[u][index] == fa[u]) ++index;</span><br><span class="line"><span class="keyword">int</span> y = adj[u][index];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; loop(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ x) loop.push_back(fa[loop.back()]);</span><br><span class="line"><span class="keyword">if</span> (loop.size() % <span class="number">3</span>) &#123;</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">loop = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ y) loop.push_back(fa[loop.back()]);</span><br><span class="line"><span class="keyword">if</span> (loop.size() % <span class="number">3</span>) &#123;</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">loop = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line">loop.push_back(x);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ y) loop.push_back(fa[loop.back()]);</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cycles.size() == k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"CYCLES\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; loop : cycles) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; loop.size() &lt;&lt; <span class="string">'\n'</span> &lt;&lt; loop.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ loop.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; loop[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeCraft-19 and Codeforces Round 537 (Div. 2)</title>
      <link href="/2019/02/11/CodeCraft-19%20and%20Codeforces%20Round%20537%20(Div.%202)/"/>
      <url>/2019/02/11/CodeCraft-19%20and%20Codeforces%20Round%20537%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1111" target="_blank" rel="noopener">CodeCraft-19 and Codeforces Round #537 (Div. 2)</a></p><h2 id="A-Superhero-Transformation"><a href="#A-Superhero-Transformation" class="headerlink" title="A. Superhero Transformation"></a>A. Superhero Transformation</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">check[<span class="string">'a'</span>] = check[<span class="string">'e'</span>] = check[<span class="string">'i'</span>] = check[<span class="string">'o'</span>] = check[<span class="string">'u'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="keyword">if</span> (s1.size() ^ s2.size()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ s1.size(); ++i)</span><br><span class="line"><span class="keyword">if</span> (check[s1[i]] ^ check[s2[i]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Average-Superhero-Gang-Power"><a href="#B-Average-Superhero-Gang-Power" class="headerlink" title="B. Average Superhero Gang Power"></a>B. Average Superhero Gang Power</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给顶一个序列，最多可以操作$~k~$次，或者移除一个元素，或者是一个元素加$~1~$，且每个元素至多操作$~m~$次。输出该序列最后平均数的最大值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。排序后暴力枚举移除操作的次数即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">sort(a, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = pre[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ min(n, m + <span class="number">1</span>); ++i)</span><br><span class="line">res = max(res, <span class="number">1.0</span> * (pre[n] - pre[i] + min(<span class="number">1L</span>L * (n - i) * k, <span class="number">1L</span>L * (m - i))) / (n - i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Creative-Snap"><a href="#C-Creative-Snap" class="headerlink" title="C. Creative Snap"></a>C. Creative Snap</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要处理一整段长度为$~2^n~$的数轴，数轴上有$~k~$个物品。对于每个区间可以选择二等分后分别处理或者直接处理。处理区间时，如果区间上有物品，则需要花费$~B\cdot n_a\cdot l$，其中$~n_a~$和$~l~$分别是该区间物品数量和长度。否则处理空区间的花费为$~A~$。问最小总花费。<br>数据范围$~1\leq n\leq30,~1\leq k\leq10^5~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接根据题意递归处理即可。考虑一棵完整的线段树，它有$~2^{n+1}~$个节点。但是注意到对于空区间的节点，其子树是不需要考虑的。且最后一层只有$~k~$个非空节点，所以所有需要经过的节点是$~O(nk)~$级别的。对于区间内的数量，可以用$~\text{lower_bound}~$或$~\text{upper_bound}~$来计算，总时间复杂度为$~O(nk\log k)~$。<del>当然你想写线段树动态开点也不是不可以。</del></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A, B;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = upper_bound(a.begin(), a.end(), end) - upper_bound(a.begin(), a.end(), begin);</span><br><span class="line"><span class="keyword">if</span> (!size) <span class="keyword">return</span> A;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = B * size * (end - begin);</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> ^ end) ret = min(ret, solve(begin, begin + end &gt;&gt; <span class="number">1</span>) + solve(begin + end &gt;&gt; <span class="number">1</span>, end));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; A &gt;&gt; B;</span><br><span class="line">a.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; solve(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Destroy-the-Colony"><a href="#D-Destroy-the-Colony" class="headerlink" title="D. Destroy the Colony"></a>D. Destroy the Colony</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个偶数长度的大小写字符串和$~q~$次询问。每次询问输出有多少种字符串的重排列满足所有一样的字母在同侧且$~x~$和$~y~$位置上的字母也在同侧。<br>数据范围$~1\leq n\leq10^5,~1\leq q\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑存在性，则存在一种字母的二划分使得每个划分下的数量总和均为$~\frac{n}{2}~$。设划分为</p><script type="math/tex; mode=display">\{a_1,~a_2,~\dots,~a_k\}=\{b_1,~b_2,~\dots,~b_s,~c_1,~c_2,~\dots,~c_t\} \\\sum_{i=1}^{s}b_i=\sum_{i=1}^{t}c_i={\frac{n}{2}}</script><p>那么这种满足这种划分的重排列数量为</p><script type="math/tex; mode=display">\frac{(\frac{n}{2})!}{\prod_{i=1}^{s}(b_i)!}\cdot\frac{(\frac{n}{2})!}{\prod_{i=1}^{t}(c_i)!}=\frac{((\frac{n}{2})!)^2}{\prod_{i=1}^{k}(a_i)!}</script><p>那么只需要考虑有多少种合法的划分方案。注意到最多只有$~52~$种不一样的字母，即$~k\leq52~$。那么可以用一个$~O(nk)~$的动态规划来算出对于任意$~0\leq i\leq n~$，有多少种子集的和为$~i~$。最后考虑询问，这相当于把某对$~a_i~$和$~a_j~$合并后计算，共$~\binom{k}{2}~$种组合如果每种情况分别动态规划，预处理的时间复杂度为$~O(nk^3)~$，显然会$~\text{TLE}~$。注意到每次动态规划的元素大部分是相同的，于是可以考虑<del>可持久化动态规划</del>的做法，在基于$~{a_1,~a_2,~\dots,~a_k}~$的基础上删除$~a_i~$和$~a_j~$。这样每种组合的动态规划时间复杂度为$~O(n)~$，总时间复杂度为$~O(nk^2+q)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> size = str.size();</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) ++cnt[ch];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, p(<span class="number">128</span>, <span class="number">-1</span>), dp(size + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> now : cnt) &#123;</span><br><span class="line">p[now.first] = a.size();</span><br><span class="line">a.push_back(now.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> base = mul(fact[size &gt;&gt; <span class="number">1</span>], fact[size &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">base = mul(base, finv[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt;= x; --i) dp[i] = add(dp[i], dp[i - x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = mul(dp[size &gt;&gt; <span class="number">1</span>], base);</span><br><span class="line"><span class="keyword">int</span> cal[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ a.size(); ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j ^ a.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = a[i]; k &lt;= size; ++k) dp[k] = sub(dp[k], dp[k - a[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = a[j]; k &lt;= size; ++k) dp[k] = sub(dp[k], dp[k - a[j]]);</span><br><span class="line">cal[i][j] = mul(add(dp[size &gt;&gt; <span class="number">1</span>], dp[size &gt;&gt; <span class="number">1</span>]), base);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = size; k &gt;= a[i]; --k) dp[k] = add(dp[k], dp[k - a[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = size; k &gt;= a[j]; --k) dp[k] = add(dp[k], dp[k - a[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x = p[str[x - <span class="number">1</span>]];</span><br><span class="line">y = p[str[y - <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; cal[x][y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 538 (Div. 2)</title>
      <link href="/2019/02/11/Codeforces%20Round%20538%20(Div.%202)/"/>
      <url>/2019/02/11/Codeforces%20Round%20538%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1114" target="_blank" rel="noopener">Codeforces Round #538 (Div. 2)</a></p><h2 id="A-Got-Any-Grapes"><a href="#A-Got-Any-Grapes" class="headerlink" title="A. Got Any Grapes?"></a>A. Got Any Grapes?</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z, a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (a &lt; x || a + b &lt; x + y || a + b + c &lt; x + y + z) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Yet-Another-Array-Partitioning-Task"><a href="#B-Yet-Another-Array-Partitioning-Task" class="headerlink" title="B. Yet Another Array Partitioning Task"></a>B. Yet Another Array Partitioning Task</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个序列的$~\text{beauty}~$值为前$~m~$大的数值之和。现给定一个大序列，要求划分成$~k~$个连续的序列使得这$~k~$个序列的$~\text{beauty}~$值总和最大，并输出划分的方案。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。原序列前$~mk~$大的数值之和就是最大值。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; a(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; use(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i].first, a[i].second = i;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - m * k; i ^ n; ++i) res += a[i].first, use[a[i].second] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">if</span> (use[i] &amp;&amp; ++cnt == m) &#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (++tot == k) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Trailing-Loves-or-L’oeufs"><a href="#C-Trailing-Loves-or-L’oeufs" class="headerlink" title="C. Trailing Loves (or L’oeufs?)"></a>C. Trailing Loves (or L’oeufs?)</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问数字$~n!~$在$~b~$进制下有多少个末尾$~0~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>因式分解$~b~$后对所有质数计算$~n!~$中的幂指数。公式</p><script type="math/tex; mode=display">f(n,~p)=\sum_{i=1}^{\infty}\left\lfloor\frac{n}{p^i}\right\rfloor</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; b;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">2</span>; <span class="literal">true</span>; ++p) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(b % p)) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">for</span> (cnt = <span class="number">0</span>; !(b % p); ++cnt) b /= p;</span><br><span class="line">factors.push_back(make_pair(p, cnt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p * p &gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b ^ <span class="number">1</span>) factors.push_back(make_pair(b, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x7fffffffffffffff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> x = n; x; x /= f.first) temp += x / f.first;</span><br><span class="line">res = min(res, temp / f.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Flood-Fill"><a href="#D-Flood-Fill" class="headerlink" title="D. Flood Fill"></a>D. Flood Fill</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列，选择一个起点，每次操作可以将包含起点的等值联通块全部改变为另一数值。问最少操作次数使得序列全部一样。<br>数据范围$~1\leq n\leq5000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先对相邻等值的元素去重，于是每次操作可以使得包含起点的等值联通块大小增加$~1~$或者$~2~$。如果能增加$~2~$，说明存在$~2~$个一样的元素在起点的左右。于是只要找到<strong>最长回文子序列</strong>即可，这是一个区间$~\text{DP}~$问题，具体实现见代码。时间复杂度为$~O(n^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; str;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (str.empty() || str.back() ^ c) str.push_back(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = str.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(size, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(size, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">2</span>; d &lt; size; ++d)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l + d ^ size; ++l) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[l] ^ str[l + d]) dp[l][l + d] = max(dp[l][l + d - <span class="number">1</span>], dp[l + <span class="number">1</span>][l + d]);</span><br><span class="line"><span class="keyword">else</span> dp[l][l + d] = dp[l + <span class="number">1</span>][l + d - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; size - <span class="number">1</span> - (dp[<span class="number">0</span>][size - <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Arithmetic-Progression"><a href="#E-Arithmetic-Progression" class="headerlink" title="E. Arithmetic Progression"></a>E. Arithmetic Progression</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。现有一个乱序的等差数列，可以有两种询问：问是否存在一个数严格大于$~x~$，或者问第$~i~$个数的值。询问次数不超过$~60~$次，然后输出首项和公差。<br>数据范围$~2\leq n\leq10^6~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过二分可以在$~30~$次询问内找出最大值也就是末项。然后随机询问$~30~$个数值后与末项的差取$~\gcd~$。算出的答案为真实的公差的概率等于$~n~$以内随机$~30~$个数互质的概率。<strong>注意代码实现尽量接近真正的随机</strong>，详见<a href="https://codeforces.com/blog/entry/61587" target="_blank" rel="noopener">博客链接</a>。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rand_fuck</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">1e9</span>, rem = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line">--rem;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt; "</span> &lt;&lt; mid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">if</span> (in) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">1</span>);</span><br><span class="line">shuffle(p.begin(), p.end(), rand_fuck);</span><br><span class="line">rem = min(rem, n);</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ rem; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; p[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">d = __gcd(d, right - in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; right - (n - <span class="number">1</span>) * d &lt;&lt; <span class="string">' '</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Please-another-Queries-on-Array"><a href="#F-Please-another-Queries-on-Array" class="headerlink" title="F. Please, another Queries on Array?"></a>F. Please, another Queries on Array?</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对序列区间乘以$~x~$或查询区间乘积的欧拉函数值。<br>数据范围$~1\leq n\leq4\cdot10^5,~1\leq q\leq2\cdot10^5,~1\leq a\leq300,~1\leq x\leq300~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>欧拉函数$~\varphi(n)~$的定义为小于$~n~$且与$~n~$互质的正整数的数量，是个<strong>积性函数</strong>。对于$~n~$的所有质因子$~p~$，有如下公式</p><script type="math/tex; mode=display">\varphi(n)=n\prod_{p\mid n}\frac{p-1}{p}</script><p>对于乘积的操作可以用一棵区间乘法线段树完成，建树的时间复杂度为$~O(n)~$，单次修改操作或查询的时间复杂度为$~O(\log^2n)~$。注意到$~x~$和$~a~$的数据范围，可以先预处理出所有可能的质数，事实上只有至多$~62~$个质数。那么对于线段树上的每一个节点，可以用一个$~64~$位的数据类型来储存状态压缩过后的质因子表。总时间复杂度为$~O(n+q\cdot(\log^2n+62))~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], euler[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> prime[<span class="number">301</span>], mask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> cal, cal_;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mask, mask_;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; p)</span> </span>&#123;</span><br><span class="line">cal_ = mul(cal_, x);</span><br><span class="line">mask_ |= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n)</span> </span>&#123;</span><br><span class="line">cal = mul(cal, fpow(cal_, n));</span><br><span class="line">mask |= mask_;</span><br><span class="line">cal_ = <span class="number">1</span>;</span><br><span class="line">mask_ = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index].cal = mul(seg[lson].cal, seg[rson].cal);</span><br><span class="line">seg[index].mask = seg[lson].mask | seg[rson].mask;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index].mask = prime[seg[index].cal = a[end]];</span><br><span class="line">&#125;</span><br><span class="line">seg[index].cal_ = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">seg[index].tage(x, prime[x]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index].cal = mul(seg[index].cal, fpow(x, min(end, right) - max(begin, left)));</span><br><span class="line">seg[index].mask |= prime[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (seg[index].mask_) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">seg[lson].tage(seg[index].cal_, seg[index].mask_);</span><br><span class="line">seg[rson].tage(seg[index].cal_, seg[index].mask_);</span><br><span class="line">&#125;</span><br><span class="line">seg[index].calc(end - begin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> mask |= seg[index].mask, seg[index].cal;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= left || begin &gt;= right) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> mul(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, cnt = <span class="number">0</span>; i &lt;= <span class="number">300</span>; ++i) <span class="keyword">if</span> (!prime[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= <span class="number">300</span>; j += i) prime[j] ^= <span class="number">1L</span>L &lt;&lt; cnt;</span><br><span class="line">euler[cnt++] = mul(i - <span class="number">1</span>, fpow(i, mod - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'M'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">mask = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = query(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">62</span>; ++i) <span class="keyword">if</span> (mask &amp; <span class="number">1L</span>L &lt;&lt; i) res = mul(res, euler[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最长单调子序列</title>
      <link href="/2019/01/18/%E6%9C%80%E9%95%BF%E5%8D%95%E8%B0%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2019/01/18/%E6%9C%80%E9%95%BF%E5%8D%95%E8%B0%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a><strong>朴素算法</strong></h3><p>动态规划，令$~dp[i]~$表示以$~a[i]~$结尾的最长上升子序列长度，则有状态转移式</p><script type="math/tex; mode=display">dp[i]=\max_{j< i,~a[j]< a[i]}{dp[j]}+1</script><p>这样的时间复杂度显然是$~O(n^2)~$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lis</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ i; ++j)</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; a[j])</span><br><span class="line">dp[i] = max(dp[i], dp[j]);</span><br><span class="line">++dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) ret = max(ret, dp[i]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a><strong>优化算法</strong></h3><p>用数组$~pos[i]~$记录长度为$~i~$的$~\text{LIS}~$的最后一个角标，那么在上述状态转移过程中，如果$~i~$的第$~1~$个最优转移点是$~j~$，必有$~a[pos[j]]]&lt; a[i]~$，且$~pos[j+1]~$不存在或者$~pos[j+1]\geq a[i]~$。这时令$~pos[dp[i]=j+1]=i~$。且这样维护的$~pos~$必然满足$~a[pos[i]]~$严格单增。于是只需要在$~pos~$上转移，答案为$~pos~$的最终大小。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lis</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = ret;</span><br><span class="line"><span class="keyword">while</span> (j &amp;&amp; a[i] &gt;= a[pos[j]]) --j;</span><br><span class="line">pos[++j] = i;</span><br><span class="line">ret = max(ret, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的时间复杂度依然是$~O(n^2)~$但是相对于上一个算法有了不少的的剪枝。同时由于$~a[pos[i]]~$的单调性上面代码中的$~\text{while}~$部分可以用二分算法优化，这样总时间复杂度就降为$~O(n\log n)~$。同时可以对每次的状态转移记忆化，这样可以得到一个最长上升子序列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lis(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret, to(a.size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(ret.begin(), ret.end(), i, [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;<span class="keyword">return</span> a[x] &lt; a[y];&#125;);</span><br><span class="line"><span class="keyword">if</span> (ite == ret.begin()) to[i] = i;</span><br><span class="line"><span class="keyword">else</span> to[i] = *(ite - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ite == ret.end()) ret.push_back(i);</span><br><span class="line"><span class="keyword">else</span> *ite = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ret.size() - <span class="number">2</span>; ~i; --i) ret[i] = to[ret[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dilworth定理"><a href="#Dilworth定理" class="headerlink" title="Dilworth定理"></a>Dilworth定理</h2><p>数列$~{a_n}~$的最长上升子序列（非严格单增）最小划分数等于最长下降子序列（严格单减）长度。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a><strong>证明</strong></h3><p>设数列$~{a_n}~$的最长上升子序列（非严格单增）最小划分数为$~k~$，最长下降子序列（严格单减）长度为$~m~$。任取一条最长下降子序列$~b_1,~b_2,~\dots,~b_m~$，则它们之中任意两个必然不在同一最长上升子序列划分中，所以必有$~k\geq m~$。<br>将数列$~{a_n}~$翻转，此时最长上升子序列（严格单增）长度为$~m~$，下面构造下降子序列（非严格单减）的$~m~$划分。在计算$~m~$的过程中，数组$~pos~$的每一次更新都必然满足$~pos[j]~$不存在或者$~a_{pos[j]}\geq a_i~$，那么$~pos[j]~$的更新链恰好构成$~{a_n}~$的一条非严格单减子序列。而$~{\mid pos\mid}=m~$，也就是说$~pos~$有$~m~$条不交的更新链，它们恰好构成$~{a_n}~$的一个下降子序列（严格单增）的$~m~$划分。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>用角标记录，返回最长严格单增子序列和非严格单减子序列划分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">exlis</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lis, to(a.size());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; lds;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> idx = lower_bound(lis.begin(), lis.end(), i, [&amp;](<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;<span class="keyword">return</span> a[x] &lt; a[y];&#125;) - lis.begin();</span><br><span class="line"><span class="keyword">if</span> (idx) to[i] = lis[idx - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> to[i] = i;</span><br><span class="line"><span class="keyword">if</span> (idx == lis.size()) &#123;</span><br><span class="line">lis.push_back(i);</span><br><span class="line">lds.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">lis[idx] = i;</span><br><span class="line">lds[idx].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lis.size() - <span class="number">2</span>; ~i; --i) lis[i] = to[lis[i + <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">return</span> make_pair(lis, lds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="CF1097E"><a href="#CF1097E" class="headerlink" title="CF1097E"></a><a href="https://codeforces.com/problemset/problem/1097/E" target="_blank" rel="noopener">CF1097E</a></h3>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello 2019 (TBC)</title>
      <link href="/2019/01/17/Hello%202019%20(TBC)/"/>
      <url>/2019/01/17/Hello%202019%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1097" target="_blank" rel="noopener">Hello 2019</a></p><h2 id="A-Gennady-and-a-Card-Game"><a href="#A-Gennady-and-a-Card-Game" class="headerlink" title="A. Gennady and a Card Game"></a>A. Gennady and a Card Game</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~1~$张匹配扑克牌和$~5~$张手牌，判断是否存在$~1~$张手牌的花色或者数值和匹配牌一样。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str, hand;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; hand;</span><br><span class="line">        <span class="keyword">if</span> (str.front() == hand.front() || str.back() == hand.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Petr-and-a-Combination-Lock"><a href="#B-Petr-and-a-Combination-Lock" class="headerlink" title="B. Petr and a Combination Lock"></a>B. Petr and a Combination Lock</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~360^\circ~$的刻度盘，指针初始在$~0^\circ~$处。给定每次旋转的度数$~a_1,~a_2,~\dots,~a_n~$，但是旋转方向不定，判断是否存在一种旋转方式使得最后指针回到$~0^\circ~$。<br>数据范围$~1\leq n\leq15,~1\leq a\leq180~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>爆搜即可。时间复杂度为$~O(2^n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">1</span> &lt;&lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n; ++j) sum += i &amp; <span class="number">1</span> &lt;&lt; j ? a[j] : <span class="number">360</span> - a[j];</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">360</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Yuhao-and-a-Parenthesis"><a href="#C-Yuhao-and-a-Parenthesis" class="headerlink" title="C. Yuhao and a Parenthesis"></a>C. Yuhao and a Parenthesis</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~n~$个括号串，问最多多少括号穿有序对连在一起合法，每个串至多使用一次。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>经典合法括号串问题。合法性考虑前缀和即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt1(<span class="number">1</span> &lt;&lt; <span class="number">19</span>, <span class="number">0</span>), cnt2(<span class="number">1</span> &lt;&lt; <span class="number">19</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">            ch == <span class="string">'('</span> ? ++pre : --pre;</span><br><span class="line">            <span class="keyword">if</span> (pre &lt; <span class="number">0</span>) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre) ++cnt1[pre];</span><br><span class="line">            <span class="keyword">else</span> ++res;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> suf = -pre;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">            ch == <span class="string">')'</span> ? ++pre : --pre;</span><br><span class="line">            <span class="keyword">if</span> (pre &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pre) ++cnt2[suf];</span><br><span class="line">    &#125;</span><br><span class="line">    res &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">1</span> &lt;&lt; <span class="number">19</span>; ++i) res += min(cnt1[i], cnt2[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Makoto-and-a-Blackboard"><a href="#D-Makoto-and-a-Blackboard" class="headerlink" title="D. Makoto and a Blackboard"></a>D. Makoto and a Blackboard</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一种操作，对任何正整数$~x~$，它会等概率随机变为它的一个因子。现给两个数字$~n~$和$~k~$，问$~n~$经过$~k~$次操作后所得到的期望。<br>数据范围$~1\leq n\leq10^{15},~1\leq k\leq10^4~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>令$~\xi(x,~y)~$表示$~x~$经过$~y~$次操作对应答案的随机变量，则此题的答案可用$~\Bbb{E}(\xi(n,~k))~$。将$~n~$因式分解为$~\prod_{i=1}^{m}p_i^{\alpha_i}~$，于是$~\xi(n,~k)=\prod_{i=1}^{m}\xi(p_i^{\alpha_i},~k)~$，且$~\xi(p_i^{\alpha_i},~k)~$之间相互独立。所以答案可以表示为</p><script type="math/tex; mode=display">\begin{aligned}\Bbb{E}(\xi(n,~k))  &=\Bbb{E}\left(\prod_{i=1}^{m}\xi(p_i^{\alpha_i},~k)\right) \\                    &=\prod_{i=1}^{m}\Bbb{E}\left(\xi(p_i^{\alpha_i},~k)\right) \\\end{aligned}</script><p>接下来计算$~\Bbb{E}\left(\eta_k=\xi(p^\alpha,~k)\right)~$。显然$~\eta~$是个简单随机变量且值域$~\eta(\Omega)={1,~p,~\dots,~p^\alpha}~$。记$~f(x,~y)=P(\eta_y=p^x)~$，不难得出$~y=1~$时，有</p><script type="math/tex; mode=display">f(x,~1)=\frac{1}{\alpha+1},~0\leq x\leq\alpha</script><p>那么对于$~y&gt;1~$，有</p><script type="math/tex; mode=display">f(x,~y)=\sum_{i=x}^{\alpha}\frac{f(i,~y-1)}{i+1}</script><p>直接递推即可。总时间复杂度为$~O(\sqrt{n}+k\log n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">14</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], a[<span class="number">64</span>], b[<span class="number">64</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> pp, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = pp % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) a[i] = inv[n + <span class="number">1</span>];</span><br><span class="line">    b[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (--k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; ~i; --i) b[i] = add(b[i + <span class="number">1</span>], mul(a[i], inv[i + <span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">memcpy</span>(a, b, (n + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, base = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i) base = mul(base, p);</span><br><span class="line">        ret = add(ret, mul(a[i], base));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">2</span>; p * p &lt;= n; ++p) <span class="keyword">if</span> (n % p == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % p == <span class="number">0</span>) n /= p, ++cnt;</span><br><span class="line">        factors.push_back(make_pair(p, cnt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n ^ <span class="number">1</span>) factors.push_back(make_pair(n, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> factor : factors) res = mul(res, calc(factor.first, factor.second, k));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Egor-and-an-RPG-game"><a href="#E-Egor-and-an-RPG-game" class="headerlink" title="E. Egor and an RPG game"></a>E. Egor and an RPG game</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于一个全排列$~a_1,~a_2,~\dots,~a_n~$，将其划分为若干个单调子序列，记最少的数量为$~k~$。对于所有长度为$~n~$的全排列，所对应的$~k~$的最大值记为$~f(n)~$。现给出一个全排列$~a_1,~a_2,~\dots,~a_n~$，输出一种不超过$~f(n)~$的单调子序列划分方式。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑全排列$~1,~3,~2,~6,~5,~4,~10,~9,~8,~7~$，显然它至少要划分为$~4~$个单调子序列。所以对于$~\frac{k(k+1)}{2}\leq n~$，必有$~f(n)\geq k~$。那么对于$~\frac{k(k+1)}{2}&gt;n~$，下面证明存在$~k-1~$个单调子序列划分。考虑当前序列的任意一个$~\text{LIS}~$，如果$~{\mid\text{LIS}\mid}\geq k~$，那么将其划分，对于剩余的部分，此时有$~\frac{k(k-1)}{2}&gt;n-{\mid\text{LIS}\mid}~$，可以数学归纳。如果$~{\mid\text{LIS}\mid}&lt; k~$，那么根据$~\text{Dilworth}~$定理，可以将序列划分为$~\mid\text{LIS}\mid~$个$~\text{LDS}~$。这样总时间复杂度为$~O(n\sqrt n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lim;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">500</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; ~j; --j) lim.push_back(i);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now(n), tmp, to(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(n + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : now) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">while</span> (!now.empty()) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; rem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : now) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = lower_bound(lis.begin(), lis.end(), a) - lis.begin();</span><br><span class="line"><span class="keyword">if</span> (idx) to[a] = lis[idx - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> to[a] = a;</span><br><span class="line"><span class="keyword">if</span> (idx == lis.size()) &#123;</span><br><span class="line">lis.push_back(a);</span><br><span class="line">rem.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">lis[idx] = a;</span><br><span class="line">rem[idx].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lis.size() &gt; lim[now.size()]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lis.size() - <span class="number">2</span>; ~i; --i) lis[i] = to[lis[i + <span class="number">1</span>]];</span><br><span class="line">res.push_back(lis);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : lis) flag[a] = <span class="literal">false</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : now) <span class="keyword">if</span> (flag[a]) tmp.push_back(a);</span><br><span class="line">swap(now, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ans : rem) res.push_back(ans);</span><br><span class="line">now.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> arr : res) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : arr) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Alex-and-a-TV-Show"><a href="#F-Alex-and-a-TV-Show" class="headerlink" title="F. Alex and a TV Show"></a>F. Alex and a TV Show</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>初始有$~n~$个空的可重集合$~S_1,~S_2,~\dots,~S_n~$。接下有$~q~$次操作或询问：</p><ol><li>把$~S_x~$变为$~{v}~$。</li><li>把$~S_x~$变为$~S_y\bigcup S_z~$。</li><li>把$~S_x~$变为$~{\gcd(a,~b)\mid a\in S_y,~b\in S_z}~$。</li><li>输出$~S_x~$中$~v~$的数量模$~2~$。</li></ol><p>数据范围$~1\leq n\leq10^5,~1\leq q\leq10^6,~1\leq v\leq7000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑这样的计数矩阵$~A_{n\times7000}~$，其中$~a_{xv}~$表示$~S_x~$中$~v~$的数量。那么会发现操作$~3~$的复杂度为$~O(q^2)~$。于是考虑因子矩阵$~B_{n\times7000}~$，其中$~b_{xv}~$表示$~S_x~$中$~v~$的倍数的数量。关于$~B~$能否唯一的表示$~A~$，只要存在可逆矩阵$~T~$，使得$~B=AT~$即可。令</p><script type="math/tex; mode=display">t_{ij}=\begin{cases}1   &\text{$j\mid i$}   \\0   &\text{$j\nmid i$}  \\\end{cases}</script><p>则$~B=AT~$成立（根据$~B~$的定义），且$~T~$是主对角线全为$~1~$的下三角矩阵，必定可逆，于是$~B~$所对应的集族的唯一性得到了保证。事实上$~T^{-1}~$是莫比乌斯函数矩阵</p><script type="math/tex; mode=display">t_{ij}^{-1}=\begin{cases}\mu(ij^{-1})    &\text{$j\mid i$}   \\0               &\text{$j\nmid i$}  \\\end{cases}</script><p>$~T^{-1}~$的构造过程可以利用容斥的思想，那么$~\mu~$则是容斥系数。于是操作$~1~$等价于$~b_{x\small\bullet}=t_{v\small\bullet}~$，操作$~2~$等价于$~b_{x\small\bullet}=b_{y\small\bullet}+b_{z\small\bullet}~$，操作$~3~$等价于$~b_{x\small\bullet}=b_{y\small\bullet}\times b_{z\small\bullet}~$，询问$~4~$等价于计算$~b_{x\small\bullet}\cdot t_{v\small\bullet}^{-1}~$。注意到$~v~$的数据范围以及答案模$~2~$的要求，可以用$~\text{bitset}~$来模拟集合对应的因子矩阵。总时间复杂度为$~O(v\log v+\frac{qv}{\text{bitset}})~$，注意可能需要$~\text{fastIO}~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">7e3</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime, mu(maxv, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(maxv, <span class="literal">false</span>);</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxv; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime.push_back(i);</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt;= maxv) <span class="keyword">break</span>;</span><br><span class="line">            vis[i * p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p) mu[i * p] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">bitset</span>&lt;maxv&gt;&gt; factor(maxv), inv(maxv), <span class="built_in">set</span>(maxn);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxv; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxv; j += i) &#123;</span><br><span class="line">        factor[j].flip(i);</span><br><span class="line">        <span class="keyword">if</span> (mu[j / i]) inv[i].flip(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y, z, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; v;</span><br><span class="line">            <span class="built_in">set</span>[x] = factor[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            <span class="built_in">set</span>[x] = <span class="built_in">set</span>[y] ^ <span class="built_in">set</span>[z];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            <span class="built_in">set</span>[x] = <span class="built_in">set</span>[y] &amp; <span class="built_in">set</span>[z];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; v;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ((<span class="built_in">set</span>[x] &amp; inv[v]).count() &amp; <span class="number">1</span> ? <span class="string">'1'</span> : <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 58 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2058%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2058%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1101" target="_blank" rel="noopener">Educational Codeforces Round 58 (Rated for Div. 2)</a></p><h2 id="A-Minimum-Integer"><a href="#A-Minimum-Integer" class="headerlink" title="A. Minimum Integer"></a>A. Minimum Integer</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出不在$~[l,~r]~$内的$~d~$的最小整数倍。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((d &lt; l ? <span class="number">0</span> : r / d) + <span class="number">1</span>) * d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Accordion"><a href="#B-Accordion" class="headerlink" title="B. Accordion"></a>B. Accordion</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出给定字符串满足左边为$~\text{[:}~$右边为$~\text{:]}~$中间为任意（可以没有）数量的$~\text{|}~$的子序列最大长度。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">-1</span>, right = <span class="number">-1</span>, size = str.size();</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span>) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">':'</span> &amp;&amp; flag) &#123;</span><br><span class="line">left = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span>) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">':'</span> &amp;&amp; flag) &#123;</span><br><span class="line">right = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~left || !~ right || left &gt;= right) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">1</span>; i ^ right; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'|'</span>) ++res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Division-and-Union"><a href="#C-Division-and-Union" class="headerlink" title="C. Division and Union"></a>C. Division and Union</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>将$~n~$个给定的闭区间划分到两个集合之中，使得在这两个集合之中分别任选一个闭区间，它们不交。输出任意一种划分或者不存在。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先，如果有合法的划分，当且仅当这两个集合分别并起来得到的两个数集不交。于是合法划分不存在当前仅当所有区间并起来还是一个区间。对所有的区间按左端点升序，先将第$~1~$个区间划分给集合$~1~$，然后按顺序看当前区间与第$~1~$个区间是否有交。如果有交则划分给集合$~1~$同时与第$~1~$个区间并起来。如果没有则后面所有的区间都划分给集合$~2~$，这样所有在集合$~2~$区间里的数都大于在集合$~1~$区间里的数。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; seg(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[i].first.first &gt;&gt; seg[i].first.second;</span><br><span class="line">seg[i].second = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(seg.begin(), seg.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, back = seg.front().first.second; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].first.first &lt;= back) &#123;</span><br><span class="line">back = max(back, seg[i].first.second);</span><br><span class="line">res[seg[i].second] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j ^ n; ++j) res[seg[j].second] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j ^ n; ++j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-GCD-Counting"><a href="#D-GCD-Counting" class="headerlink" title="D. GCD Counting"></a>D. GCD Counting</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一颗带点值的树，找出最长的简单路径满足路径上所有点值不互质。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq a\leq2\cdot10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于最长的合法路径，必存在一个质数$~p~$是路径上所有点值的公因数。注意到点值的数据范围，可以先预处理所有数字的所有质因子，这一步的时间复杂度为$~O(a\log a)~$。树形$~\text{DP}~$。任取一个点为根节点，考虑在以节点$~u~$为根的子树上经过$~u~$且有公因数$~p~$的最长路径$~cal[u][p]~$。先计算以$~u~$为一个端点，另一端点在子树中且公因数为$~p~$的最长路径路径$~len[u][p]~$。那么对于$~u~$的所有儿子$~v~$，在$~\text{dfs}~$过程中用$~len[v][p]~$的最大值更新$~len[u][p]~$，最大值和次大值更新$~cal[u][p]~$。为节省空间，注意到$~a~$的不同质因子个数很少，可以用$~\text{map}~$来维护$~len~$，且不用记录$~cal~$直接更新答案即可。总时间复杂度为$~O(a\cdot\log a+n\cdot\log a\cdot\log\log a)~$。<del>事实上可以写成$~O((n+a)\log a)~$，但是没有必要。</del></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], res, max1[maxn], max2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], prime[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(maxn);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; len[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ pa) dfs(v, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) max1[p] = max2[p] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ pa) <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) &#123;</span><br><span class="line">max2[p] = max(max2[p], len[v][p]);</span><br><span class="line"><span class="keyword">if</span> (max1[p] &lt; max2[p]) swap(max1[p], max2[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[u] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) &#123;</span><br><span class="line">cal = max(cal, max1[p] + max2[p]);</span><br><span class="line">len[u][p] = max1[p] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, ++cal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) <span class="keyword">if</span> (!vis[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxn; j += i) &#123;</span><br><span class="line">vis[j] = <span class="literal">true</span>;</span><br><span class="line">prime[j].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Polycarp’s-New-Job"><a href="#E-Polycarp’s-New-Job" class="headerlink" title="E. Polycarp’s New Job"></a>E. Polycarp’s New Job</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一共$~n~$次添加或者询问：</p><ol><li>加入一个大小为$~x\times y~$的矩形。</li><li>询问是否所有矩形都能被$~h\times w~$的矩形包含。<br>数据范围$~2\leq n\leq5\cdot10^5,~1\leq x,~y,~h,~w\leq10^9~$。</li></ol><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先离散化。注意到矩形可以翻转，不妨让$~x\geq y,~h\geq w~$。那么题目变成了平面加点和询问平面内所有点是否都在$~[0,~h]\times[0,~w]~$或$~[0,~w]\times[0,~h]~$内。空间范围显然不允许使用二维树状数组，但是可以将询问等价为所有点都在$~[0,~h]\times[0,~h]~$内且不在$~(w,~\infty)\times(w,~\infty)~$内。那么用两个一维树状数组维护即可。总时间复杂度$~O(n\log n)~$。数据范围过大，注意$~\text{IO}~$速度。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; query(n);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; qry : query) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; qry.op &gt;&gt; qry.x &gt;&gt; qry.y;</span><br><span class="line"><span class="keyword">if</span> (qry.x &lt; qry.y) swap(qry.x, qry.y);</span><br><span class="line">num.insert(qry.x);</span><br><span class="line">num.insert(qry.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; to;</span><br><span class="line"><span class="keyword">int</span> maxn = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : num) to[x] = maxn++;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bit1(maxn, <span class="number">0</span>), bit2(maxn, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> qry : query) &#123;</span><br><span class="line">qry.x = to[qry.x];</span><br><span class="line">qry.y = to[qry.y];</span><br><span class="line"><span class="keyword">if</span> (qry.op == <span class="string">'+'</span>) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.x; i &lt; maxn; i += lowbit(i)) ++bit1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.y; i; i -= lowbit(i)) ++bit2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.x; i; i -= lowbit(i)) sum += bit1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.y + <span class="number">1</span>; i &lt; maxn; i += lowbit(i)) sum -= bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum == cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Trucks-and-Cities"><a href="#F-Trucks-and-Cities" class="headerlink" title="F. Trucks and Cities"></a>F. Trucks and Cities</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>坐标轴上有$~n~$个城市和$~m~$趟卡车。给定城市坐标$~a~$，卡车的起点$~s~$、终点$~f~$、每公里耗油$~c~$和可中途加油次数$~r~$。问油箱的最小容量。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。记$~dp[r][s][f]~$为最优策略下卡车从$~a_s~$到$~a_f~$最多停靠加油$~r~$次的最长的两次停靠城市距离。那么答案则是$~\max(dp[r][s][f]\cdot c)~$。通过枚举最后一次停靠城市$~a_l~$，有状态转移式</p><script type="math/tex; mode=display">dp[r][s][f]=\min_{s< t< f}\max(dp[r-1][s][t],~a[f]-a[t])</script><p>此时总时间复杂度为$~O(n^4)~$显然会$~\text{tle}~$。但是不难发现在固定$~r~$和$~s~$后，最优转移点$~t~$随着$~f~$递增，所以双指针优化后时间复杂度变为$~O(n^3)~$。但是直接开$~O(n^3)~$的三位数组空间复杂度很危险（擦着边其实可以过），那么对于所有的输入$~(s,~f,~c,~r)~$离线操作，按$~r~$升序，这样$~dp~$的$~r~$维度可以滚动数组实现。总时间复杂度为$~O(n^3+m\log m)~$，空间复杂度为$~O(n^2+m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp0(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp1(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j)</span><br><span class="line">dp0[i][j] = a[j] - a[i];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span><span class="keyword">int</span> s, f, c, r;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; query(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; qry : query) <span class="built_in">cin</span> &gt;&gt; qry.s &gt;&gt; qry.f &gt;&gt; qry.c &gt;&gt; qry.r;</span><br><span class="line">sort(query.begin(), query.end(), [](Query a, Query b) &#123;<span class="keyword">return</span> a.r &lt; b.r;&#125;);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> qry : query) &#123;</span><br><span class="line"><span class="keyword">while</span> (now ^ qry.r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = j, l = j; k &lt;= n; ++k) &#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; k &amp;&amp; max(dp0[j][l], a[k] - a[l]) &gt; max(dp0[j][l + <span class="number">1</span>], a[k] - a[l + <span class="number">1</span>])) ++l;</span><br><span class="line">dp1[j][k] = max(dp0[j][l], a[k] - a[l]);</span><br><span class="line">&#125;</span><br><span class="line">swap(dp0, dp1);</span><br><span class="line">++now;</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, <span class="number">1L</span>L * qry.c * dp0[qry.s][qry.f]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Zero-XOR-Subset-less"><a href="#G-Zero-XOR-Subset-less" class="headerlink" title="G. (Zero XOR Subset)-less"></a>G. (Zero XOR Subset)-less</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定数列$~a_1,~a_2,~\dots,~a_n~$，要划分为若干个连续子序列$~A_1,~A_2,~\dots,~A_k~$。令每个子序列的$~\text{xor}~$和记为$~\alpha_i,~i=1,~2,~\dots,~k~$，集合$~S={\alpha_1,~\alpha_2,~\dots,~\alpha_k}~$。问满足$~S~$的所有非空子集的$~\text{xor}~$和互不相同的最大$~k~$或不存在。<br>数据范围$~1\leq n\leq2\cdot10^5,~0\leq a\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记录$~a_1,~a_2,~\dots,~a_n~$的前缀$~\text{xor}~$和$~pre_1,~pre_2,~\dots,~pre_n~$，显然如果$~pre_n=0~$则答案不存在，反之存在。再考虑合法集合$~S~$，记$~\alpha_1,~\alpha_2,~\dots,~\alpha_k~$的前缀$~\text{xor}~$和为$~\beta_1,~\beta_2,~\dots,~\beta_k~$，则不难发现$~\bar{S}={\beta_1,~\beta_2,~\dots,~\beta_k}~$也是合法集合。且根据定义$~\beta~$也是$~a~$的前缀$~\text{xor}~$和，所以$~\bar{S}\subseteq{pre_1,~pre_2,~\dots,~pre_n}~$。对于所有正整数，考虑二进制表示的$~01~$向量，可以等价于$~\Bbb{Z}_2~$上的某向量空间的向量，合法集合可以看作是这个向量空间上的一个线性无关组。这是一个线性基问题，答案是包含$~pre~$的最小空间的维数。时间复杂度为$~O(n\log a)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), base;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!a.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; base.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 57 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2057%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2057%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1096" target="_blank" rel="noopener">Educational Codeforces Round 57 (Rated for Div. 2)</a></p><h2 id="A-Find-Divisible"><a href="#A-Find-Divisible" class="headerlink" title="A. Find Divisible"></a>A. Find Divisible</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出任意一组$~(x,~y)\in [l,~r]^2~$满足$~x~$整除$~y~$，保证有解。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="string">' '</span> &lt;&lt; l * <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Substring-Removal"><a href="#B-Substring-Removal" class="headerlink" title="B. Substring Removal"></a>B. Substring Removal</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，询问有多少子串那满足删去子串后剩余部分仅有$~1~$种字母，保证输入串至少含$~2~$种字母。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然剩余的串必须为单字母构成前缀或后缀，或者字母一样的前后缀。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">0</span>; l ^ n &amp;&amp; str[l] == str.front(); ++l);</span><br><span class="line">    <span class="keyword">for</span> (r = n - <span class="number">1</span>; ~r &amp;&amp; str[r] == str.back(); --r);</span><br><span class="line">    <span class="keyword">if</span> (str.front() == str.back()) <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)(l + <span class="number">1</span>) * (n - r) % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; l + n - r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Polygon-for-the-Angle"><a href="#C-Polygon-for-the-Angle" class="headerlink" title="C. Polygon for the Angle"></a>C. Polygon for the Angle</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个在$~1^\circ~$到$~179^\circ~$之间的整数度数，输出最小的$~n~$满足正$~n~$边形上可以取$~3~$个点构成这个角度。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难得出正$~n~$边形可以得到的角度为$~\frac{1}{n}\times180^\circ,~\frac{2}{n}\times180^\circ,~\dots,~\frac{n-2}{n}\times180^\circ~$这一结论。考虑分数$~\frac{ang}{180}~$的最简形式$~\frac{p}{q}~$，答案即为$~q~$或者$~2q~$（如果$~p=q-1~$）。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> ang;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ang;</span><br><span class="line">        <span class="keyword">int</span> gcd = __gcd(ang, <span class="number">180</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gcd + ang ^ <span class="number">180</span> ? <span class="number">180</span> : <span class="number">360</span>) / gcd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Easy-Problem"><a href="#D-Easy-Problem" class="headerlink" title="D. Easy Problem"></a>D. Easy Problem</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个字符串以及删除每个字符的花费$~a_i~$，输出使得字符串不包含$~\text{hard}~$这一子序列的最小删除花费。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。记$~dp[i][j]~$表示考虑到第$~i~$位，已经构成了$~\text{hard}~$前$~j~$个字符的最小花费。从左至右模拟即可，时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; arr : a) <span class="built_in">cin</span> &gt;&gt; arr;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="number">4</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'h'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'a'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">2</span>] = min(dp[i][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'r'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">2</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">3</span>] = min(dp[i][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'d'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i][<span class="number">3</span>] + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(min(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]), min(dp[n][<span class="number">2</span>], dp[n][<span class="number">3</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-The-Top-Scorer"><a href="#E-The-Top-Scorer" class="headerlink" title="E. The Top Scorer"></a>E. The Top Scorer</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~p~$个人比赛，每人都有未知的非负得分$~a_i~$，但总和$~\sum_{i=1}^{p}{a_i}=s~$已知。分数最高的一人获胜，如果最高分有多人同分，则他们的获胜概率均等。现已知$~\text{Hason}~$的分数至少为$~r~$，所有不同的结果出现的概率均等，求他获胜的概率。<br>数据范围$~1\leq p\leq 100,~0\leq r\leq s\leq5000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先将$~\text{Hason}~$的分数和总分数减去$~r~$，那么插板法可以算出所有合法的结果数量为</p><script type="math/tex; mode=display">\binom{p+s-r-1}{p-1}</script><p>接下来枚举$~\text{Hason}~$的得分$~i=r,~r+1,~\dots,~s~$，有$~j=1,~2,~\dots,~\lfloor \frac{s}{i}\rfloor~$人与他同分（算上$~\text{Hason}~$他自己），且其余的得分均小于$~i~$的情况。此时$~\text{Hason}~$获胜的结果数量期望为</p><script type="math/tex; mode=display">\frac{1}{j}\binom{p-1}{p-j}f(p-j,~i,~s-ij)</script><p>其中$~f(x,~y,~z)~$表示$~x~$人得分均小于$~y~$且总和为$~z~$的合法结果数量。对于$~f(x,~y,~z)~$的计算，先考虑在没有$~y~$的限制下，用插板法可以得到答案为$~g(x,~z)=\binom{x+z-1}{x-1}~$。那么将条件变为$~x~$人，至少有$~w~$人得分不少于$~y~$，且总和为$~z~$，则它的结果数量等于$~\binom{x}{w}g(x,~z-wy)~$。于是通过容斥，得到$~f(x,~y,~z)~$的计算式</p><script type="math/tex; mode=display">\begin{aligned}f(x,~y,~z)  &=\sum_{i=0}^{\min(x,~\lfloor\frac{z}{y}\rfloor)}{(-1)^i\binom{x}{i}g(x,~z-iy)}               \\            &=\sum_{i=0}^{\min(x,~\lfloor\frac{z}{y}\rfloor)}{(-1)^i\binom{x}{i}\binom{x+z-iy-1}{x-1}}    \\\end{aligned}</script><p>注意特判$~f(x=0,~y,~z)~$的情况。总时间复杂度为$~O(p^2s)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e3</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(mul(fact[a], finv[b]), finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">binv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(mul(finv[a], fact[b]), fact[a - b]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; up, <span class="keyword">const</span> <span class="keyword">int</span>&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> s == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n &amp;&amp; i * up &lt;= s; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = mul(bino(n + s - i * up - <span class="number">1</span>, n - <span class="number">1</span>), bino(n, i));</span><br><span class="line">ret = i &amp; <span class="number">1</span> ? sub(ret, temp) : add(ret, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p, s, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; s &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt;= s; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p &amp;&amp; i * j &lt;= s; ++j)</span><br><span class="line">cnt = add(cnt, mul(mul(calc(p - j, i, s - i * j), inv[j]), bino(p - <span class="number">1</span>, j - <span class="number">1</span>)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(cnt, binv(p - r + s - <span class="number">1</span>, p - <span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Inversion-Expectation"><a href="#F-Inversion-Expectation" class="headerlink" title="F. Inversion Expectation"></a>F. Inversion Expectation</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个不完整的全排列，输出逆序对期望数。<br>数据范围$~1\leq n\leq 2\cdot10^5~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记总共有$~m~$个未知数，分为$~4~$种情况讨论：</p><ol><li>所有已知数与已知数对于逆序对的贡献。即为计算一个序列的逆序对数量，用排序或者树状数组均可实现，时间复杂度为$~O(n\log n)~$。</li><li>所有未知数与未知数对于逆序对的贡献。对于任意一种可能的未知数的排列，将其翻转后原来的逆序对变为顺序对，顺序对变为逆序对。于是任意一对未出现的数字，在所有可能的排列情况种它们一半为顺序对，一半为逆序对。所以$~m~$个未知数相互之间对于逆序对的贡献期望为$~\binom{m}{2}\frac{m!}{2}~$。</li><li>所有已知数与未知数对于逆序对的贡献。先单独考虑一个已知数$~p_i~$与它左边比它大的未知数对于逆序对的贡献。设它左边有$~left_i~$个未知数，所有未知数种有$~lgreater_{p_i}~$个比$~p_i~$大，那么逆序对的期望则是$~left_i\cdot lgreater_{p_i}\cdot m^{-1}~$。同理对于$~p_i~$与它右边比它小的未知数对于逆序对期望则是$~right_j\cdot rsmaller_{p_j}\cdot m^{-1}~$。这些都可以在线性时间里处理完。<br>总时间复杂度为$~(n\log n)~$。</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], a[maxn], exist[maxn], blank[maxn], bit[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> (~a[i]) &#123;</span><br><span class="line">blank[i] = blank[i - <span class="number">1</span>];</span><br><span class="line">exist[a[i]] = <span class="number">1</span>;</span><br><span class="line">res = add(res, i - cnt - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j; j -= lowbit(j)) res = sub(res, bit[j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt; maxn; j += lowbit(j)) ++bit[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">blank[i] = ++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) exist[i] += exist[i - <span class="number">1</span>];</span><br><span class="line">res = add(res, mul(mul(cnt, cnt - <span class="number">1</span>), inv[<span class="number">4</span>]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (~a[i])</span><br><span class="line">res = add(res, mul(add(mul(blank[i], cnt + exist[a[i]] - a[i]), mul(cnt - blank[i], a[i] - exist[a[i]])), inv[cnt]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Lucky-Tickets"><a href="#G-Lucky-Tickets" class="headerlink" title="G. Lucky Tickets"></a>G. Lucky Tickets</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问有多少个可以首零的$~n~$（偶数）位数字满足前一半的各位数数字之和与后一半的各位数数字之和一样。限定这个数只能由$~d_1,~d_2,~\dots,~d_k~$组成。数据范围$~2\leq n\leq2\cdot10^5,~1\leq k\leq10~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有前$~\frac{n}{2}~$位数加起来可以得到的总和$~s~$，令$~calc(s)~$为所有满足各位数数字之和位$~s~$的合法的$~\frac{n}{2}~$位数的数量，则答案为$~\sum_{s=0}^{5n}calc^2(s)~$。考虑这样一个多项式</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{k}x^{d_i}</script><p>则$~calc(s)~$即为$~f^\frac{n}{2}(x)~$的$~s~$次系数。于是$~\text{NTT}~$即可得出答案。时间复杂度$~O(n\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) n = (<span class="number">2L</span>L - mod) * n % (mod - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">to_pow2</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;<span class="keyword">while</span> (x ^ lowbit(x)) x += lowbit(x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bit_reverse</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = size &gt;&gt; <span class="number">1</span>; i ^ size - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) swap(f[i], f[j]);</span><br><span class="line"><span class="keyword">int</span> k = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= k) &#123;</span><br><span class="line">j -= k;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &lt; k) j += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> size, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">bit_reverse(f, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= size; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> wn = fpow(root, op * (<span class="number">1</span> - mod) / i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; j += i) &#123;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k ^ j + (i &gt;&gt; <span class="number">1</span>); ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> u = f[k];</span><br><span class="line"><span class="keyword">int</span> v = mul(w, f[k + (i &gt;&gt; <span class="number">1</span>)]);</span><br><span class="line">f[k] = add(u, v);</span><br><span class="line">f[k + (i &gt;&gt; <span class="number">1</span>)] = sub(u, v);</span><br><span class="line">w = mul(w, wn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~op) &#123;</span><br><span class="line"><span class="keyword">int</span> inv = fpow(size, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) f[i] = mul(f[i], inv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">f[d] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = n * <span class="number">5</span>;</span><br><span class="line">to_pow2(size);</span><br><span class="line">ntt(f, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) f[i] = fpow(f[i], n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">ntt(f, size, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) res = add(res, mul(f[i], f[i]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 56 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2056%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2056%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1093" target="_blank" rel="noopener">Educational Codeforces Round 56 (Rated for Div. 2)</a></p><h2 id="A-Dice-Rolling"><a href="#A-Dice-Rolling" class="headerlink" title="A. Dice Rolling"></a>A. Dice Rolling</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个点数为$~2~$至$~7~$的骰子，求任意一种可能的次数使得点数之和为$~x~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Letters-Rearranging"><a href="#B-Letters-Rearranging" class="headerlink" title="B. Letters Rearranging"></a>B. Letters Rearranging</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个小写字母串，输出任意一种不回文重排列。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。排序即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        sort(str.begin(), str.end());</span><br><span class="line">        <span class="keyword">if</span> (str.front() == str.back()) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Mishka-and-the-Last-Exam"><a href="#C-Mishka-and-the-Last-Exam" class="headerlink" title="C. Mishka and the Last Exam"></a>C. Mishka and the Last Exam</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出一个长度为$~n~$的数列${a_n}$满足对称位之差为给定的数列$~{b_\frac{n}{2}}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。从数列边缘向内部贪心，左边尽量小，右边尽量大。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; left(n), right(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">        right[i] = b - (left[i] = (i ? max(left[i - <span class="number">1</span>], b - right[i - <span class="number">1</span>]) : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> res : left) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> last = right.front();</span><br><span class="line">    reverse(right.begin(), right.end());</span><br><span class="line">    right.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> res : right) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; last &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Beautiful-Graph"><a href="#D-Beautiful-Graph" class="headerlink" title="D. Beautiful Graph"></a>D. Beautiful Graph</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个简单图（无重边无自环可能不连通），求点的$~{1,~2,~3}~$染色方案数，使得每条边两边加起来是奇数。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑染色的奇偶性，显然对于每个点，它相邻的点均与它奇偶性不同。所以如果存在奇环，则答案为$~0~$。跑一遍$~\text{DFS}~$然后对于每个联通块的方案数乘起来即是答案。时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> two[maxn], color[maxn], cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    ++cnt[color[u] = c];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) flag &amp;= (color[u] ^ color[v]);</span><br><span class="line">        <span class="keyword">else</span> dfs(v, !c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) two[i] = add(two[i - <span class="number">1</span>], two[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) adj[i].clear();</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            adj[u].push_back(v);</span><br><span class="line">            adj[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis + <span class="number">1</span>, <span class="number">0</span>, n * <span class="keyword">sizeof</span> (<span class="keyword">bool</span>));</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            dfs(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) res = mul(res, add(two[cnt[<span class="number">0</span>]], two[cnt[<span class="number">1</span>]]));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (flag ? res : <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Intersection-of-Permutations"><a href="#E-Intersection-of-Permutations" class="headerlink" title="E. Intersection of Permutations"></a>E. Intersection of Permutations</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~1,~\dots,~n~$的两个全排列$~a~$和$~b~$，和$~q~$个查询或修改操作。查询操作给出$~l_a,~r_a,~l_b,~r_b~$，输出$~a_{[l_a,~r_a]}~$和$~b_{[l_b,~r_b]}~$之间相同同的数字个数。修改操作给出$~x~$和$~y~$，交换$~b_x~$和$~b_y~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>应为$~a~$不会被修改，那么做置换使得$~a_i=i~$，这样对于询问操作，只要输出$~[l_a,~r_a]~$在$~b_{[l_b,~r_b]}~$中出现的次数。考虑二维坐标系上的$~n~$个点$~(b_i,~i),~i=1,~2,~\dots,~n~$，查询操作等价于输出$~[la,~ra]\times[lb,~rb]~$内的点的个数；修改操作等价于将$~(b_x,~x)~$和$~(b_y,~y)~$变为$~(b_y,~x)~$和$~(b_x,~y)~$。用树状数组维护$~\text{treap}~$即可，时间复杂度为$~O(n\log^2n)~$。由于我不会写$~\text{treap}~$，所以使用了$~\text{pb_ds}~$库，常数比较大。</p><h3 id="代码（使用-text-pb-ds-库）"><a href="#代码（使用-text-pb-ds-库）" class="headerlink" title="代码（使用$~\text{pb_ds}~$库）"></a><strong>代码（使用$~\text{pb_ds}~$库）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line">tree&lt;<span class="keyword">int</span>, null_type, less&lt;<span class="keyword">int</span>&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; bit[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">a[in] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">b[i] = a[in];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += lowbit(j)) bit[j].insert(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> la, ra, lb, rb;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; la &gt;&gt; ra &gt;&gt; lb &gt;&gt; rb;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = rb; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(ra);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res += bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res += bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = rb; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(la - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res -= bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res -= bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lb - <span class="number">1</span>; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(ra);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res -= bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res -= bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lb - <span class="number">1</span>; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(la - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res += bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res += bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) bit[i].erase(b[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= n; i += lowbit(i)) bit[i].erase(b[y]);</span><br><span class="line">swap(b[x], b[y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) bit[i].insert(b[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= n; i += lowbit(i)) bit[i].insert(b[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Vasya-and-Array"><a href="#F-Vasya-and-Array" class="headerlink" title="F. Vasya and Array"></a>F. Vasya and Array</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个长度为$~n~$的数列由$~1,~\dots,~k~$组成，部分位置的值已给定。求有多少个数列满足所有长度为$~len~$的区间内至少由$~2~$种不同的数字。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划，有点复杂。记$~pre[i][j]~$为区间$~[1,~i]~$中至多有多少$~j~$，从而计算$~fuck[i][j]~$，表示区间$~(i-len,~i]~$是否有可能全部为$~j~$。记$~dp[i][j][0/1]~$为区间$~[1,~i]~$上满足$~a[i]=j~$的合法或非法数量，记求和$~sum[i][0/1]=\sum_{j=1}^k{dp[i][j][0/1]}~$以及$~cnt[i]=sum[i][0]+sum[i][1]~$。于是有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j][0] &=sum[i-1][0]+\begin{cases}sum[i-len][1]-dp[i-len][j][1]   &\text{$flag[i][j]$}                \\0                               &\text{$!flag[i][j]$}\end{cases}    \\dp[i][j][1] &=cnt[i-1]-dp[i][j][0]                                  \\\end{aligned}</script><p>所有的状态转移都是$~O(1)~$的，所以时间复杂度与空间复杂度均为$~O(nk)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], pre[maxn][maxk], cnt[maxn], sum[maxn][<span class="number">2</span>], dp[maxn][maxk][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> fuck[maxn][maxk];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, len;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (~a[i]) pre[i][a[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) pre[i][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">        pre[i][j] += pre[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= len &amp;&amp; pre[i][j] - pre[i - len][j] == len) fuck[i][j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~a[<span class="number">1</span>]) &#123;</span><br><span class="line">        cnt[<span class="number">1</span>] = sum[<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][a[<span class="number">1</span>]][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) dp[<span class="number">1</span>][i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="number">1</span>] = sum[<span class="number">1</span>][<span class="number">1</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (~a[i]) &#123;</span><br><span class="line">            cnt[i] = cnt[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][a[i]][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (fuck[i][a[i]])</span><br><span class="line">                dp[i][a[i]][<span class="number">0</span>] = add(dp[i][a[i]][<span class="number">0</span>], sub(sum[i - len][<span class="number">1</span>], dp[i - len][a[i]][<span class="number">1</span>]));</span><br><span class="line">            dp[i][a[i]][<span class="number">1</span>] = sum[i][<span class="number">1</span>] = sub(cnt[i], sum[i][<span class="number">0</span>] = dp[i][a[i]][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (fuck[i][j])</span><br><span class="line">                    dp[i][j][<span class="number">0</span>] = add(dp[i][j][<span class="number">0</span>], sub(sum[i - len][<span class="number">1</span>], dp[i - len][j][<span class="number">1</span>]));</span><br><span class="line">                sum[i][<span class="number">0</span>] = add(sum[i][<span class="number">0</span>], dp[i][j][<span class="number">0</span>]);</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = sub(cnt[i - <span class="number">1</span>], dp[i][j][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            sum[i][<span class="number">1</span>] = sub(cnt[i] = mul(cnt[i - <span class="number">1</span>], k), sum[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum[n][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Multidimensional-Queries"><a href="#G-Multidimensional-Queries" class="headerlink" title="G. Multidimensional Queries"></a>G. Multidimensional Queries</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~k~$维空间的$~n~$个点，和$~q~$次修改或查询操作。修改为重新赋值第$~i~$个点，查询为区间$~[l,~r]~$的最大曼哈顿距离。<br>数据范围$~1\leq n\leq2\times10^5,~1\leq k\leq5,~1\leq q\leq2\times10^5,~-10^6\leq a_{ij}\leq10^6,~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑曼哈顿距离公式</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{k}\mid a_{xi}-a_{yi}\mid    &=\max\sum_{i=1}^{k}c_i(a_{xi}-a_{yi})                                                      \\                                        &=\max\left(\sum_{i=1}^{k}c_i a_{xi}-\sum_{i=1}^{k}c_i a_{xi}\right)  \\c_i                                     &=\pm1                                                                                      \\\end{aligned}</script><p>注意到$~k~$的数据范围很小，上式的系数列的取法共$~2^k~$种，那么建立$~2^{k+1}~$棵线段树维护$~\sum_{i=1}^{k}c_i a_{xi}~$的最大最小值即可。时间复杂度为$~O((n+q)2^k\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> size, seg[maxn &lt;&lt; <span class="number">2</span>][<span class="number">32</span>][<span class="number">2</span>], a[maxn][<span class="number">32</span>], b[<span class="number">5</span>], idx[maxn], cal[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i)</span><br><span class="line">seg[index][i][<span class="number">0</span>] = seg[index][i][<span class="number">1</span>] = a[begin][i];</span><br><span class="line">idx[begin] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(begin, mid, index &lt;&lt; <span class="number">1</span>);</span><br><span class="line">build(mid + <span class="number">1</span>, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">seg[index][i][<span class="number">0</span>] = min(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">0</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">0</span>]);</span><br><span class="line">seg[index][i][<span class="number">1</span>] = max(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">1</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = idx[pos];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i)</span><br><span class="line">seg[index][i][<span class="number">0</span>] = seg[index][i][<span class="number">1</span>] = a[pos][i];</span><br><span class="line"><span class="keyword">while</span> (index ^ <span class="number">1</span>) &#123;</span><br><span class="line">index &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">seg[index][i][<span class="number">0</span>] = min(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">0</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">0</span>]);</span><br><span class="line">seg[index][i][<span class="number">1</span>] = max(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">1</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">cal[i][<span class="number">0</span>] = min(cal[i][<span class="number">0</span>], seg[index][i][<span class="number">0</span>]);</span><br><span class="line">cal[i][<span class="number">1</span>] = max(cal[i][<span class="number">1</span>], seg[index][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (mid &gt;= l) push_down(begin, mid, index &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (mid &lt; r) push_down(mid + <span class="number">1</span>, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">size = <span class="number">1</span> &lt;&lt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ k; ++j) <span class="built_in">cin</span> &gt;&gt; b[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">1</span> &lt;&lt; k; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l ^ k; ++l)</span><br><span class="line">j &amp; (<span class="number">1</span> &lt;&lt; l) ? a[i][j] += b[l] : a[i][j] -= b[l];</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="built_in">memset</span>(a[pos], <span class="number">0</span>, size * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ k; ++j)</span><br><span class="line">i &amp; (<span class="number">1</span> &lt;&lt; j) ? a[pos][i] += b[j] : a[pos][i] -= b[j];</span><br><span class="line">push_up(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) cal[i][<span class="number">0</span>] = ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>), cal[i][<span class="number">1</span>] = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">push_down(<span class="number">1</span>, n, <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) res = max(res, cal[i][<span class="number">1</span>] - cal[i][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 532 (Div. 2)</title>
      <link href="/2019/01/17/Codeforces%20Round%20532%20(Div.%202)/"/>
      <url>/2019/01/17/Codeforces%20Round%20532%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1100" target="_blank" rel="noopener">Codeforces Round #532 (Div. 2)</a></p><h2 id="A-Roman-and-Browser"><a href="#A-Roman-and-Browser" class="headerlink" title="A. Roman and Browser"></a>A. Roman and Browser</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的$~\pm1~$串，在不考虑所有角标模$~k~$结果一样的位置上的值，问剩下的和的绝对值的最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b(k, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> sum = accumulate(a.begin(), a.end(), <span class="number">0</span>), res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) b[i % k] += a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : b) res = max(res, <span class="built_in">abs</span>(sum - x));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Build-a-Contest"><a href="#B-Build-a-Contest" class="headerlink" title="B. Build a Contest"></a>B. Build a Contest</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在可重集合里加入$~m~$个数字，每次加入时如果集合里$~1,~2,~\dots,~n~$都至少有$~1~$个，则都删去$~1~$个然后输出$~1~$，否则输出$~0~$。<br>数据范围$~1\leq n,~m\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接暴力地维护这个集合时间复杂度为$~O(nm)~$显然会$~\text{TLE}~$。不做删除操作，而是开$~2~$个数组维护集合：数组$~tot[i]~$表示有多少种数字在集合里至少有$~i~$个；数组$~cnt[i]~$表示数字$~i~$在集合里出现的次数。那么每加入一个数字$~a~$则更新$~cnt[a]~$和$~tot[cnt[a]]~$，输出$~1~$当且仅当$~tot[cnt[a]]=n~$。总时间复杂度为$~O(m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot(m, <span class="number">0</span>), cnt(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++tot[cnt[a - <span class="number">1</span>]++];</span><br><span class="line"><span class="keyword">if</span> (tot[now] == n) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">++now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-NN-and-the-Optical-Illusion"><a href="#C-NN-and-the-Optical-Illusion" class="headerlink" title="C. NN and the Optical Illusion"></a>C. NN and the Optical Illusion</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个中心圆和$~n~$个外圆外切，外圆半径一样且外切构成一个环，给出中心圆半径$~r~$，输出外圆半径$~R~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平面几何。答案是$~\frac{r}{\csc\frac{\pi}{n}-1}~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> n, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.7f\n"</span>, r / (<span class="number">1</span> / <span class="built_in">sin</span>(<span class="built_in">acos</span>(<span class="number">-1</span>) / n) - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Dasha-and-Chess"><a href="#D-Dasha-and-Chess" class="headerlink" title="D. Dasha and Chess"></a>D. Dasha and Chess</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。初始在$~999\times999~$的国际象棋棋盘上有$~\text{NN}~$的$~1~$个$~\text{king}~$和$~\text{Dasha}~$的$~666~$个$~\text{rook}~$。由$~\text{NN}~$先走，规则和国际象棋的$~\text{king}~$一样但是不能走到任意一个$~\text{rook}~$所在的位置上（不能不动）。如果$~\text{NN}~$走完后按国际象棋规则被将军，则获胜。这里的$~\text{rook}~$的规则是任意闪现到空的位置上且不能将军（可以不动）。要求不能超过$~2000~$回合，否则$~\text{NN}~$失败。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>别问为什么，先让$~\text{king}~$走到中心点$~(500,~500)~$。根据抽屉原理，四个角落必有一角落的$~\text{rook}~$数量不超过$~166~$，于是在某两个方向上的$~\text{rook}~$数量之和至少是$~500~$，走斜线必然胜利。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1</span> &lt;&lt; <span class="number">10</span>][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; chess[<span class="number">667</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">vis[chess-&gt;first][chess-&gt;second] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[chess-&gt;first + x][chess-&gt;second + y])</span><br><span class="line">vis[chess-&gt;first][chess-&gt;second += y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">vis[chess-&gt;first += x][chess-&gt;second += y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; chess-&gt;first &lt;&lt; <span class="string">' '</span> &lt;&lt; chess-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (!~k) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">vis[chess[k].first][chess[k].second] = <span class="literal">false</span>;</span><br><span class="line">vis[chess[k].first = x][chess[k].second = y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">667</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; chess[i].first &gt;&gt; chess[i].second;</span><br><span class="line">vis[chess[i].first][chess[i].second] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;first &lt; <span class="number">500</span>) query(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;first &gt; <span class="number">500</span>) query(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;second &lt; <span class="number">500</span>) query(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;second &gt; <span class="number">500</span>) query(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> up_left = <span class="number">0</span>, down_left = <span class="number">0</span>, up_right = <span class="number">0</span>, down_right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">1000</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j ^ <span class="number">1000</span>; ++j) <span class="keyword">if</span> (vis[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">500</span> &amp;&amp; j &lt; <span class="number">500</span>) ++up_left;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">500</span> &amp;&amp; j &lt; <span class="number">500</span>) ++down_left;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">500</span> &amp;&amp; j &gt; <span class="number">500</span>) ++up_right;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">500</span> &amp;&amp; j &gt; <span class="number">500</span>) ++down_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn = min(min(up_left, down_left), min(up_right, down_right));</span><br><span class="line"><span class="keyword">if</span> (minn == up_left) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == down_left) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == up_right) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == down_right) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Andrew-and-Taxi"><a href="#E-Andrew-and-Taxi" class="headerlink" title="E. Andrew and Taxi"></a>E. Andrew and Taxi</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个$~n~$个点$~m~$条边的无自环带边权有向图，通过将边的方向翻转使得新图是一个$~\text{DAG}~$。问所有翻转的边的边权的最大值最小是多少。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对答案二分，那么所有当前二分值以下的边都可以选择翻转或者不翻转。这时如果存在一种变为$~\text{DAG}~$的翻转方式，当且仅当将所有二分值以下的边删除之后的图是$~\text{DAG}~$。判断是否有环即可，由于还需要输出翻转的方案，所以用拓扑排序。总时间复杂度为$~O((n+m)\log c)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, deg[maxn], topo[maxn];</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo_sort</span><span class="params">(<span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="keyword">sizeof</span> (deg));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) adj[i].clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (edge[i].second &gt; lim) &#123;</span><br><span class="line">adj[edge[i].first.first].push_back(edge[i].first.second);</span><br><span class="line">++deg[edge[i].first.second];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (!deg[i]) que.push(i);</span><br><span class="line"><span class="keyword">int</span> rk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line">topo[u] = rk++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!--deg[v]) que.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rk == maxn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; edge[i].first.first &gt;&gt; edge[i].first.second &gt;&gt; edge[i].second;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">-1</span>, r = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (topo_sort(m)) r = m;</span><br><span class="line"><span class="keyword">else</span> l = m;</span><br><span class="line">&#125;</span><br><span class="line">topo_sort(r);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="keyword">if</span> (topo[edge[i].first.first] &gt; topo[edge[i].first.second])</span><br><span class="line">res.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="string">' '</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> out : res) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out;</span><br><span class="line">out == res.back() ? <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Ivan-and-Burgers"><a href="#F-Ivan-and-Burgers" class="headerlink" title="F. Ivan and Burgers"></a>F. Ivan and Burgers</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定数列$~c_1,~c_2,~\dots,~c_n~$和$~q~$次询问，问在$~c_l,~c_{l+1},~\dots,~c_r~$中取若干个数所得到的最大$~\text{xor}~$和。<br>数据范围$~1\leq n,~q\leq5\cdot10^5,~0\leq c\leq10^6~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然是个线性基问题，可以用线段树维护，但是递归写法的线段树常数很大会$~\text{TLE}~$，所以选择常数小的$~\text{CDQ}~$分治写法。总时间复杂度为$~O((n+q)\log n\log c)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; base;</span><br><span class="line">Vec() &#123;base.clear();&#125;</span><br><span class="line">Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec) &#123;base = vec;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">auto</span> v : vec.base) push(v);&#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="function">Vec <span class="title">ret</span><span class="params">(base)</span></span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;base.clear();&#125;</span><br><span class="line">&#125;res[maxn], vec[maxn], tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">auto</span>&amp; que,<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) res[i].push(c[l]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= l; --i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].second &lt;= m)</span><br><span class="line">left.push_back(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (seg[i].first &gt; m)</span><br><span class="line">right.push_back(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res[i] = vec[seg[i].first] + vec[seg[i].second];</span><br><span class="line">&#125;</span><br><span class="line">que.clear();</span><br><span class="line">cdq(left, l, m);</span><br><span class="line">cdq(right, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; que(q);</span><br><span class="line">iota(que.begin(), que.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">cdq(que, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i].max() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 530 (Div. 2)</title>
      <link href="/2019/01/17/Codeforces%20Round%20530%20(Div.%202)/"/>
      <url>/2019/01/17/Codeforces%20Round%20530%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1099" target="_blank" rel="noopener">Codeforces Round #530 (Div. 2)</a></p><h2 id="A-Snowball"><a href="#A-Snowball" class="headerlink" title="A. Snowball"></a>A. Snowball</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>山坡滚雪球，每秒雪球会增加当前高度的质量然后下落$~1~$米。有$~2~$个石头，每撞一次减少对应的质量最小变为$~0~$。输雪球滚到坡底的质量。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w, h, u1, d1, u2, d2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; u1 &gt;&gt; d1 &gt;&gt; u2 &gt;&gt; d2;</span><br><span class="line"><span class="keyword">if</span> (d1 &lt; d2) &#123;</span><br><span class="line">swap(u1, u2);</span><br><span class="line">swap(d1, d2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &gt;= d1; --i) w += i;</span><br><span class="line">w = max(<span class="number">0</span>, w - u1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d1 - <span class="number">1</span>; i &gt;= d2; --i) w += i;</span><br><span class="line">w = max(<span class="number">0</span>, w - u2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d2 - <span class="number">1</span>; i; --i) w += i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Squares-and-Segments"><a href="#B-Squares-and-Segments" class="headerlink" title="B. Squares and Segments"></a>B. Squares and Segments</h2><p>要画$~n~$个$~1\times1~$的正方形格子，每一笔的长度只能为$~1~$。对于以画出的横（竖）的的线段，可以垂直（水平）地平移复制。问至少要画多少不复制的线段。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>即输出$~\min(a+b),~ab\geq n~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">if</span> (sqr * sqr == n) <span class="built_in">cout</span> &lt;&lt; (sqr &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqr * sqr + sqr &gt;= n) <span class="built_in">cout</span> &lt;&lt; (sqr &lt;&lt; <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (sqr + <span class="number">1</span> &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Postcard"><a href="#C-Postcard" class="headerlink" title="C. Postcard"></a>C. Postcard</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个小写字母和?*组成的字符串。字符?代表前一个字母可以删除或保留，字符*代表前一个字母可以删除或保留或重复若干次。输出任意由它生成的长度为$~k~$的字符串或不存在。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接模拟。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'?'</span>) ++cnt;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span>) ++tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k &lt; str.size() - (cnt + tot &lt;&lt; <span class="number">1</span>) || !tot &amp;&amp; k &gt; str.size() - cnt)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line"><span class="keyword">int</span> rem = k - str.size() + cnt + tot;</span><br><span class="line"><span class="keyword">if</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) res.push_back(ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span> &amp;&amp; flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (rem--) res.push_back(res.back());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) &#123;</span><br><span class="line">res.push_back(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rem) &#123;</span><br><span class="line">res.pop_back();</span><br><span class="line">++rem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sum-in-the-tree"><a href="#D-Sum-in-the-tree" class="headerlink" title="D. Sum in the tree"></a>D. Sum in the tree</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一颗非负点权树，根的深度为$~1~$。给出根到所有奇数深度的点的链上的点权值之和$~s_u=\sum_{v\in L(1,~u)}a_v,~2\nmid dep_u~$。输出最小的可能的点权之和$~\sum_{i=1}^{n}a_i~$或不存在。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于偶数度数的点的$~s_u~$值，取所有儿子的最大值，再和它的父亲比较合法性即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; son(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">if</span> (~s[i] &amp;&amp; i ^ <span class="number">1</span> &amp;&amp; s[i] &lt; s[p[p[i]]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) que.push(v);</span><br><span class="line"><span class="keyword">if</span> (!~s[u]) &#123;</span><br><span class="line">s[u] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) s[u] = min(s[u], s[v]);</span><br><span class="line"><span class="keyword">if</span> (s[u] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) s[u] = s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line">res += s[u] - s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Nice-table"><a href="#E-Nice-table" class="headerlink" title="E. Nice table"></a>E. Nice table</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个由$~\text{ATCG}~$组成的字母矩阵，输出一个同样大小的的字母矩阵满足所有$~2\times2~$均由$~\text{ATCG}~$组成，且使的两矩阵尽量相同。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于任意的合法矩阵，若第$~1~$行的字母超过$~2~$个，则不难推断出每列均由$~2~$个字母组成且奇偶性相同的列所用的字母组成一样。于是合法矩阵必满足每行（或列）均由$~2~$个字母组成，且相同的行（或列）所用的字母组成一样。枚举头$~2~$个字母组成的所有情况即可。考验代码能力。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ch&#123;<span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">4</span>);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> res, str, tmp(n * m, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n * m; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">str += ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> same = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(j ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(i ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (next_permutation(p.begin(), p.end()));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="built_in">cout</span> &lt;&lt; res[i * m + j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Cookies"><a href="#F-Cookies" class="headerlink" title="F. Cookies"></a>F. Cookies</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一颗大小为$~n~$的树，根为$~1~$，每个节点上$~i~$有$~x_i~$个饼干，每个饼干要花费$~t_i~$的时间吃掉，经过连接节点$~u\neq1~$和它父亲的边的时间花费为$~l_u~$。游戏开始前$~\text{Mitya}~$在根节点，每一回合$~\text{Mitya}~$走向当前节点的某一儿子，然后$~\text{Vasya}~$剪去$~\text{Mitya}~$所在节点与某一儿子的路径。当$~\text{Mitya}~$选择结束时他必须通过简单路径走回根节点，过程中可以吃路上的饼干。在总时间花费不超过$~T~$的条件下，问$~\text{Mitya}~$最多能吃多少饼干。<br>数据范围$~2\leq n\leq10^5,~1\leq T\leq10^{18},~1\leq x_i\leq10^6,~1\leq t_i\leq10^6,~0\leq l_i\leq10^9~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先不考虑$~\text{Vasya}~$的选择。对于每个节点$~u~$，计算它到根节点的路径上$~\text{Mitya}~$最多能吃到的饼干数量$~cal_u~$。显然为了最大化$~cal_u~$，必须先吃路径上花费时间少的饼干。注意到$~t~$的数据范围，那么可以在$~\text{dfs}~$过程中维护节点$~u~$到根节点的$~L(u,~1)~$这条路径上单位时间花费为$~t~$的饼干数量$~cnt_t~$。于是当前节点的答案就是在$~T-2\sum_v l_v,~v\in L(u,~1)~$的范围内最大化$~cnt~$的前缀和。这个过程可以用二分树状数组，线段树二分，或者树状数组二分来维护。<br>在计算出所有的$~cal_i,~1\leq i\leq n~$之后，考虑终点在节点$~u~$的子树上时的答案$~res_u~$。若$~u~$为叶节点，则$~res_u=cal_u~$。若$~u~$为非根非叶节点，考虑到$~\text{Vasya}~$的存在，则$~res_u=\max(cal_u,~res_v)~$，其中$~res_v~$为$~u~$的所有儿子的次大$~res~$值给根节点$~1~$增加一个$~cal=\inf~$的儿子，则可以$~\text{DFS}~$线性地计算出最终答案$~res_1~$。总时间复杂度为：二分树状数组$~O(n\log^2n)~$，线段树二分$~O(n\log n)~$，树状数组二分$~O(n\log n)~$。据说我的树状数组二分写法就是$~\text{zkw}~$，但是由于$~\text{Codeforces}~$的玄学优化，上面$~3~$种数据结构速度基本一样。。。</p><h3 id="代码（二分树状数组-O-n-log-2n-）"><a href="#代码（二分树状数组-O-n-log-2n-）" class="headerlink" title="代码（二分树状数组$~O(n\log^2n)~$）"></a><strong>代码（二分树状数组$~O(n\log^2n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], cut[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], bit1[maxt], bit2[maxt];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line">rem -= l[u] &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] += x[u], bit2[i] += x[u] * t[u];</span><br><span class="line"><span class="keyword">if</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = maxt - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r; i; i -= lowbit(i)) cal[u] += bit1[i], sum += bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt; rem) &#123;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i; i -= lowbit(i)) sum += bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt; rem) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line">cal[u] = sum =  <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i; i -= lowbit(i)) cal[u] += bit1[i], sum += bit2[i];</span><br><span class="line">cal[u] += (rem - sum) / r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] -= x[u], bit2[i] -= x[u] * t[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（线段树二分-O-n-log-n-）"><a href="#代码（线段树二分-O-n-log-n-）" class="headerlink" title="代码（线段树二分$~O(n\log n)~$）"></a><strong>代码（线段树二分$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], seg1[maxt &lt;&lt; <span class="number">2</span>], seg2[maxt &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">long</span> <span class="keyword">long</span> del)</span> </span>&#123;</span><br><span class="line">seg1[index] += del;</span><br><span class="line">seg2[index] += del * pos;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; mid) push_up(mid, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, pos, del);</span><br><span class="line"><span class="keyword">else</span> push_up(begin, mid, index &lt;&lt; <span class="number">1</span>, pos, del);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span> min(rem / end, seg1[index]);</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> rem &lt; seg2[index &lt;&lt; <span class="number">1</span>]</span><br><span class="line">? push_down(begin, mid, index &lt;&lt; <span class="number">1</span>, rem)</span><br><span class="line">: seg1[index &lt;&lt; <span class="number">1</span>] + push_down(mid, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, rem - seg2[index &lt;&lt; <span class="number">1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line">push_up(<span class="number">0</span>, maxt, <span class="number">1</span>, t[u], x[u]);</span><br><span class="line"><span class="keyword">if</span> ((rem -= l[u] &lt;&lt; <span class="number">1</span>) &gt; <span class="number">0</span>) cal[u] = push_down(<span class="number">0</span>, maxt, <span class="number">1</span>, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line">push_up(<span class="number">0</span>, maxt, <span class="number">1</span>, t[u], -x[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（树状数组二分-O-n-log-n-）"><a href="#代码（树状数组二分-O-n-log-n-）" class="headerlink" title="代码（树状数组二分$~O(n\log n)~$）"></a><strong>代码（树状数组二分$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], cut[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], bit1[maxt + <span class="number">1</span>], bit2[maxt + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] += x[u], bit2[i] += x[u] * t[u];</span><br><span class="line"><span class="keyword">int</span> now = maxt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = (rem -= l[u] &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxt, j = <span class="number">0</span>; rem &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">cal[u] += j &amp; <span class="number">1</span> ? min(temp / (j + <span class="number">1</span>), bit1[j + <span class="number">1</span>] - bit1[j]) : min(temp / (j ^ <span class="number">1</span>), bit1[j ^ <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; bit2[i &gt;&gt; <span class="number">1</span> ^ j]) &#123;</span><br><span class="line">cal[u] += bit1[i &gt;&gt; <span class="number">1</span> ^ j];</span><br><span class="line">temp -= bit2[i &gt;&gt; <span class="number">1</span> ^ j];</span><br><span class="line">j ^= i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] -= x[u], bit2[i] -= x[u] * t[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 530 (Div. 1) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20530%20(Div.%201)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20530%20(Div.%201)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1098" target="_blank" rel="noopener">Codeforces Round #530 (Div. 1)</a></p><h2 id="A-Sum-in-the-tree"><a href="#A-Sum-in-the-tree" class="headerlink" title="A. Sum in the tree"></a>A. Sum in the tree</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一颗非负点权树，根的深度为$~1~$。给出根到所有奇数深度的点的链上的点权值之和$~s_u=\sum_{v\in L(1,~u)}a_v,~2\nmid dep_u~$。输出最小的可能的点权之和$~\sum_{i=1}^{n}a_i~$或不存在。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于偶数度数的点的$~s_u~$值，取所有儿子的最大值，再和它的父亲比较合法性即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; son(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">if</span> (~s[i] &amp;&amp; i ^ <span class="number">1</span> &amp;&amp; s[i] &lt; s[p[p[i]]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) que.push(v);</span><br><span class="line"><span class="keyword">if</span> (!~s[u]) &#123;</span><br><span class="line">s[u] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) s[u] = min(s[u], s[v]);</span><br><span class="line"><span class="keyword">if</span> (s[u] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) s[u] = s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line">res += s[u] - s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nice-table"><a href="#B-Nice-table" class="headerlink" title="B. Nice table"></a>B. Nice table</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个由$~\text{ATCG}~$组成的字母矩阵，输出一个同样大小的的字母矩阵满足所有$~2\times2~$均由$~\text{ATCG}~$组成，且使的两矩阵尽量相同。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于任意的合法矩阵，若第$~1~$行的字母超过$~2~$个，则不难推断出每列均由$~2~$个字母组成且奇偶性相同的列所用的字母组成一样。于是合法矩阵必满足每行（或列）均由$~2~$个字母组成，且相同的行（或列）所用的字母组成一样。枚举头$~2~$个字母组成的所有情况即可。考验代码能力。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ch&#123;<span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">4</span>);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> res, str, tmp(n * m, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n * m; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">str += ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> same = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(j ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(i ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (next_permutation(p.begin(), p.end()));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="built_in">cout</span> &lt;&lt; res[i * m + j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Construct-a-tree"><a href="#C-Construct-a-tree" class="headerlink" title="C. Construct a tree"></a>C. Construct a tree</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个数$~n~$和$~s~$，输出一个大小为$~n~$的树满足所有子树的大小之和为$~s~$或不存在，若存在输出的树必须满足最大分叉$~k~$尽量小。<br>数据范围$~2\leq n\leq10^5,~1\leq s\leq10^{10}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有节点$~u~$对于$~s~$的贡献，当且仅当子树的根$~v~$为$~u~$的祖先时，$~u~$才会对答案贡献$~1~$。所以$~s=\sum_{i=1}^{n}dep_i\in[2n-1,~\frac{n(n+1)}{2}]~$。对于$~k~$叉树，$~s~$值的下限随着$~k~$增大减小。所以考虑二分，可以得出最小的$~k~$值。先构造出最小的$~k-1~$叉树，然后移动深的点即可。时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn], lim[maxn], dep[maxn], sta[maxn], son[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * n * (n + <span class="number">1</span>) &lt; s &lt;&lt; <span class="number">1</span> || n &lt;&lt; <span class="number">1</span> &gt; s + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * n * (n + <span class="number">1</span>) == s &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> rem = n - <span class="number">1</span>, cnt = <span class="number">1</span>, cal = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; rem; ++i) &#123;</span><br><span class="line">cnt *= m;</span><br><span class="line"><span class="keyword">if</span> (rem &lt; cnt) cal += rem * i, rem = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> cal += cnt * i, rem -= cnt;</span><br><span class="line">&#125;</span><br><span class="line">cal &gt; s ? (l = m) : (r = m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> right = r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> flr = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, tot = <span class="number">0</span>; tot ^ n; ++i, flr *= l) &#123;</span><br><span class="line"><span class="keyword">if</span> (tot + flr &gt; n) num[i] = n - tot, tot = n;</span><br><span class="line"><span class="keyword">else</span> num[i] = flr, tot += flr;</span><br><span class="line">&#125;</span><br><span class="line">lim[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="number">1L</span>L * lim[i] * r &lt; n &lt;&lt; <span class="number">1</span>; ++i) lim[i + <span class="number">1</span>] = lim[i] * r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (r = <span class="number">1</span>; num[r]; ++r) cnt += <span class="number">1L</span>L * r * num[r];</span><br><span class="line">l = <span class="number">2</span>;</span><br><span class="line">cnt -= s;</span><br><span class="line"><span class="keyword">while</span> (cnt) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[l] == lim[l]) ++l;</span><br><span class="line"><span class="keyword">if</span> (!num[r]) --r;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt; r - l) &#123;</span><br><span class="line">--num[r];</span><br><span class="line">++num[r - cnt];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">--num[r];</span><br><span class="line">++num[l];</span><br><span class="line">cnt += l - r;</span><br><span class="line">&#125;</span><br><span class="line">sta[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, d = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dep[i] = d;</span><br><span class="line"><span class="keyword">if</span> (!--num[d]) sta[++d] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sta[dep[i] - <span class="number">1</span>] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (++son[sta[dep[i] - <span class="number">1</span>]] == right) ++sta[dep[i] - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sta[dep[n] - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Eels"><a href="#D-Eels" class="headerlink" title="D. Eels"></a>D. Eels</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p><del>大鱼吃小鱼，小鱼吃虾米。</del>鱼缸里如果有$~n~$条鱼，则会发生$~n-1~$次生死$~\text{solo}~$，最终一人吃鸡。小鱼被大鱼吃掉后质量也送给了大鱼，类似于球球大作战。定义质量为$~a\leq b~$的两条鱼生死$~\text{solo}~$是危险的，如果$~a\leq b\leq2a~$。一个鱼缸的危险值定义为最多可能发生的危险$~\text{solo}~$次数。最开始鱼缸为空，每次加一条或者减一条质量为$~x~$的鱼，输出每次的危险值。<br>数据范围$~1\leq q\leq5\cdot10^5,~1\leq x\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对所有鱼的质量升序得到$~a_1,~a_2,~\dots,~a_n~$。定义如果$~a_i&gt;2\sum_{j&lt; i}a_j~$，则称它为肥鱼（算上第一只$~a_1~$）。设当前鱼缸有$~k~$只肥鱼，则下面证明危险值为$~n-k~$：</p><ol><li>对于肥鱼，它一定不会在危险$~\text{solo}~$中作为大鱼出现，所以危险值的上限为$~n-k~$。</li><li>在每次选择最小的两只鱼$~\text{solo}~$，这样危险$~\text{solo}~$的总次数为$~n-k~$。<br>所以现在对于每次操作，算出当前的$~k~$值即可。考虑区间$~[1,~2),~[2,~4),~\dots,~[2^m,~2^{m+1}),~\dots~$，显然每个区间至多一只肥鱼。那么用$~\text{multiset}~$来维护每个区间的鱼，这样每次操作就能在$~O(\log q\log x)~$内算出$~k~$值。总时间复杂度为$~O(q\log q\log x)~$。</li></ol><p>注意数据范围过大，可能需要$~\text{fastIO}~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; seg[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> q, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; i &lt;&lt;= <span class="number">1</span>, ++idx);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">'+'</span>) &#123;</span><br><span class="line">seg[idx].insert(x);</span><br><span class="line">sum[idx] += x;</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[idx].erase(seg[idx].find(x));</span><br><span class="line">sum[idx] -= x;</span><br><span class="line">--cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">32</span>; tot += sum[i++])</span><br><span class="line"><span class="keyword">if</span> (sum[i] &amp;&amp; *(seg[i].begin()) &gt; tot &lt;&lt; <span class="number">1</span>) --res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 527 (Div. 3) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20527%20(Div.%203)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20527%20(Div.%203)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1092" target="_blank" rel="noopener">Codeforces Round #527 (Div. 3)</a></p><h2 id="A-Uniform-String"><a href="#A-Uniform-String" class="headerlink" title="A. Uniform String"></a>A. Uniform String</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出任意长度为$~n~$且由前$~k~$个小写字母组成的串，要求出现次数最少的尽量多。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">while</span> (n--) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(<span class="string">'a'</span> + n % k);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Teams-Forming"><a href="#B-Teams-Forming" class="headerlink" title="B. Teams Forming"></a>B. Teams Forming</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~n~$个数字，每个数字可以加若干次$~1~$，求最少次数使得这$~n~$个数字可以两两配对，每对都一样大。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) res += i &amp; <span class="number">1</span> ? a[i] : -a[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Prefixes-and-Suffixes"><a href="#C-Prefixes-and-Suffixes" class="headerlink" title="C. Prefixes and Suffixes"></a>C. Prefixes and Suffixes</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个长度为$~n~$的串的$~n-1~$个前缀和后缀打乱顺序给出。输出任意合法的划分，使得存在一个长度为$~n~$的串，它的所有前缀和后缀均和该划分一致。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>暴力先枚举两个给定串合成的长度为$~n~$的串然后判断。代码的时间复杂度上限是$~O(n^3)~$，但在枚举的过程中最多$~4~$次即可枚举出合法的原串，所以实际时间复杂度为$~O(n^2)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> size = n - <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs(size), fuck[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; str : strs) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        fuck[(<span class="keyword">int</span>)str.size()].push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ggsimida;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">2</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k) &#123;</span><br><span class="line">        <span class="built_in">string</span> now = fuck[i][j] + fuck[n - i][k];</span><br><span class="line">        <span class="keyword">if</span> (ggsimida.find(now) != ggsimida.end()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; use(size, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">pre</span><span class="params">(now, <span class="number">0</span>, len)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx ^ size; ++idx) <span class="keyword">if</span> (!use[idx] &amp;&amp; strs[idx] == pre) &#123;</span><br><span class="line">                use[idx] = <span class="literal">true</span>;</span><br><span class="line">                res[idx] = <span class="string">'P'</span>;</span><br><span class="line">                ++cal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">suf</span><span class="params">(now, len, n - len)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx ^ size; ++idx) <span class="keyword">if</span> (!use[idx] &amp;&amp; strs[idx] == suf) &#123;</span><br><span class="line">                use[idx] = <span class="literal">true</span>;</span><br><span class="line">                res[idx] = <span class="string">'S'</span>;</span><br><span class="line">                ++cal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cal == size) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        ggsimida.insert(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D1-Great-Vova-Wall-Version-1"><a href="#D1-Great-Vova-Wall-Version-1" class="headerlink" title="D1. Great Vova Wall (Version 1)"></a>D1. Great Vova Wall (Version 1)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>铺砖，宽度为$~n~$，初始每个位置已经铺了一些$~1\times1~$的砖在最下面。问是否能继续放若干个$~2\times1~$的砖（横竖均可），使得最后顶面是平的。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑黑白染色，可以铺平当前仅当黑白数量一致。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        (n ^ a) &amp; <span class="number">1</span> ? ++cnt : --cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(cnt) &lt; <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D2-Great-Vova-Wall-Version-2"><a href="#D2-Great-Vova-Wall-Version-2" class="headerlink" title="D2. Great Vova Wall (Version 2)"></a>D2. Great Vova Wall (Version 2)</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>上一题的基础上禁止竖着放砖。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>单调栈模拟。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; fuck;</span><br><span class="line">    <span class="keyword">int</span> shit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        shit = max(shit, a);</span><br><span class="line">        <span class="keyword">if</span> (fuck.empty()) fuck.push(a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fuck.top() &lt; a) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fuck.top() == a) fuck.pop();</span><br><span class="line">        <span class="keyword">else</span> fuck.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fuck.empty() || fuck.size() == <span class="number">1</span> &amp;&amp; fuck.top() == shit) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Minimal-Diameter-Forest"><a href="#E-Minimal-Diameter-Forest" class="headerlink" title="E. Minimal Diameter Forest"></a>E. Minimal Diameter Forest</h2><h2 id="F-Tree-with-Maximum-Cost"><a href="#F-Tree-with-Maximum-Cost" class="headerlink" title="F. Tree with Maximum Cost"></a>F. Tree with Maximum Cost</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个大小为$~n~$的有点权树，两点之间的距离定义为最短路径上的边数。定义$~cost(u)=\sum_{v=1}^n{dist(u,~v)\cdot a_i}~$，求$~\min{cost(u)}~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑相邻两个点$~u~$和$~v~$之间的答案转移。删去$~edge(u,~v)~$，则原树被划分为两个子树，记点集分别为$~S_u~$和$~S_v~$。则有等式</p><script type="math/tex; mode=display">\begin{aligned}res_u+\sum_{i\in S_u}{a_i}  &=res_v+\sum_{S_v}{a_i}                         \\res_u                       &=res_v+\sum_{i=1}^n{a_i}-2\sum_{i\in S_u}{a_i} \\\end{aligned}</script><p>那么任取一点为根，第一遍$~\text{DFS}~$找出对于所有子树上子树根的$~cost~$和子树的权值之和$~\sum_{i\in S_u}{a_i}~$，第二遍$~\text{DFS}~$更新所有点的答案。时间复杂度为$~O(n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], res[maxn], ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) res[u] += dfs1(v, u), a[u] += a[v];</span><br><span class="line">    <span class="keyword">return</span> res[u] += a[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    ans = max(ans, res[u] = res[p] + a[<span class="number">1</span>] - (a[u] &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) dfs2(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].push_back(v);</span><br><span class="line">        adj[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>] = dfs1();</span><br><span class="line">    dfs2();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 526 (Div. 2) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20526%20(Div.%202)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20526%20(Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1084" target="_blank" rel="noopener">Codeforces Round #526 (Div. 2)</a></p><h2 id="A-The-Fair-Nut-and-Elevator"><a href="#A-The-Fair-Nut-and-Elevator" class="headerlink" title="A. The Fair Nut and Elevator"></a>A. The Fair Nut and Elevator</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~N~$个楼层，第$~i~$层住着$~a_i~$个人。每天每人都要坐两次电梯，第一次从第$~i~$层坐电梯到第$~1~$层，第二次从第$~1~$层坐电梯到第$~i~$层。电梯一次只能载一个人且有一个初始位置第$~x~$层。电梯的运行每次必须先从第$~x~$层到起点层，再到终点层，再回到$~x~$层。求$~x~$的最优解使得每天电梯的运行距离最短，输出这个最短距离。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。贪心。显然$~x=1~$是最优解。输出$~4\sum a_i(i-1)~$即可。证明略。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res += a * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (res &lt;&lt; <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Kvass-and-the-Fair-Nut"><a href="#B-Kvass-and-the-Fair-Nut" class="headerlink" title="B. Kvass and the Fair Nut"></a>B. Kvass and the Fair Nut</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数$~v_1,~v_2,~\dots,~v_n~$，让他们一共减去$~s~$，使得最小值最大，输出这个最小值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。有巨坑。说多都是泪。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> minn = <span class="number">0x3f3f3f3f3f3f3f3f</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">        minn = min(minn, v);</span><br><span class="line">        sum += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; s) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n * minn + s &lt; sum) <span class="built_in">cout</span> &lt;&lt; minn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (sum - s) / n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-The-Fair-Nut-and-String"><a href="#C-The-Fair-Nut-and-String" class="headerlink" title="C. The Fair Nut and String"></a>C. The Fair Nut and String</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，求生成的全$~a~$串数量，满足相邻的两个$~a~$在原串中必有一个$~b~$在这两个$~a~$之间。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。原串中相邻的两个$~b~$之间若有$~n~$个$~a~$，则至多在这$~n~$个$~a~$中选$~1~$个，显然有$~n+1~$种选法（包括不选）。答案则是$~{\prod(n_i+1)}-1~$，因为要减去空串。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'a'</span>) ++cnt;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'b'</span>) res = <span class="number">1L</span>L * res * cnt % mod, cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1L</span>L * res * cnt % mod - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-The-Fair-Nut-and-the-Best-Path"><a href="#D-The-Fair-Nut-and-the-Best-Path" class="headerlink" title="D. The Fair Nut and the Best Path"></a>D. The Fair Nut and the Best Path</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个树，有非负整数点权$~w~$和正整数边权$~c~$，一条链的值为$~\sum{w}-\sum{c}~$。求出最大的链值（单个点视为退化链也算）。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>树形$~\text{DP}~$。任取一个点为树根，每个点记录以它为一个端点，另一个端点为它后代的最大链值$~x~$，对于叶子有$~x=c~$。那么考虑经过点$~u~$且在以$~u~$为根的子树上的链的最大值$~max_u~$，对$~u~$的所有儿子$~v~$的$~x_v~$值与连接它们的边权$~w_v~$做差，加入两个$~x=w=0~$的虚点，则可以用这些差$~x_v-w_v~$的最大值来更新$~x_u~$，最大值和次大值来更新$~max_u~$。于是可以在$~\text{DFS}~$过程中线性地更新出答案。由于数据范围允许时间复杂度为$~O(n\log{n})~$，于是可以用排序来简化求最大值和次大值的代码。</p><p>已更新简便线性做法。</p><h3 id="代码（-O-n-log-n-）"><a href="#代码（-O-n-log-n-）" class="headerlink" title="代码（$~O(n\log{n})~$）"></a><strong>代码（$~O(n\log{n})~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; sons(<span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> son : adj[u]) <span class="keyword">if</span> (son.first ^ p) &#123;</span><br><span class="line">        ret = max(ret, dfs(son.first, u));</span><br><span class="line">        sons.push_back(c[son.first] - son.second);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sons.begin(), sons.end());</span><br><span class="line">    reverse(sons.begin(), sons.end());</span><br><span class="line">    c[u] += sons[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> max(ret, c[u] + sons[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        adj[u].push_back(make_pair(v, w));</span><br><span class="line">        adj[v].push_back(make_pair(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[maxn], dp[maxn], res;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    res = max(res, dp[u] = c[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v.first ^ p) &#123;</span><br><span class="line">        dfs(v.first, u);</span><br><span class="line">        res = max(res, dp[u] + dp[v.first] - v.second);</span><br><span class="line">        dp[u] = max(dp[u], c[u] + dp[v.first] - v.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        adj[u].push_back(make_pair(v, w));</span><br><span class="line">        adj[v].push_back(make_pair(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    dfs();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-The-Fair-Nut-and-Strings"><a href="#E-The-Fair-Nut-and-Strings" class="headerlink" title="E. The Fair Nut and Strings"></a>E. The Fair Nut and Strings</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>找出$~k~$个长度为$~n~$且字典序在$~s~$和$~t~$之间的$~ab~$串，使得不一样的前缀的数量最多，输出最大的不同前缀数。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有$~ab~$串构成的$~\text{trie}~$树，这显然是一个完全二叉树。再考虑所求的$~k~$个$~ab~$串构成的$~\text{trie}~$树，则答案是节点数量，且第$~i~$层的节点数量至多为$~\min{|t_i|-|s_i|,~k}~$个。其中$~|str_i|~$表示字符串$~str~$前$~i~$个字符构成的前缀所对应的二进制数值。自上而下模拟更新答案即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">string</span> s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1L</span>L * n * k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, dif = <span class="number">0</span>; i ^ n &amp;&amp; (dif = (dif &lt;&lt; <span class="number">1</span>) + (t[i] == <span class="string">'b'</span>) - (s[i] == <span class="string">'b'</span>)) &lt; k; ++i)</span><br><span class="line">        res -= k - dif - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Max-Mex"><a href="#F-Max-Mex" class="headerlink" title="F. Max Mex"></a>F. Max Mex</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一棵大小为$~n~$的树，所有节点的初始值为$~0,~1,~\dots,~n-1~$的一个全排列。对于这棵树上的任意一条链$~l~$，$~V(l)~$表示$~l~$上所有点的集合。有$~q~$次修改或查询操作，修改为交换$~2~$个节点的值，查询为输出$~\max{mex(V(l))}~$。</p><p>注：$~mex(S)~$表示不在集合$~S~$中的最小自然数，即$~\min{x\in\Bbb{N}:x\not\in S}~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>老子现在不会。据说是线段树维护各值所在点之间的连接关系。</p>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Avito Cool Challenge 2018 (TBC)</title>
      <link href="/2019/01/17/Avito%20Cool%20Challenge%202018%20(TBC)/"/>
      <url>/2019/01/17/Avito%20Cool%20Challenge%202018%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1081" target="_blank" rel="noopener">Avito Cool Challenge 2018</a></p><h2 id="A-Definite-Game"><a href="#A-Definite-Game" class="headerlink" title="A. Definite Game"></a>A. Definite Game</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个正整数$~n~$，每次减去一个互质的数，输出最小结果。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n ^ <span class="number">2</span> ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Farewell-Party"><a href="#B-Farewell-Party" class="headerlink" title="B. Farewell Party"></a>B. Farewell Party</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>原本有一个数列$~b_1,~b_2,~\dots,~b_n~$，先已知每个数在这个数列中有多少个其他的数与它不一样的数列$~a_1,~a_2,~\dots,~a_n~$，输出任意合法的$~{b_n}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>如果两个数字$~x~$和$~y~$在$~{b_n}~$中出现的次数一样，则对应的$~{a_n}~$也一样于是考虑$~z~$在$~{a_n}~$中出现的次数$~cnt~$，则必有$~cnt\mid n-z~$。直接模拟即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n), cnt(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;&gt; res(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; a : arr) <span class="built_in">cin</span> &gt;&gt; a, ++cnt[a];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, now = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] % (n - i))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, tot = cnt[i] / (n - i); j ^ tot; ++j, ++now)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k ^ n; ++k)</span><br><span class="line">                res[i].push(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Possible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> last = arr.back();</span><br><span class="line">    arr.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : arr) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[a].top() &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        res[a].pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res[last].top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Colorful-Bricks"><a href="#C-Colorful-Bricks" class="headerlink" title="C. Colorful Bricks"></a>C. Colorful Bricks</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对连续相邻的$~n~$块砖进行$~m~$染色，使得有$~k~$块砖和左边的不一样（第一块不算），求所有染色可能数量。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>数学推导发现答案就是$~\binom{n-1}{k}m(m-1)^k~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">        a = mul(a, a);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mul(mul(mul(mul(fact[n - <span class="number">1</span>], finv[k]), finv[n - k - <span class="number">1</span>]), m), fpow(m - <span class="number">1</span>, k)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Maximum-Distance"><a href="#D-Maximum-Distance" class="headerlink" title="D. Maximum Distance"></a>D. Maximum Distance</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个给定一个$~n~$个点$~m~$条边的联通图（可以有重边自环），有边权$~w_e~$并给定$~k~$个关键点。对于每条简单路径$~L(u,~v)~$，定义路径的花费$~cost(L(u,~v))=\max_{e\in L(u,~v)}{w_e}~$。定义距离$~dist(u,~v)=\min{cost(L(u,~v))}~$。输出离每个关键点最远的关键点的距离。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~\text{Kruskal}~$做法的最小生成树，那么$~dist(u,~v)~$即为$~\text{MST}~$上两点间的路径花费。不难发现这时候关键点的最远距离都一样，为$~\text{Kruskal}~$构造$~\text{MST}~$过程中第一个联通所有关键点的边权。为维护关键点的连通性，在并查集的过程中不要按秩合并，而是尽量以关键点为父亲，记录合并关键点连通性的次数，到$~k-1~$次时直接输出答案即可。时间复杂度上限为$~O(n\log n+m\log m)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a)</span> </span>&#123;<span class="keyword">return</span> fa[a] ^ a ? (fa[a] = find(fa[a])) : a;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vip(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        vip[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; edge(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : edge) <span class="built_in">cin</span> &gt;&gt; e.second.first &gt;&gt; e.second.second &gt;&gt; e.first;</span><br><span class="line">    sort(edge.begin(), edge.end());</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : edge) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = find(e.second.first);</span><br><span class="line">        <span class="keyword">int</span> b = find(e.second.second);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (vip[a]) fa[b] = a;</span><br><span class="line">        <span class="keyword">else</span> fa[a] = b;</span><br><span class="line">        <span class="keyword">if</span> (vip[a] &amp;&amp; vip[b]) <span class="keyword">if</span> (++cnt == k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) <span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区间DP与平行四边形优化</title>
      <link href="/2019/01/17/%E5%8C%BA%E9%97%B4DP%E4%B8%8E%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/17/%E5%8C%BA%E9%97%B4DP%E4%B8%8E%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><p>对于询问区间最优解的问题，可以先考虑较小区间的最优解，然后通过合并小区间得到大区间最有解。动态规划状态转移式</p><script type="math/tex; mode=display">dp[i][j]=\min\{dp[i][k]+dp[k+1][j]\}+f[i][j]</script><p>算法实现过程中通常要用到三层$~\text{for}~$循环，从外到里分别维护区间宽度$~j-i~$，区间端点$~i~$和区间分割点$~k~$，复杂度为$~O(N^3)~$。</p><h2 id="四边形不等式"><a href="#四边形不等式" class="headerlink" title="四边形不等式"></a>四边形不等式</h2><p>如果$~\forall~a\leq b\leq c\leq d~$，$~f~$满足</p><script type="math/tex; mode=display">f(a,~c)+f(b,~d)\leq f(a,~d)+f(b,~c)</script><p>则称$~f~$满足四边形不等式。</p><h2 id="区间包含单调性"><a href="#区间包含单调性" class="headerlink" title="区间包含单调性"></a>区间包含单调性</h2><p>如果$~\forall~I_1\subseteq I_2~$，$~f~$满足<script type="math/tex">f(I_1)\leq f(I_2)</script>则称$~f~$满足区间包含单调性。</p><h2 id="平行四边形优化"><a href="#平行四边形优化" class="headerlink" title="平行四边形优化"></a>平行四边形优化</h2><p>考虑状态转移过程中的最优转移点，记$~k[i][j]~$为$~dp[i][j]~$的最优转移点，即</p><script type="math/tex; mode=display">dp[i][j]=dp[i][k[i]][j]]+dp[k[i][j]+1][j]+f[i][j]</script><p>如果$~dp~$和$~f~$都满足四边形不等式和区间包含单调性，则必有</p><script type="math/tex; mode=display">k[i][j-1]\leq k[i][j]\leq k[i+1][j]</script><p>那么缩小状态转移点的区间范围，在更新$~dp[i][j]~$的同时更新$~k[i][j]~$，时间复杂度可以优化至$~O(n^2)~$。区间范围和时间复杂度的证明目前没看懂，先放个百度百科的<a href="https://baike.baidu.com/view/1985058" target="_blank" rel="noopener">链接</a>。<del>反正百度到的CSDN和博客园都是抄来抄去那破尿性，更加看不懂，先凑合着用。</del></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3506"><a href="#HDU3506" class="headerlink" title="HDU3506"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3506" target="_blank" rel="noopener">HDU3506</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个大小为$~N~$的环，每次合并相邻区间$~A~$和$~B~$的花费是$~(\sum A+\sum B)*(|A|+|B|)~$，求将这个环合并为一个集合的最小总花费。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$为将$~i,~\dots,~j~$合并的最小花费。注意到这题是环形数组，则可以将数组扩大一倍，令$~a[n+i]=a[i],~i=1,~2,~\dots,~n-1~$，同时用平行四边形优化。时间复杂度$~O(N^2)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], s[maxn][maxn], pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; pre[i], pre[i + n] = pre[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n &lt;&lt; <span class="number">1</span>; ++i) pre[i] += pre[i - <span class="number">1</span>], dp[i][i] = <span class="number">0</span>, s[i][i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len ^ n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = s[i][j - <span class="number">1</span>]; k &lt;= s[i + <span class="number">1</span>][j]; ++k) <span class="keyword">if</span> (dp[i][j] &gt; dp[i][k] + dp[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>]) &#123;</span><br><span class="line">s[i][j] = k;</span><br><span class="line">dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = min(res, dp[i][i + n - <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU4632"><a href="#HDU4632" class="headerlink" title="HDU4632"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4632" target="_blank" rel="noopener">HDU4632</a></h3><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个字符串，求出所有的回文子序列个数模$~10007~$的答案，时间复杂度要求在$~O(n^2)~$以内。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$为区间$~[i,~j]~$内的回文子序列个数。则根据容斥原理，有状态转移式</p><script type="math/tex; mode=display">dp[i][j]=\begin{cases}dp[i][j-1]+dp[i+1][j]-dp[i+1][j]    &str[i]\not=str[j]  \\dp[i][j-1]+dp[i+1][j]+1             &str[i]=str[j]\end{cases}</script><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= t; ++cas) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> size = (<span class="keyword">int</span>)str.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i - <span class="number">1</span>] ^ str[i]) dp[i - <span class="number">1</span>][i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i - <span class="number">1</span>][i] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt; size; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + len ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line">dp[i][j] = add(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[j]) dp[i][j] = sub(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = add(dp[i][j], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; dp[<span class="number">0</span>][size - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU4745"><a href="#HDU4745" class="headerlink" title="HDU4745"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4745" target="_blank" rel="noopener">HDU4745</a></h3><h4 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给一个大小为$~N~$的环形数组，要求分别顺时针逆时针一圈以内各选一个子序列，使得子序列一样，求最大的子序列长度。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>其实差不多就是求最大的回文子序列长度，注意细节，具体看代码。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[n + i] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len &lt;= n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line"><span class="keyword">if</span> (a[i] == a[j]) dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = max(res, max(dp[i][i + n - <span class="number">1</span>], dp[i][i + n - <span class="number">2</span>] + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斜率优化DP</title>
      <link href="/2019/01/17/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
      <url>/2019/01/17/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[<h2 id="斜率优化DP思想"><a href="#斜率优化DP思想" class="headerlink" title="斜率优化DP思想"></a>斜率优化DP思想</h2><p>对于状态转移公式满足如下条件的动态规划</p><script type="math/tex; mode=display">dp[i]=\min_{j<i}\{f[j]-p[i]*g[j]\}+q[i]</script><p>其中$~f~$和$~g~$均可线性时间内求出，且$~p~$和$~g~$单调递增。朴素的做法是直接暴力循环计算状态转移，时间复杂度为$~O(n^2)~$。考虑$~dp[i]~$从$~j&lt;k~$的两种转移，$~j~$比$~k~$优当且仅当</p><script type="math/tex; mode=display">\begin{aligned}f[j]-p[i]*g[j]  &<f[k]-p[i]*g[k]                \\p[i]            &<\frac{f[k]-f[j]}{g[k]-g[j]}   \\\end{aligned}</script><p>让$~f~$和$~g~$分别表示平面直角坐标系的纵坐标和横坐标，则不等式右边即为经过点$~P_j~$与$~P_k~$的直线的斜率$~K(P_j,~P_k)~$。于是$~j~$比$~k~$优当且仅当$~p[i]&lt; K(P_j,~P_k)~$。同理当$~j&gt;k~$时，$~j~$比$~k~$优当且仅当$~p[i]&gt;K(P_k,~P_j)~$。于是对于$~dp[i]~$，点集$~{P_i=(g[i],~f[i])}~$的下凸包中，满足过点$~P_j~$且斜率为$~p[i]~$的直线不经过凸包内部的点$~P_j~$即为最优转移点。由于$~P_j~$的横坐标$~g[j]~$与斜率$~p[i]~$均单调递增，则凸包和斜率的转移可以用单调队列维护，总复杂度为线性复杂度$~O(n)~$。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p><strong>维护凸包要去重点！维护凸包要去重点！维护凸包要去重点！重要的事情说三遍！</strong></p><p>如过存在重点则在凸包加新点时有可能改变凸包性质。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3507"><a href="#HDU3507" class="headerlink" title="HDU3507"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3507" target="_blank" rel="noopener">HDU3507</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个长度为$~N~$的数列$~C[1],~C[2],~\dots,~C[N]~$，和自然数$~M~$对于连续子列$~C[l,~r]~$，它的花费定义为$~cost(l,r)=\sum_{i=l}^r(C[i])^2+M~$。要求找到整个数列的一种划分，使得总花费$~\sum{cost(l,r)}~$最小，平求出这个最小花费。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，用$~dp[i]~$表示对于数列$~C[1],~C[2],~\dots,~C[i]~$的最小花费答案，记前缀和$~pre[i]=\sum_{j=1}^iC[j]~$，则有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp[i]   &=\min_{j< i}\left\{dp[j]+(pre[i]-pre[j])^2+M\right\}                   \\        &=\min_{j< i}\left\{dp[j]+pre[j]^2-2*pre[i]*pre[j]\right\}+M+pre[i]^2   \\\end{aligned}</script><p>这样的时间复杂度为$~O(N^2)~$，显然会$~\text{tle}~$。但注意到$~pre~$满足单调递增性质，令$~{P_i=(pre[i],~dp[i]+pre[i]^2)}~$，则维护下凸壳，时间复杂度可以优化为$~O(n)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pre[maxn], dp[maxn], x[maxn], y[maxn];</span><br><span class="line"><span class="keyword">int</span> que[maxn], tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span> (c) pre[i] = pre[i - <span class="number">1</span>] + c;</span><br><span class="line">            <span class="keyword">else</span> --i, --n;</span><br><span class="line">        &#125;</span><br><span class="line">        x[que[tail = <span class="number">1</span>] = <span class="number">1</span>] = pre[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        y[<span class="number">1</span>] = (dp[<span class="number">1</span>] = pre[<span class="number">1</span>] * pre[<span class="number">1</span>] + m) + pre[<span class="number">1</span>] * pre[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j ^ tail &amp;&amp; y[que[j + <span class="number">1</span>]] - y[que[j]] &lt; (x[que[j + <span class="number">1</span>]] - x[que[j]]) * pre[i]) ++j;</span><br><span class="line">            x[i] = pre[i] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            y[i] = (dp[i] = y[que[j]] - pre[i] * x[que[j]] + m + pre[i] * pre[i]) + pre[i] * pre[i];</span><br><span class="line">            <span class="keyword">while</span> (tail &amp;&amp; (y[i] - y[que[tail]]) * (x[i] - x[que[tail - <span class="number">1</span>]]) &lt; (y[i] - y[que[tail - <span class="number">1</span>]]) * (x[i] - x[que[tail]])) --tail;</span><br><span class="line">            que[++tail] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU3045"><a href="#HDU3045" class="headerlink" title="HDU3045"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3045" target="_blank" rel="noopener">HDU3045</a></h3><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定$~N~$个正整数，将其化为若干个不小于$~T~$的集合$~S~$，每个集合的花费定义为$~cost(S)=\sum{S}-|S|*\min{S}~$，求出最小的总花费。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>贪心，对这$~N~$个数排序，则最优的划分方式必为连续的子段划分。此时每一个子集的最小值即为子集的第一个数，最小花费可以转化为最大化$~\sum(S-|S|*\min{S})~$。动态规划，记$~dp[i]~$为排好序后前$~i~$个数所对应的上式的值，则有状态转移方式</p><script type="math/tex; mode=display">\begin{aligned}dp[i]   &=\max_{T\leq{j}\leq{i-T}}\left\{dp[j]+a[j+1]*(i-j)\right\}         \\        &=\max_{T\leq{j}\leq{i-T}}\left\{dp[j]-a[j+1]*j+i*a[j+1]\right\}    \\\end{aligned}</script><p>这时令点集$~{P_i=(a[i+1],~a[i+1]\cdot i-dp[i])}~$，那么对于$~j&lt; k~$，$~j~$比$~k~$优当且仅当$~i&lt; K(P_j,~P_k)~$，对于$~j&gt;k~$，$~j~$比$~k~$优当且仅当$~i&gt;K(P_k,~P_j)~$。所以维护下凸壳即可。<strong>这题会出现重点，必须用大于等于或小于等于判断斜率！</strong></p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], dp[maxn], sum;</span><br><span class="line"><span class="keyword">int</span> que[maxn], tail;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) a[que[i] + 1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (X(i) * que[i] - dp[que[i]])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j ^ tail &amp;&amp; (Y(j + <span class="number">1</span>) - Y(j)) &lt;= (X(j + <span class="number">1</span>) - X(j)) * i) ++j;</span><br><span class="line">            dp[i] = i * X(j) - Y(j);</span><br><span class="line">            <span class="keyword">int</span> temp = i - t + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; t) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x = a[temp + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y = x * temp - dp[temp];</span><br><span class="line">            <span class="keyword">while</span> (tail &amp;&amp; (y - Y(tail)) * (x - X(tail - <span class="number">1</span>)) &lt;= (y - Y(tail - <span class="number">1</span>)) * (x - X(tail))) --tail;</span><br><span class="line">            j = min(j, tail);</span><br><span class="line">            que[++tail] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum - dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列优化DP</title>
      <link href="/2019/01/17/%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/"/>
      <url>/2019/01/17/%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[<h2 id="队列优化DP思想"><a href="#队列优化DP思想" class="headerlink" title="队列优化DP思想"></a>队列优化DP思想</h2><p>对于状态转移公式满足如下条件的动态规划</p><script type="math/tex; mode=display">dp[i]=(\min\text{or}\max)\{f[j]\}+g[i],~j\in[\alpha[i],\beta[i]]</script><p>其中$~f~$和$~g~$均可线性时间内求出，且$\alpha~$和$~\beta~$单调递增。朴素的做法是直接暴力循环计算状态转移，时间复杂度为$~O(n^2)~$。但是注意到区间$~[\alpha,~\beta]~$的单调递增性质，可以用一个叫做<strong>单调队列</strong>的数据结构来维护区间的最值。</p><h3 id="单调队列的性质"><a href="#单调队列的性质" class="headerlink" title="单调队列的性质"></a><strong>单调队列的性质</strong></h3><ol><li>可以用双端队列或者双指针数组实现，内部的任意元素$~que[i]~$表示$~f~$的角标。</li><li>角标有序储存，即$~que[i]&lt;que[j],~\forall~i&lt;j~$。</li><li>角标对应的数组值单调，即$~f[que[i]]~$单调递增或者单调递减。</li></ol><h3 id="单调队列的操作（单调递减队列维护区间最大值）"><a href="#单调队列的操作（单调递减队列维护区间最大值）" class="headerlink" title="单调队列的操作（单调递减队列维护区间最大值）"></a><strong>单调队列的操作（单调递减队列维护区间最大值）</strong></h3><ol><li>每次更新区间时，从小到大考虑新加入的角标$~now~$，将所有队列$~que~$中满足$~que[cmp]&lt;que[now]~$的元素$~cmp~$从队列$~que~$中移除。由于单调队列的性质，只需要让$~now~$与队列$~que~$的尾部元素$~last~$比较即可。</li><li>将$~now~$放入队列$~que~$尾部，经过上一个操作，单调队列性质依然保持。</li><li>将队列$~que~$头部所有不在区间$~[\alpha,~\beta]~$的元素$~head~$从队列$~que~$中移除。由于区间$~[\alpha,~\beta]~$的单调递增性质，单调队列性质依然保持，且此时$~\max{f[i]}=f[que[head]]~$。</li></ol><h3 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a><strong>复杂度计算</strong></h3><p>每个角标$~i~$至多被放入队列$~que~$或者从队列$~que~$中移除一次，所以是线性复杂度$~O(n)~$。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3401"><a href="#HDU3401" class="headerlink" title="HDU3401"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3401" target="_blank" rel="noopener">HDU3401</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>炒股，一共$~T~$天，第$~i~$天股票的买价是$~ap[i]~$、最多可以买$~as[i]~$股，卖价是$~bp[i]~$、最多可以卖$~bs[i]~$股，且每两次交易之间相隔必须大于$~W~$天，最大屯股量为$~maxp~$，问最后的最大收益。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$表示在第$~i~$天还剩下$~j~$股的最大收益，则有$~3~$种状态更新</p><script type="math/tex; mode=display">dp[i][j]=\max\begin{cases}dp[i-1][j]              &\text{null}                        \\dp[i-w-1][j-k]-ap[i]*k  &\text{$k\leq\min(j,~as[i])$}       \\dp[i-w-1][j+k]+bp[i]*k  &\text{$k\leq\min(maxp-j~,bs[i])$}  \\\end{cases}</script><p>这样的时间复杂度为$~O(T\cdot maxp^2)~$，显然会$~\text{TLE}~$。但观察$~dp[i][j]~$的第二种状态更新，有</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j]    &=\max\alpha[l]-ap[i]*j     \\\alpha[l]   &=dp[i-w-1][l]+ap[i]*[l]    \\l           &\in[\max(0,~j-as[i]),~j]   \\\end{aligned}</script><p>第三种状态更新同理</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j]    &=\max\beta[l]-bp[i]*j          \\\beta[l]    &=dp[i-w-1][l]+bp[i]*[l]        \\l           &\in[j,~\min(maxp,~j+bs[i])]    \\\end{aligned}</script><p>于是可以用单调队列来维护$~\max(\alpha,\beta)~$。这样对于每个$~dp[i][j]~$状态转移的平均复杂度为$~O(1)~$，总时间复杂度为$~O(T\cdot maxp)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> ap[maxn], bp[maxn], as[maxn], bs[maxn], temp[maxn], dp[maxn &lt;&lt; <span class="number">1</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, maxp, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; maxp &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; ap[i] &gt;&gt; bp[i] &gt;&gt; as[i] &gt;&gt; bs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= w; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= maxp; ++j) dp[i][j] = -inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) dp[i + w][j] = dp[i + w - <span class="number">1</span>][j];</span><br><span class="line">            que.clear();</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) &#123;</span><br><span class="line">                temp[j] = dp[i - <span class="number">1</span>][j] + ap[i] * j;</span><br><span class="line">                <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j]) que.pop_back();</span><br><span class="line">                que.push_back(j);</span><br><span class="line">                <span class="keyword">while</span> (que.front() &lt; j - as[i]) que.pop_front();</span><br><span class="line">                dp[i + w][j] = max(dp[i + w][j], temp[que.front()] - ap[i] * j);</span><br><span class="line">            &#125;</span><br><span class="line">            que.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) temp[j] = dp[i - <span class="number">1</span>][j] + bp[i] * j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ bs[i]; ++j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j]) que.pop_back();</span><br><span class="line">                que.push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + bs[i] &lt;= maxp) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j + bs[i]]) que.pop_back();</span><br><span class="line">                    que.push_back(j + bs[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (que.front() &lt; j) que.pop_front();</span><br><span class="line">                dp[i + w][j] = max(dp[i + w][j], temp[que.front()] - bp[i] * j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n + w][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 队列DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Good Bye 2018 (TBC)</title>
      <link href="/2019/01/17/Good%20Bye%202018%20(TBC)/"/>
      <url>/2019/01/17/Good%20Bye%202018%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1091" target="_blank" rel="noopener">Good Bye 2018</a></p><h2 id="A-New-Year-and-the-Christmas-Ornament"><a href="#A-New-Year-and-the-Christmas-Ornament" class="headerlink" title="A. New Year and the Christmas Ornament"></a>A. New Year and the Christmas Ornament</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~3~$个数$~y,~b,~r~$，求最大的$~sum=a+(a+1)+(a+2)~$，满足$~a\leq y,~a+1\leq b,~a+2\leq r$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> * min(a + <span class="number">1</span>, min(b, c - <span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-New-Year-and-the-Treasure-Geolocation"><a href="#B-New-Year-and-the-Treasure-Geolocation" class="headerlink" title="B. New Year and the Treasure Geolocation"></a>B. New Year and the Treasure Geolocation</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个坐标和$~n~$个向量，存在一种坐标和向量一一配对的方式，使得$~n~$个坐标为起点经向量所指向的终点一样，输出这个终点。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平均坐标即是答案，注意数据范围会爆$~\text{int}~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>, y = <span class="number">0</span>, a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        x += a;</span><br><span class="line">        y += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x / n &lt;&lt; <span class="string">' '</span> &lt;&lt; y / n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-New-Year-and-the-Sphere-Transmission"><a href="#C-New-Year-and-the-Sphere-Transmission" class="headerlink" title="C. New Year and the Sphere Transmission"></a>C. New Year and the Sphere Transmission</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数字$~1,~2,~\dots,~n~$逆时针排成一圈，起点在$~1~$。逆时针每$~k~$个数取一个，直到恰好回到$~1~$处，所有取的数得到一个总和$~sum(k)~$。将所有可能的$~sum(k)~$从小到达输出。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现每$~k~$个数去一个与每$~\gcd(k,~n)~$个数去一个所得到的总和一样。那么只考虑$~k\mid n~$的情况。此时</p><script type="math/tex; mode=display">sum(k)=\sum_{i=0}^{\frac{n}{k}-1}ik+1=\frac{1}{2}\left(\frac{n(n+2)}{k}-n\right)</script><p>枚举$~n~$的因子$~k~$即可，时间复杂度为$~O(\sqrt{n})~$。对于有序输出答案以及去重，由于数据范围不大，可以用$~\text{set}~$维护，时间复杂度为$~O(\sqrt{n}\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sqr; ++i) <span class="keyword">if</span> (!(n % i)) &#123;</span><br><span class="line">        res.insert((n + <span class="number">2</span>) * i - n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        res.insert((n + <span class="number">2</span>) * n / i - n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    res.erase(res.find(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> out : res) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; out;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-New-Year-and-the-Permutation-Concatenation"><a href="#D-New-Year-and-the-Permutation-Concatenation" class="headerlink" title="D. New Year and the Permutation Concatenation"></a>D. New Year and the Permutation Concatenation</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>序列$~p~$由$~1,~2,~\dots,~n~$的所有全排列按字典序连在一起，长度为$~n\cdot n!~$。输出$~p~$中有多少长度为$~n~$的连续子序列满足总和为$~\frac{n(n+1)}{2}~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先每一个原生的全排列一定满足总和为$~\frac{n(n+1)}{2}~$。接下来不难发现所有符合条件的长度为$~n~$的连续子序列也必定是一个全排，于是答案变成了$~p~$中有多少个全排列。对于非原生的全排列，它必定由一个原生全排列的后缀接上下一个原生全排列的前缀。再注意到原生全排列按字典序排列，于是一对原生全排列要通过前面的后缀加后面的前缀生成新的全排列，必须满足两者的前缀一样。于是对于公共前缀长度不小于$~k~$的相邻原生全排列对，均可通过取前者长度为$~n-k~$的后缀和后者长度为$~k~$的前缀，构造出新的全排列，共计$~\frac{n!}{(n-k)!}((n-k)!-1)~$个。枚举$~1\leq k\leq n-2~$，答案为</p><script type="math/tex; mode=display">n!+\sum_{k=1}^{n-2}\frac{n!}{(n-k)!}((n-k)!-1)=n!(n-\sum_{i=1}^{n-1}\frac{1}{k!})</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) res = add(res, finv[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mul(fact[n], sub(n, res)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-New-Year-and-the-Acquaintance-Estimation"><a href="#E-New-Year-and-the-Acquaintance-Estimation" class="headerlink" title="E. New Year and the Acquaintance Estimation"></a>E. New Year and the Acquaintance Estimation</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个点的度数，问是否可以加一个新的度数，使得这$~n+1~$个点能构成一个简单无向图。将所有可能的度数升序输出。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题目里已经给出了相关理论的<a href="https://en.wikipedia.org/wiki/Graph_realization_problem" target="_blank" rel="noopener">$~\text{wiki}~$</a>链接。根据<a href="https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93Gallai_theorem" target="_blank" rel="noopener">$~\text{Erdo2s-Gallai}~$</a>定理，以$~d_1\geq d_2\geq\dots\geq d_n~$为度数可以构成简单图的充要条件是$~2\mid\sum_{i=1}^{n}d_i~$，且</p><script type="math/tex; mode=display">\sum_{i=1}^{k}d_i\leq k(k-1)+\sum_{i=k+1}^{n}\min(d_i,~k),~\forall~1\leq k\leq n</script><p>将$~d~$改为升序，用$~n-k~$代替$~k~$，则不等式变为</p><script type="math/tex; mode=display">\sum_{i=k+1}^{n}d_i\leq (n-k)(n-k-1)+\sum_{i=1}^{k}\min(d_i,~n-k),~\forall~0\leq k< n</script><p>不难发现答案必为连续的一段且奇偶性相同。先不考虑奇偶性，如果新加的度数$~deg~$不合法，则考虑上式不成立时$~deg~$在上式的左边还是右边。如果在左边，说明$~deg~$过大，反之如果在右边，则$~deg~$过小。左右都出现的话则说明无解。二分$~deg~$即可。时间复杂度$~O(n\log n)~$或$~O(n\log^2n)~$均可接受。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vec[maxn], deg[maxn], pre[maxn];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; rem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(deg, vec, size * <span class="keyword">sizeof</span> (<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line">    deg[size - <span class="number">1</span>] = rem;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &amp;&amp; deg[i - <span class="number">1</span>] &gt; deg[i]; --i) swap(deg[i - <span class="number">1</span>], deg[i]);</span><br><span class="line">    <span class="keyword">int</span> pos1 = lower_bound(deg, deg + size, rem) - deg;</span><br><span class="line">    <span class="keyword">int</span> pos2 = upper_bound(deg, deg + size, rem) - deg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) pre[i + <span class="number">1</span>] = pre[i] + deg[i];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = size - <span class="number">1</span>; ~k; --k) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos ^ size &amp;&amp; deg[pos] &lt; size - k) ++pos;</span><br><span class="line">        <span class="keyword">if</span> (pre[size] - pre[k] &gt; (size - k) * (size - min(k, pos) - <span class="number">1L</span>L) + pre[min(k, pos)]) &#123;</span><br><span class="line">            flag1 |= k &gt; pos1;</span><br><span class="line">            flag2 |= k &lt; pos2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag1 &amp;&amp; flag2) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>)    );</span><br><span class="line">    <span class="keyword">return</span> flag1 ? <span class="number">-1</span> : flag2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    size = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> parity = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; vec[i], parity ^= vec[i] &amp; <span class="number">1</span>;</span><br><span class="line">    sort(vec, vec + n);</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">if</span> (!cal(<span class="number">0</span>)) &#123;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (~cal(mid)) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        left = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cal(n)) &#123;</span><br><span class="line">        right = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> l = left, r = n;</span><br><span class="line">        <span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cal(mid) ^ <span class="number">1</span>) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        right = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (left &amp; <span class="number">1</span> ^ parity ? left + <span class="number">1</span> : left);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">2</span>; i &lt;= right; ++i) <span class="keyword">if</span> (!(i &amp; <span class="number">1</span> ^ parity)) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-New-Year-and-the-Mallard-Expedition"><a href="#F-New-Year-and-the-Mallard-Expedition" class="headerlink" title="F. New Year and the Mallard Expedition"></a>F. New Year and the Mallard Expedition</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~3~$种地形和行动方式，分别是草地、水、火山和走、游泳、飞，行动的耗时分别为$~1~$米$~5~$秒、$~1~$米$~3~$秒、$~1~$米$~1~$秒。可以反向行动且随时可以无花费地切换行动方式。走和游泳分别只能在草地和水上使用，飞行可以在任何地形使用，但是飞行需要能量。能量一开始为$~0~$，每走或者游$~x~$米均可获得$~x~$能量，每飞$~x~$米则会消耗$~x~$能量。全路程共计$~n~$段，给出的地形和长度，问最短耗时。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>现根据各种地形对应的行动方式模拟一遍，算出答案的上界并记录到每一段时能量还剩余多少（有可能需要为了补充能量需而原地打转）。然后从终点向起点模拟，在保证每处剩余能量非负的情况下，先尽量在草地上飞，如果还有能量剩余则在水上飞。需要注意细节。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; len(n + <span class="number">1</span>, <span class="number">0</span>), rem(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; len[i];</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str = <span class="string">'A'</span> + str;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ <span class="string">'L'</span>) &#123;</span><br><span class="line">rem[i] = rem[i - <span class="number">1</span>] + len[i];</span><br><span class="line">flag |= str[i] == <span class="string">'W'</span>;</span><br><span class="line">res += len[i] * (str[i] == <span class="string">'W'</span> ? <span class="number">3</span> : <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rem[i - <span class="number">1</span>] &lt; len[i]) &#123;</span><br><span class="line">rem[i] = <span class="number">0</span>;</span><br><span class="line">res += (len[i] - rem[i - <span class="number">1</span>]) * (flag ? <span class="number">4</span> : <span class="number">6</span>) + rem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">rem[i] = rem[i - <span class="number">1</span>] - len[i];</span><br><span class="line">res += len[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>, minn = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">minn = min(minn, rem[i]);</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'G'</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> sub = min(minn, len[i] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">res -= sub &lt;&lt; <span class="number">1</span>;</span><br><span class="line">minn -= sub;</span><br><span class="line">cnt += sub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res + cnt - rem[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性基</title>
      <link href="/2019/01/17/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
      <url>/2019/01/17/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="线性基问题"><a href="#线性基问题" class="headerlink" title="线性基问题"></a>线性基问题</h2><p>对于非负整数区间$~[0,~2^n)~$，可以按二进制$~01~$表示映射到域$~\Bbb{Z}_2~$上的$~n~$维向量空间$~\Bbb{Z}_2^n~$。记上述的映射为$~f:[0,~2^n)\to\Bbb{Z}_2^n,~x\mapsto v~$，这里$~v~$是$~x~$在二进制下的$~01~$表示，显然$~f~$是双射。之后的内容中，对于向量$~v\in\Bbb{Z}_2^n~$，都用$~f^{-1}(v)\in[0,~2^n)~$来表示。那么对于若干整数的$~\text{xor}~$运算问题，则转化为向量空间$~\Bbb{Z}_2^n~$上的加法运算问题，通常称为<strong>线性基问题</strong>。</p><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a><strong>线性基</strong></h3><p>向量空间$~\Bbb{Z}_2^n~$上任意$~n~$个线性无关的向量，称作该向量空间上的一组<strong>线性基</strong>。显然$~1,~2,~\dots,~2^{n-1}~$是$~\Bbb{Z}_2^n~$的一组线性基，称作<strong>标准线性基</strong>。且向量空间$~\Bbb{Z}_2^n~$的任意一个子空间$~V~$必同构于向量空间$~\Bbb{Z}_2^m,~0\leq m\leq n~$，于是$~{\mid V\mid}=2^m~$。</p><h3 id="最小生成子空间"><a href="#最小生成子空间" class="headerlink" title="最小生成子空间"></a><strong>最小生成子空间</strong></h3><p>对于向量空间$~\Bbb{Z}_2^n~$的一个子集$~A={a_1,~a_2,~\dots,~a_m}~$，子空间$~V~$称作$~A~$在$~\Bbb{Z}_2^n~$上的最小生成子空间，当且仅当$~A\subseteq V\subseteq~\Bbb{Z}_2^n~$，且对于$~\Bbb{Z}_2^n~$的所有子空间$~W~$满足：如果$~A\subseteq W~$，则必有$~V\subseteq W~$。如果$~a_1,~a_2,~\dots,~a_m~$线性无关，则它们构成$~V~$的一组线性基。于是有推论：对于$~A~$的最小生成子空间$~V~$，满足$~\dim V\leq{\mid A\mid}~$。</p><h3 id="空间的扩张"><a href="#空间的扩张" class="headerlink" title="空间的扩张"></a><strong>空间的扩张</strong></h3><p>对于向量空间$~\Bbb{Z}_2^n~$的子空间$~V~$和向量$~a~$，定义$~V(a)={a+b:b\in V}\cup V~$。显然$~V(a)~$是包含$~V~$和$~a~$的最小空间，称$~V(a)~$是$~V~$的扩张。如果$~a\in V~$，则显然$~V(a)=V~$，称作<strong>平凡扩张</strong>；否则称作<strong>不平凡扩张</strong>，且$~\dim V(a)=\dim V+1~$。对于不平凡扩张，设$~b_1,~b_2,~\dots,~b_{\dim V}~$是$~V~$的一组线性基，因为$~a\notin V~$，$~a~$无法被$~b_1,~b_2,~\dots,~b_{\dim V}~$线性表出，所以$~b_1,~b_2,~\dots,~b_{\dim V},~a~$线性无关，它们是$~V(a)~$的一组线性基。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a><strong>存储</strong></h3><p>对于任意线性无关组，显然它的最小生成子空间是唯一的。所以可以用$~\text{vector}~$来储存这个线性无关组来表示一个线性空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; base;</span><br><span class="line">Vec() &#123;&#125;;</span><br><span class="line">Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec): base(vec) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;base.clear();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> base.size();&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="扩张"><a href="#扩张" class="headerlink" title="扩张"></a><strong>扩张</strong></h3><p>自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">auto</span> v : vec.base) push(v);&#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="function">Vec <span class="title">ret</span><span class="params">(base)</span></span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最值"><a href="#最值" class="headerlink" title="最值"></a><strong>最值</strong></h3><p>最小值为非$~0~$最小值，其余自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T ret = base.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::min(ret, v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a><strong>标准化</strong></h3><p>自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(base.begin(), base.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ base.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序查找"><a href="#有序查找" class="headerlink" title="有序查找"></a><strong>有序查找</strong></h3><p>从$~0~$开始，需要标准化，其余自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">T <span class="title">find_by_order</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">T ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp; base.size(); ++i) <span class="keyword">if</span> (k &amp; T(<span class="number">1</span>) &lt;&lt; i) ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; base;</span><br><span class="line">Vec() &#123;&#125;;</span><br><span class="line">Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; vec): base(vec) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;base.clear();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> base.size();&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">auto</span> v : vec.base) push(v);&#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="function">Vec <span class="title">ret</span><span class="params">(base)</span></span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T ret = base.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::min(ret, v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line">T ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(base.begin(), base.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ base.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">find_by_order</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line">T ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &amp; base.size(); ++i) <span class="keyword">if</span> (k &amp; T(<span class="number">1</span>) &lt;&lt; i) ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="CF1101G"><a href="#CF1101G" class="headerlink" title="CF1101G"></a><a href="https://codeforces.com/problemset/problem/1101/G" target="_blank" rel="noopener">CF1101G</a></h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; base;</span><br><span class="line">Vec() &#123;base.clear();&#125;</span><br><span class="line">Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec) &#123;base = vec;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">auto</span> v : vec.base) push(v);&#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="function">Vec <span class="title">ret</span><span class="params">(base)</span></span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;base.clear();&#125;</span><br><span class="line">&#125;res[maxn], vec[maxn], tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">auto</span>&amp; que,<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) res[i].push(c[l]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= l; --i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].second &lt;= m)</span><br><span class="line">left.push_back(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (seg[i].first &gt; m)</span><br><span class="line">right.push_back(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res[i] = vec[seg[i].first] + vec[seg[i].second];</span><br><span class="line">&#125;</span><br><span class="line">que.clear();</span><br><span class="line">cdq(left, l, m);</span><br><span class="line">cdq(right, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; que(q);</span><br><span class="line">iota(que.begin(), que.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">cdq(que, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i].max() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1100F"><a href="#CF1100F" class="headerlink" title="CF1100F"></a><a href="https://codeforces.com/problemset/problem/1100/F" target="_blank" rel="noopener">CF1100F</a></h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), base;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!a.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; base.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU3949"><a href="#HDU3949" class="headerlink" title="HDU3949"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3949" target="_blank" rel="noopener">HDU3949</a></h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(o) o.begin(), o.end()</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;T&gt; base;</span><br><span class="line">Vec() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> base.size();&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(T e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.pb(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(all(base));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ base.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">T <span class="title">find_by_rank</span><span class="params">(T k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= T(<span class="number">1</span>) &lt;&lt; base.size()) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">T ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ base.size(); ++i) <span class="keyword">if</span> (k &amp; T(<span class="number">1</span>) &lt;&lt; i) ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= t; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">Vec&lt;ll&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">ll a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">vec.push(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">vec.sort();</span><br><span class="line">ll flag = (n == vec.size()) - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line">ll k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec.find_by_rank(k + flag) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
