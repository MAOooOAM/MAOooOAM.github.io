<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2019暑假牛客多校五</title>
      <link href="/2019/08/06/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%BA%94/"/>
      <url>/2019/08/06/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%BA%94/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/885" target="_blank" rel="noopener">2019牛客暑期多校训练营（第五场）</a></p><h2 id="A-digits-2"><a href="#A-digits-2" class="headerlink" title="A. digits 2"></a>A. digits 2</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-generator-1"><a href="#B-generator-1" class="headerlink" title="B. generator 1"></a>B. generator 1</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>求二阶线性递推第$~n~$项。<br>数据范围$~1\leq n&lt; 10^{10^6}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>矩阵快速幂。注意到$~n~$是个大整数，因此在$~2~$进制下分解$~n~$做快速幂会$~\rm TLE~$，考虑$~10~$进制下分解的快速幂，优化做法的时间复杂度为$~O(40\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>       u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line">u32 mod;</span><br><span class="line"><span class="function">u32 <span class="title">add</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function">u32 <span class="title">sub</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function">u32 <span class="title">mul</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1U</span>LL * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(i) for (int i : &#123; 0, 1 &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">u32 val[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">matrix(u32 x = <span class="number">0</span>) &#123; <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="number">16</span>); loop(i) val[i][i] = x; &#125;</span><br><span class="line"><span class="keyword">const</span> u32* <span class="keyword">operator</span>[] (<span class="keyword">size_t</span> i) <span class="keyword">const</span> &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">      u32* <span class="keyword">operator</span>[] (<span class="keyword">size_t</span> i)       &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">matrix <span class="keyword">operator</span>* (<span class="keyword">const</span> matrix&amp; m) <span class="keyword">const</span> &#123;</span><br><span class="line">matrix ret;</span><br><span class="line">loop(i) loop(j) loop(k) ret[i][j] = add(ret[i][j], mul(val[i][k], m[k][j]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span>^ (<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">matrix ret(1), tmp(*this);</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * tmp;</span><br><span class="line">tmp = tmp * tmp;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">u32 x0, x1, a, b;</span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x0 &gt;&gt; x1 &gt;&gt; a &gt;&gt; b &gt;&gt; n &gt;&gt; mod;</span><br><span class="line">matrix bas[<span class="number">10</span>], res(<span class="number">1</span>);</span><br><span class="line">bas[<span class="number">0</span>] = matrix(<span class="number">1</span>);</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = a;</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = b;</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="number">10</span>; ++i) bas[i] = bas[i - <span class="number">1</span>] * bas[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : n) res = (res ^ <span class="number">10</span>) * bas[ch - <span class="string">'0'</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(mul(res[<span class="number">1</span>][<span class="number">0</span>], x1), mul(res[<span class="number">1</span>][<span class="number">1</span>], x0)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-generator-2"><a href="#C-generator-2" class="headerlink" title="C. generator 2"></a>C. generator 2</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n,x_0,a,b,p~$，序列$~x_0,x_1,\dots,x_{n-1}~$由$~x_i=(a\cdot x_{i-1}+b)\mod p~$生成。询问$~v~$在序列中第一次出现的位置或不存在。<br>数据范围$~T\leq4,~1\leq n\leq10^{18},~0\leq x_0,a,b&lt; p\leq10^9+9,~Q\leq1000~$，且$~p~$是质数。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对平凡情况分类讨论。对于非平凡情况，可以求出$~\lbrace\,x\,\rbrace~$的通项公式</p><script type="math/tex; mode=display">x_t=(x_0+\frac{b}{a-1})a^t-\frac{b}{a-1}</script><p>由于$~p~$是质数，每次询问就是在域$~\Bbb Z_{p}~$的乘法群上询问方程</p><script type="math/tex; mode=display">a^t=\frac{v+\frac{b}{a-1}}{x_0+\frac{b}{a-1}}</script><p>中$~t~$的最小解。对于形如$~a^x=b\mod p~$的数论方程，朴素的解法是用$~\rm BSGS~$算法，解当个方程的复杂度为$~O(\sqrt p\log p)~$。直接强解$~Q~$个方程显然会$~\rm TLE~$。考虑到$~\rm BSGS~$的复杂度组成为$~O((b+g)\cdot\log b)~$，其中$~b~$和$~g~$是$~\text{baby step}~$和$~\text{giant step}~$的大小，满足$~O(b\times g)=O(p)~$。且此时需要求解的$~Q~$个方程中$~a~$和$~p~$是不变的，因此可以预处理$~\sqrt{pQ}~$个$~\text{baby step}~$，这样总时间复杂度变为$~O(T\sqrt{pQ}\log(p+Q))~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; p ? a + b : a + b - p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + p : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 n;</span><br><span class="line"><span class="keyword">int</span> x0, a, b, Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x0 &gt;&gt; a &gt;&gt; b &gt;&gt; p &gt;&gt; Q;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (x0 == v)               res =  <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n != <span class="number">1</span> &amp;&amp; b == v) res =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>                       res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">res = mul(sub(v, x0), fpow(b, p - <span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span> (res &gt;= n) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x0 == v ? <span class="string">"0\n"</span> : <span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> y = mul(b, fpow(sub(a, <span class="number">1</span>), p - <span class="number">2</span>)), z = add(x0, y);</span><br><span class="line"><span class="keyword">if</span> (z) &#123;</span><br><span class="line"><span class="keyword">int</span> size = min(<span class="keyword">int</span>(<span class="built_in">sqrt</span>(p)) &lt;&lt; <span class="number">5</span>, p - <span class="number">1</span>), giant = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; baby(size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) &#123;</span><br><span class="line">baby[i] = make_pair(giant, i);</span><br><span class="line">giant = mul(giant, a);</span><br><span class="line">&#125;</span><br><span class="line">sort(baby.begin(), baby.end());</span><br><span class="line">giant = fpow(giant, p - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">v = mul(add(v, y), fpow(z, p - <span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> gs = <span class="number">0</span>; gs &lt; p; gs += size) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(baby.begin(), baby.end(), make_pair(v, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end() &amp;&amp; ite-&gt;first == v) &#123;</span><br><span class="line">res = gs + ite-&gt;second;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">v = mul(v, giant);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt;= n) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x0 == v ? <span class="string">"0\n"</span> : <span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-generator-3"><a href="#D-generator-3" class="headerlink" title="D. generator 3"></a>D. generator 3</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>序列$~x_0,x_1,\dots,x_{n-1}~$和$~y_0,y_1,\dots,y_{n-1}~$由$~x_i=(a_x\cdot x_{i-1}+b_x)\mod p_x~$和$~y_i=(a_y\cdot y_{i-1}+b_y)\mod p_y~$生成。计算点集$~(x_0,y_0),(x_1,y_1),\dots,(x_{n-1},y_{n-1})~$的凸包的面积。<br>数据范围$~0\leq a,b&lt; p\leq2\times10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>找出两个序列的循环节，显然循环节的长度不会超过$~p~$。然后根据$~y~$循环节的长度对$~x~$的一个循环节重排列，这样每个$~y_i~$对应的$~x~$取值必然为这个重排列的连续一段，对$~x~$建立$~\rm ST~$表即可。这样就能在$~O(p\log p)~$的时间内求出$~O(p)~$个对凸包有影响的点，且其余点均对凸包没有影响。总是复杂度为$~O(p\log p)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">i64 x, y;</span><br><span class="line">point(i64 _x = <span class="number">0</span>, i64 _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">point <span class="keyword">operator</span>- (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x - p.x, y - p.y); &#125;</span><br><span class="line">i64   <span class="keyword">operator</span>^ (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x ? y &lt; p.y  : x &lt; p.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convex_hull</span><span class="params">(point p[], <span class="keyword">int</span> n, point con[])</span> </span>&#123;</span><br><span class="line">sort(p, p + n);</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">1</span> &amp;&amp; ((con[m - <span class="number">1</span>] - con[m - <span class="number">2</span>]) ^ (p[i] - con[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">con[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; k &amp;&amp; ((con[m - <span class="number">1</span>] - con[m - <span class="number">2</span>]) ^ (p[i] - con[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">con[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) --m;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">area</span><span class="params">(point p[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">i64 ret = p[n - <span class="number">1</span>] ^ p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) ret += p[i - <span class="number">1</span>] ^ p[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">point p[maxn], con[maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn], lastx[maxn], lasty[maxn], tmp[maxn], mi[maxn][<span class="number">20</span>], mx[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l);</span><br><span class="line"><span class="keyword">return</span> min(mi[l][k], mi[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_max</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l);</span><br><span class="line"><span class="keyword">return</span> max(mx[l][k], mx[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ax, ay, bx, by, px, py;</span><br><span class="line">i64 n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[<span class="number">0</span>] &gt;&gt; y[<span class="number">0</span>] &gt;&gt; ax &gt;&gt; ay &gt;&gt; bx &gt;&gt; by &gt;&gt; px &gt;&gt; py &gt;&gt; n;</span><br><span class="line">p[<span class="number">0</span>] = point(x[<span class="number">0</span>], y[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">x[i] = (<span class="number">1L</span>L * ax * x[i - <span class="number">1</span>] + bx) % px;</span><br><span class="line">y[i] = (<span class="number">1L</span>L * ay * y[i - <span class="number">1</span>] + by) % py;</span><br><span class="line">p[i] = point(x[i], y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt;&gt; <span class="number">20</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(lastx, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(lasty, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> firstx = <span class="number">-1</span>, firsty = <span class="number">-1</span>, loopx = <span class="number">-1</span>, loopy = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (~lastx[x[i]]) &#123;</span><br><span class="line">firstx = lastx[x[i]];</span><br><span class="line">loopx = i - firstx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lastx[x[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (~lasty[y[i]]) &#123;</span><br><span class="line">firsty = lasty[y[i]];</span><br><span class="line">loopy = i - firsty;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lasty[y[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = max(firstx, firsty), *xx = x + size, *yy = y + size;</span><br><span class="line">n -= size;</span><br><span class="line"><span class="keyword">int</span> gcd = __gcd(loopx, loopy), stepx = loopx / gcd, stepy = loopy / gcd, invx, invy;</span><br><span class="line">exgcd(stepx, stepy, invx, invy);</span><br><span class="line">invy = (invy % stepx + stepx) % stepx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != gcd; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != stepx; ++j)</span><br><span class="line">mi[j][<span class="number">0</span>] = mi[j + stepx][<span class="number">0</span>] = mx[j][<span class="number">0</span>] = mx[j + stepx][<span class="number">0</span>] = xx[(<span class="number">1L</span>L * j * loopy + i) % loopx];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != <span class="number">20</span>; ++k) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + (<span class="number">1</span> &lt;&lt; k) &lt;= (stepx &lt;&lt; <span class="number">1</span>); ++j) &#123;</span><br><span class="line">mi[j][k] = min(mi[j][k - <span class="number">1</span>], mi[j + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))][k - <span class="number">1</span>]);</span><br><span class="line">mx[j][k] = max(mx[j][k - <span class="number">1</span>], mx[j + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))][k - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != stepy; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1L</span>L * j * invy % stepx, r = l + min&lt;i64&gt;(stepx, (n - j * gcd - i - <span class="number">1</span>) / loopy + <span class="number">1</span>);</span><br><span class="line">p[size++] = point(st_min(l, r), yy[j * gcd + i]);</span><br><span class="line">p[size++] = point(st_max(l, r), yy[j * gcd + i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; area(con, convex_hull(p, n, con)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-independent-set-1"><a href="#E-independent-set-1" class="headerlink" title="E. independent set 1"></a>E. independent set 1</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点的简单图，计算所有子图的最大独立集大小之和。<br>数据范围$~2\leq n\leq26~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\rm DP~$，转移式为</p><script type="math/tex; mode=display">f(S)=\max(f(S\,\backslash\lbrace\,\min S\,\rbrace),f((S\,\backslash\lbrace\,\min S\,\rbrace)\cap A(\min S)^\complement)+1)</script><p>其中$~A(u)~$表示与$~u~$相邻的点集。<br>这样总时间复杂度和空间复杂度均为$~O(2^n)~$。<br>注意$~\rm DP~$数组要用<code>8bit</code>数据类型。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u08;</span><br><span class="line">u08 dp[<span class="number">1</span> &lt;&lt; <span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u] ^= <span class="number">1</span> &lt;&lt; v;</span><br><span class="line">adj[v] ^= <span class="number">1</span> &lt;&lt; u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = __builtin_ctz(i);</span><br><span class="line">dp[i] = max&lt;u08&gt;(dp[i ^ <span class="number">1</span> &lt;&lt; j], dp[(i ^ <span class="number">1</span> &lt;&lt; j) &amp; ~adj[j]] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(dp, dp + (<span class="number">1</span> &lt;&lt; n), <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-maximum-clique-1"><a href="#F-maximum-clique-1" class="headerlink" title="F. maximum clique 1"></a>F. maximum clique 1</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个集合$~\lbrace\,a_1,a_2,\dots,a_N\,\rbrace~$，找出一个最大的子集满足任意两个数在$~2~$进制表示下至少要有$~2~$个位置不一样。<br>数据范围$~1\leq N\leq5000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先去重，那么异或之后为$~2~$的幂的一对数不能同时在答案之中。对于每个数字，把它和与它异或之后为$~2~$的幂的数字相连。显然每个点至多连$~32~$条边，且这是个二分图，因为每条边只能连接$~2~$进制下有奇数个$~1~$的数和有偶数个$~1~$的数。那就是一个二分图最大独立集问题。先找出最大匹配，然后找出最小点覆盖，补集就是最大独立集。总时间复杂度为$~O(N^2)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; side[<span class="number">2</span>], adj[maxn];</span><br><span class="line"><span class="keyword">int</span> size0, size1, link[maxn], vis[maxn], match[maxn], sav[maxn], ban[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!~link[v] || DFS(link[v])) &#123;</span><br><span class="line">link[v] = u;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(link, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != size0; ++u) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line">ret += DFS(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">sav[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!ban[v]) &#123;</span><br><span class="line">ban[v] = <span class="number">1</span>;</span><br><span class="line">dfs(link[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> aa;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">a.insert(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> aa : a) side[__builtin_parity(aa)].push_back(aa);</span><br><span class="line">size0 = side[<span class="number">0</span>].size();</span><br><span class="line">size1 = side[<span class="number">1</span>].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != size1; ++j)</span><br><span class="line"><span class="keyword">if</span> (__builtin_popcount(side[<span class="number">0</span>][i] ^ side[<span class="number">1</span>][j]) == <span class="number">1</span>) adj[i].push_back(j);</span><br><span class="line">hungary();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size1; ++i) <span class="keyword">if</span> (~link[i]) match[link[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">if</span> (!match[i]) dfs(i);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">if</span> (sav[i]) res.push_back(side[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size1; ++i) <span class="keyword">if</span> (!ban[i]) res.push_back(side[<span class="number">1</span>][i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-subsequence-1"><a href="#G-subsequence-1" class="headerlink" title="G. subsequence 1"></a>G. subsequence 1</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个数字串$~s~$和$~t~$，计算$~s~$由多少个子序列在数字表示下比$~t~$大，子序列不能有前导$~0~$。<br>数据范围$~1\leq m\leq n\leq3000,~\sum n\leq3000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于$~s~$长度大于$~m~$的子序列，显然大于$~t~$，组合数枚举即可。下面计算长度等于$~m~$且大于$~t~$的子序列。记$~f(i,j)~$表示$~s~$长度为$~i~$的后缀中有多少长度为$~j~$的子序列大于$~t~$长度为$~j~$的后缀。直接$~\rm DP~$，最后$~f(n,m)~$就是答案。总时间复杂度为$~O(nm)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fac[maxn], fiv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> n &lt; m ? <span class="number">0</span> : mul(fac[n], mul(fiv[m], fiv[n - m])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = fiv[<span class="number">0</span>] = fiv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">fiv[i] = mul(fiv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (s[i] != <span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; i + j &lt; n; ++j) res = add(res, C(n - i - <span class="number">1</span>, j));</span><br><span class="line"><span class="keyword">int</span> *dp0 = dp[<span class="number">0</span>], *dp1 = dp[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">size_t</span> size = (m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp0, <span class="number">0</span>, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(dp1, dp0, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[n - i] &gt;  t[m - j]) dp1[j] = add(dp1[j], C(i - <span class="number">1</span>, j - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (s[n - i] == t[m - j]) dp1[j] = add(dp1[j], dp0[j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">swap(dp0, dp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(res, dp0[m]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-subsequence-2"><a href="#H-subsequence-2" class="headerlink" title="H. subsequence 2"></a>H. subsequence 2</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个隐藏的由前$~m~$个小写字母组成的字符串，给出$~\binom{m}{2}~$种字母对，在保留该对字母对情况下的剩余字符串。构造出合法原串或者不存在。<br>数据范围$~1\leq n\leq10^4,~2\leq m\leq10~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先判断每个字母出现次数的合法性，然后根据给出的字符串建图，拓扑排序即可。时间复杂度为$~O(nm+m^2)~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =  <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">100000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; drct[maxc], from[maxc], cnt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> deg[maxc];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; drct[u].push_back(v); from[v].push_back(u); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m * (m - <span class="number">1</span>) / <span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> ch, str;</span><br><span class="line"><span class="keyword">int</span> l, tot[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; l;</span><br><span class="line"><span class="keyword">if</span> (l) <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; id(l), num(l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) cnt[ch[j] - <span class="string">'a'</span>].push_back(count(str.begin(), str.end(), ch[j]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != l; ++i) &#123;</span><br><span class="line">id[i] = str[i] == ch[<span class="number">1</span>];</span><br><span class="line">num[i] = tot[id[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; ++i) link((ch[id[i - <span class="number">1</span>]] - <span class="string">'a'</span>) * maxn + num[i - <span class="number">1</span>], (ch[id[i]] - <span class="string">'a'</span>) * maxn + num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i)</span><br><span class="line"><span class="keyword">if</span> (*min_element(cnt[i].begin(), cnt[i].end()) != *max_element(cnt[i].begin(), cnt[i].end()))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != cnt[i][<span class="number">0</span>]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (drct[i * maxn + j].empty()) &#123;</span><br><span class="line">topo.push_back(i * maxn + j);</span><br><span class="line">res.push_back(<span class="keyword">char</span>(i + <span class="string">'a'</span>));</span><br><span class="line">&#125;</span><br><span class="line">deg[i * maxn + j] = drct[i * maxn + j].size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(topo.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = topo[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : from[u]) <span class="keyword">if</span> (!--deg[v]) &#123;</span><br><span class="line">topo.push_back(v);</span><br><span class="line">res.push_back(<span class="keyword">char</span>(v / maxn + <span class="string">'a'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(res.size()) != n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-three-points-1"><a href="#I-three-points-1" class="headerlink" title="I. three points 1"></a>I. three points 1</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~[0,w]\times[0,h]~$上选$~3~$个点，满足两两距离分别为$~a,b,c~$，保证有解。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>计算几何。一定存在一合法解满足一个点在原点，还有一个点在矩形边缘，暴力枚举即可.</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">constexpr</span> T <span class="title">regular</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> min&lt;T&gt;(<span class="number">1</span>, max&lt;T&gt;(<span class="number">-1</span>, x)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">point  <span class="keyword">operator</span>* (<span class="keyword">const</span> <span class="keyword">double</span> k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x * k, y * k); &#125;</span><br><span class="line">point  <span class="keyword">operator</span>/ (<span class="keyword">const</span> <span class="keyword">double</span> k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x / k, y / k); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> hypot(x, y); &#125;</span><br><span class="line"><span class="function">point <span class="title">unit</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span> / len(); &#125;</span><br><span class="line"><span class="function">point <span class="title">rotate</span><span class="params">(<span class="keyword">const</span> point&amp; ang)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> point(x * ang.x - y * ang.y, x * ang.y + y * ang.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; os, <span class="keyword">const</span> point&amp; p) &#123; <span class="keyword">return</span> os &lt;&lt; p.x &lt;&lt; <span class="string">' '</span> &lt;&lt; p.y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> w, h, w2, h2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> point&amp; p)</span> </span>&#123; <span class="keyword">return</span> p.x + eps &gt; <span class="number">0</span> &amp;&amp; p.x &lt; w + eps &amp;&amp; p.y + eps &gt; <span class="number">0</span> &amp;&amp; p.y &lt; h + eps; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ctrl</span><span class="params">(point&amp; p)</span> </span>&#123; p.x = min(w, max&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, p.x)); p.y = min(h, max&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, p.y)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, point&amp; A, point&amp; B, point&amp; C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> a2 = a * a, b2 = b * b, c2 = c * c;</span><br><span class="line"><span class="keyword">double</span> cosA = regular((b2 + c2 - a2) / <span class="number">2</span> / b / c), sinA = regular(<span class="built_in">sqrt</span>(<span class="number">1</span> - cosA * cosA));</span><br><span class="line">point angA(cosA, sinA), revA(cosA, -sinA);</span><br><span class="line"><span class="keyword">if</span> (cosA + eps &gt; <span class="number">0</span>) &#123;</span><br><span class="line">A = point();</span><br><span class="line"><span class="keyword">if</span> (cosA &lt; eps) &#123;</span><br><span class="line"><span class="keyword">if</span> (w + eps &gt; b &amp;&amp; h + eps &gt; c) &#123;</span><br><span class="line">B = point(<span class="number">0</span>, c);</span><br><span class="line">C = point(b, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (w + eps &gt; c &amp;&amp; h + eps &gt; b) &#123;</span><br><span class="line">B = point(c, <span class="number">0</span>);</span><br><span class="line">C = point(<span class="number">0</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">B = h + eps &gt; c ? point(<span class="number">0</span>, c) : point(<span class="built_in">sqrt</span>(c2 - h2), h);</span><br><span class="line">C = B.unit().rotate(angA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">C = B.unit().rotate(revA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">B = w + eps &gt; c ? point(c, <span class="number">0</span>) : point(w, <span class="built_in">sqrt</span>(c2 - w2));</span><br><span class="line">C = B.unit().rotate(angA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">C = B.unit().rotate(revA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">double</span> l[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; l[<span class="number">2</span>] &gt;&gt; l[<span class="number">1</span>] &gt;&gt; l[<span class="number">0</span>];</span><br><span class="line">w2 = w * w, h2 = h * h;</span><br><span class="line">point res[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> per[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">do</span> &#123; <span class="keyword">if</span> (solve(l[per[<span class="number">0</span>]], l[per[<span class="number">1</span>]], l[per[<span class="number">2</span>]], res[per[<span class="number">0</span>]], res[per[<span class="number">1</span>]], res[per[<span class="number">2</span>]])) <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (next_permutation(per, per + <span class="number">3</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) ctrl(res[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[<span class="number">0</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; res[<span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; res[<span class="number">2</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-three-points-2"><a href="#J-three-points-2" class="headerlink" title="J. three points 2"></a>J. three points 2</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树，每次询问$~a,b,c~$，找出$~3~$个点$~X,Y,Z~$满足$~XY,XZ,YZ~$的距离分别是$~a,b,c~$或不存在。<br>数据范围$~3\leq n,Q\leq2\times10^5~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑单组询问。设$~XY,XZ,YZ~$的交点为$~O~$，则有$~OX=\frac{a+b-c}{2},OY=\frac{c+a-b}{2},OZ=\frac{b+c-a}{2}~$，这$~3~$个值按升序记为$~\alpha,\beta,\gamma~$。根据三角不等式和奇偶性排除显然无解的询问，然后设法寻找$~O~$点。记$~A(u)~$为与$~u~$相邻的点集，记$~f(u,v)~$为以$~u~$为起点，必经$~v~$的简单路径的最长长度。对于每个点$~u~$，考虑可重集$~\lbrace\,f(u,v):v\in A(u)\,\rbrace~$的最大的$~3~$个元素，按升序记为$~p_u,q_u,r_u~$。则此时点$~u~$可以作为交点的充要条件是$~p_u\geq\alpha,q_u\geq\beta,r_u\geq\gamma~$。对于所有$~p,q,r~$的处理可以通过两次$~\rm DFS~$结合树形$~\rm DP~$在$~O(n)~$内完成。<br>对于多组询问，先考虑寻找$~O~$点。每个$~(p_u,q_u,r_u)~$可以看作是在$~(p_u,q_u)~$处有一个权值为$~r_u~$的点，那么每个$~(\alpha,\beta,\gamma)~$的询问等价于点$~(\alpha,\beta)~$的右上方是否存在权值不小于$~\gamma~$的点。对询问先离线，然后扫描线加树状数组即可解决。<br>在找到$~O~$点之后，考虑在之前$~\rm DP~$的过程中不仅记录路径的最大值，同时记录最远的点是什么。那么$~X,Y,Z~$的查询等价于在$~OA,OB,OC~$上查询到$~O~$距离为$~\alpha,\beta,\gamma~$的点。用类似倍增$~\rm LCA~$的方法即可解决。<br>总时间复杂度为$~O((n+Q)\cdot\log n)~$</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> pa[maxn][<span class="number">18</span>], dep[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">18</span>; ++i) <span class="keyword">if</span> (k &amp; <span class="number">1</span> &lt;&lt; i) u = pa[u][i];</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">u = find(u, dep[u] - dep[v]);</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] != pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f = lca(u, v);</span><br><span class="line"><span class="keyword">return</span> dep[u] - dep[f] &lt; d ? find(v, dep[u] + dep[v] - dep[f] - dep[f] - d) : find(u, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs0</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;) dp[u][i] = make_pair(<span class="number">0</span>, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs0(v, u);</span><br><span class="line">dp[u][<span class="number">2</span>] = max(dp[u][<span class="number">2</span>], make_pair(dp[v][<span class="number">0</span>].first + <span class="number">1</span>, dp[v][<span class="number">0</span>].second));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">1</span>, <span class="number">0</span> &#125;) <span class="keyword">if</span> (dp[u][i] &lt; dp[u][i + <span class="number">1</span>]) swap(dp[u][i], dp[u][i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="number">18</span>; ++i) pa[u][i] = pa[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">auto</span> from = &amp;dp[p][dp[p][<span class="number">0</span>].second == dp[u][<span class="number">0</span>].second];</span><br><span class="line">dp[u][<span class="number">2</span>] = max(dp[u][<span class="number">2</span>], make_pair(from-&gt;first + <span class="number">1</span>, from-&gt;second));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">1</span>, <span class="number">0</span> &#125;) <span class="keyword">if</span> (dp[u][i] &lt; dp[u][i + <span class="number">1</span>]) swap(dp[u][i], dp[u][i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) dfs1(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> query[maxn][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x, y, z; &#125; tree[maxn], fake[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Y0[maxn], Y1[maxn];</span><br><span class="line"></span><br><span class="line">node *bit[maxn], *res[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">better</span><span class="params">(node* ptr1, node* ptr2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> ptr2;</span><br><span class="line"><span class="keyword">if</span> (ptr2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> ptr1;</span><br><span class="line"><span class="keyword">return</span> ptr1-&gt;z &lt; ptr2-&gt;z ? ptr2 : ptr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs0(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u : adj[<span class="number">0</span>]) dfs1(u, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">tree[i] = &#123; dp[i][<span class="number">2</span>].first + <span class="number">1</span>, dp[i][<span class="number">1</span>].first + <span class="number">1</span>, dp[i][<span class="number">0</span>].first + <span class="number">1</span>&#125;;</span><br><span class="line">Y0[tree[i].y].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != Q; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> ((a ^ b ^ c) &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">3</span>] = &#123; (a + b - c) &gt;&gt; <span class="number">1</span>, (c + a - b) &gt;&gt; <span class="number">1</span>, (b + c - a) &gt;&gt; <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(query[i], d, <span class="number">12</span>);</span><br><span class="line">sort(d, d + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (d[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">fake[i] = &#123; d[<span class="number">0</span>] + <span class="number">1</span>, d[<span class="number">1</span>] + <span class="number">1</span>, d[<span class="number">2</span>] + <span class="number">1</span> &#125;;</span><br><span class="line">Y1[fake[i].y].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">fill_n(bit, n, <span class="literal">nullptr</span>);</span><br><span class="line">fill_n(res, n, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = n; y; --y) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : Y0[y]) <span class="keyword">for</span> (<span class="keyword">int</span> j = tree[i].x; j       ; j ^= lowbit(j)) bit[j] = better(bit[j], tree + i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : Y1[y]) <span class="keyword">for</span> (<span class="keyword">int</span> j = fake[i].x; j &lt; maxn; j += lowbit(j)) res[i] = better(res[i], bit[j]  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != Q; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (res[i] == <span class="literal">nullptr</span> || res[i]-&gt;z &lt; fake[i].z) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> center = res[i] - tree;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;, ans[<span class="number">3</span>];</span><br><span class="line">sort(p, p + <span class="number">3</span>, [&amp;] (<span class="keyword">int</span> j, <span class="keyword">int</span> k) &#123; <span class="keyword">return</span> query[i][j] &lt; query[i][k]; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j) ans[p[j]] = find(center, dp[center][<span class="number">2</span> - j].second, query[i][p[j]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j : &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;) <span class="built_in">cout</span> &lt;&lt; ans[j] &lt;&lt; (j == <span class="number">2</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019暑假牛客多校四 (TBC)</title>
      <link href="/2019/08/01/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E5%9B%9B%20(TBC)/"/>
      <url>/2019/08/01/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E5%9B%9B%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/884" target="_blank" rel="noopener">2019牛客暑期多校训练营（第四场）</a></p><h2 id="A-meeting"><a href="#A-meeting" class="headerlink" title="A. meeting"></a>A. meeting</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> vip[maxn], vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">vip[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bfs0(<span class="number">1</span>, x);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(bfs0.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = bfs0[i];</span><br><span class="line"><span class="keyword">if</span> (vip[u]) x = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">bfs0.push_back(v);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; bfs1(<span class="number">1</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(bfs1.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = bfs1[i].first, d = bfs1[i].second;</span><br><span class="line"><span class="keyword">if</span> (vip[u]) res = d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">bfs1.emplace_back(v, d + <span class="number">1</span>);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((res + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-xor"><a href="#B-xor" class="headerlink" title="B. xor"></a>B. xor</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个集合序列，每次询问区间$~[l,r]~$的集合是否存在一个子集使得异或值为$~x~$。<br>数据范围$~1\leq n,m\leq50000,~0\leq x&lt; 2^{32}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>每个集合可以看作一个线性空间，于是询问等价于问$~x~$是否属于一个区间的交。线性基求交等价于原空间的解空间求并。将原空间的基以上三角形式维护，则解空间可以在$~O(32^2)~$内求得。以解空间建立一棵线段树，对于查询，不要合并，直接在每个线段树节点上判断$~x~$是否与当前这个解空间正交即可。总时间复杂度为$~O(32^2n+32m\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> parity __builtin_parity</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up0    __builtin_clz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">linear_space</span> :</span> <span class="built_in">vector</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) x = min(x, x ^ e); <span class="keyword">if</span> (x) <span class="keyword">this</span>-&gt;push_back(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(), <span class="keyword">this</span>-&gt;end()); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) <span class="keyword">if</span> (parity(x &amp; e)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; linear_space&lt;T&gt; solve(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s) &#123;</span><br><span class="line">linear_space&lt;T&gt; ker;</span><br><span class="line"><span class="keyword">for</span> (u32 i = <span class="number">0</span>; i != <span class="number">32U</span>; ++i) &#123;</span><br><span class="line">u32 x = <span class="number">1U</span> &lt;&lt; i;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (up0(x) == up0(e)) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (parity(x &amp; e)) x ^= <span class="number">1U</span> &lt;&lt; (<span class="number">31U</span> - up0(e));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) ker.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ker;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linear_space&lt;T&gt; merge(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s1, <span class="keyword">const</span> linear_space&lt;T&gt;&amp; s2) &#123;</span><br><span class="line">linear_space&lt;T&gt; ret(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : s2) ret.push(e);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u32 maxn = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">linear_space&lt;u32&gt; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(u32 begin, u32 end, u32 index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">u32 sz;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sz;</span><br><span class="line"><span class="keyword">while</span> (sz--) &#123;</span><br><span class="line">u32 x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">seg[index].push(x);</span><br><span class="line">&#125;</span><br><span class="line">seg[index].sort();</span><br><span class="line">seg[index] = solve(seg[index]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">seg[index] = merge(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(u32 begin, u32 end, u32 index, u32 l, u32 r, u32 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> seg[index].check(x);</span><br><span class="line"><span class="keyword">return</span> query(lll, l, r, x) &amp;&amp; query(rrr, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">u32 n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line">u32 l, r, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (query(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x) ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-sequence"><a href="#C-sequence" class="headerlink" title="C. sequence"></a>C. sequence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定序列$~a_1,a_2,\dots,a_n~$和$~b_1,b_2,\dots,b_n~$，计算$~\max_{1\leq l\leq r\leq n}((\min_{i=l}^{r}a_i)\times(\sum_{i=l}^{r}b_i))~$。<br>数据范围$~1\leq n\leq3\times10^6,~-10^6\leq a,b\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过单调栈可以线性求出对于每个$~a_i~$，当$~a_i=\min_{j=l}^{r}a_j~$时$~l~$和$~r~$的取值范围。于是问题转化为对于$~b~$序列询问区间内的最大子段和。以$~b~$的前缀和建立最大最小值线段树即可。总时间复杂度为$~O(n\log n)~$，需要注意常数优化。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], ll[maxn], rr[maxn];</span><br><span class="line"><span class="keyword">int64_t</span> pre[maxn], mi[maxn &lt;&lt; <span class="number">1</span>], mx[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">mi[index] = mx[index] = pre[begin];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">mi[index] = min(mi[lson], mi[rson]);</span><br><span class="line">mx[index] = max(mx[lson], mx[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> min(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> LLONG_MAX;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> mi[index];</span><br><span class="line"><span class="keyword">return</span> min(min(lll, l, r), min(rrr, l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> max(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> LLONG_MIN;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> mx[index];</span><br><span class="line"><span class="keyword">return</span> max(max(lll, l, r), max(rrr, l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">a[<span class="number">0</span>] = a[n + <span class="number">1</span>] = INT_MIN;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = pre[i - <span class="number">1</span>] + b[i];</span><br><span class="line">build(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">left.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[left.top()] &gt;= a[i]) left.pop();</span><br><span class="line">ll[i] = left.top();</span><br><span class="line">left.push(i);</span><br><span class="line">&#125;</span><br><span class="line">right.push(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[right.top()] &gt;= a[i]) right.pop();</span><br><span class="line">rr[i] = right.top();</span><br><span class="line">right.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int64_t</span> res = LLONG_MIN;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) res = max(res, a[i] * (max(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, i, rr[i]) - min(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, ll[i], i)));</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) res = max(res, a[i] * (min(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, i, rr[i]) - max(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, ll[i], i)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-triples-I"><a href="#D-triples-I" class="headerlink" title="D. triples I"></a>D. triples I</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">3</span> == <span class="number">0</span>) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span> &lt;&lt; a &lt;&lt; <span class="string">'\n'</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 "</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;i64&gt; one[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">60</span>; ++i) <span class="keyword">if</span> (a &amp; <span class="number">1L</span>L &lt;&lt; i) one[i &amp; <span class="number">1</span>].push_back(<span class="number">1L</span>L &lt;&lt; i);</span><br><span class="line"><span class="keyword">if</span> (one[<span class="number">0</span>].empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">1</span>][<span class="number">0</span>] ^ one[<span class="number">1</span>][<span class="number">1</span>] ^ one[<span class="number">1</span>][<span class="number">2</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = one[<span class="number">1</span>].size() % <span class="number">3</span>; i != <span class="keyword">int</span>(one[<span class="number">1</span>].size()); ++i) temp ^= one[<span class="number">1</span>][i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (one[<span class="number">1</span>].empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">0</span>][<span class="number">0</span>] ^ one[<span class="number">0</span>][<span class="number">1</span>] ^ one[<span class="number">0</span>][<span class="number">2</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = one[<span class="number">0</span>].size() % <span class="number">3</span>; i != <span class="keyword">int</span>(one[<span class="number">0</span>].size()); ++i) temp ^= one[<span class="number">0</span>][i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">0</span>][<span class="number">0</span>] ^ one[<span class="number">1</span>][<span class="number">0</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != <span class="keyword">int</span>(one[i].size()); ++j) temp ^= one[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) <span class="keyword">if</span> ((temp ^ one[i][<span class="number">0</span>]) % <span class="number">3</span> == <span class="number">0</span>) &#123; temp ^= one[i][<span class="number">0</span>]; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-triples-II"><a href="#E-triples-II" class="headerlink" title="E. triples II"></a>E. triples II</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算有多少个长度为$~n~$且均为$~3~$的倍数的序列满足按位或的值为$~a~$。<br>数据范围$~1\leq n\leq10^{18},~0\leq a\leq10^{18}~$</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>预处理$~f(x,y)~$表示，对于一个由$~x~$个模$~3~$余$~1~$和$~y~$个模$~3~$于$~2~$的数构成的集合，有多少个子集满足总和模$~3~$余$~0~$。那么对于每次询问快速幂加容斥即可。总时间复杂度为$~O(\log^4a+T\log^2a\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, i64 n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (n = (n % (mod - <span class="number">1</span>) + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inv[<span class="number">31</span>], fac[<span class="number">31</span>], fiv[<span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fac[n], mul(fiv[k], fiv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pmt[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = fiv[<span class="number">0</span>] = fiv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">30</span>; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">fiv[i] = mul(fiv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; ++j) <span class="keyword">if</span> ((i + j + j) % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = i; ii &lt;= <span class="number">30</span>; ++ii) <span class="keyword">for</span> (<span class="keyword">int</span> jj = j; jj &lt;= <span class="number">30</span>; ++jj)</span><br><span class="line">pmt[ii][jj] = add(pmt[ii][jj], mul(bino(ii, i), bino(jj, j)));</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 n, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">60</span>; ++i) <span class="keyword">if</span> (a &amp; <span class="number">1L</span>L &lt;&lt; i) ++cnt[i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt[<span class="number">0</span>]; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= cnt[<span class="number">1</span>]; ++j)</span><br><span class="line">res = add(res, mul(fpow(pmt[i][j], n), mul(fpow(mod - <span class="number">1</span>, cnt[<span class="number">0</span>] + cnt[<span class="number">1</span>] - i - j), mul(bino(cnt[<span class="number">0</span>], i), bino(cnt[<span class="number">1</span>], j)))));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-merge"><a href="#F-merge" class="headerlink" title="F. merge"></a>F. merge</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>暂略。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平衡树等。暂略。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> size, key, x, max, son[<span class="number">2</span>]; &#125; a[maxn];</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">a[x].size = a[a[x].son[<span class="number">0</span>]].size + a[a[x].son[<span class="number">1</span>]].size + <span class="number">1</span>;</span><br><span class="line">a[x].max = max(a[x].x, max(a[a[x].son[<span class="number">0</span>]].max, a[a[x].son[<span class="number">1</span>]].max));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span> (a[x].key &gt; a[y].key) &#123;</span><br><span class="line">a[x].son[<span class="number">1</span>] = merge(a[x].son[<span class="number">1</span>], y);</span><br><span class="line">update(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[y].son[<span class="number">0</span>] = merge(x, a[y].son[<span class="number">0</span>]);</span><br><span class="line">update(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> k, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (a[a[t].son[<span class="number">0</span>]].size + <span class="number">1</span> &lt;= k) &#123;</span><br><span class="line">x = t;</span><br><span class="line">split(a[t].son[<span class="number">1</span>], k - a[a[t].son[<span class="number">0</span>]].size - <span class="number">1</span>, a[t].son[<span class="number">1</span>], y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y = t;</span><br><span class="line">split(a[t].son[<span class="number">0</span>], k, x, a[t].son[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x) update(x);</span><br><span class="line"><span class="keyword">if</span> (y) update(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].size &gt;= k) <span class="keyword">return</span> get(a[p].son[<span class="number">0</span>], k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].size + <span class="number">1</span> == k)<span class="keyword">return</span> a[p].x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> get(a[p].son[<span class="number">1</span>], k - a[a[p].son[<span class="number">0</span>]].size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].max &gt; x) <span class="keyword">return</span> get_len(a[p].son[<span class="number">0</span>], x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[p].x &gt; x) <span class="keyword">return</span> a[a[p].son[<span class="number">0</span>]].size;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> get_len(a[p].son[<span class="number">1</span>], x) + a[a[p].son[<span class="number">0</span>]].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">srand(time(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i].x;</span><br><span class="line">a[i].max = a[i].x;</span><br><span class="line">a[i].size = <span class="number">1</span>;</span><br><span class="line">a[i].key = rand();</span><br><span class="line">root = merge(root, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x, l, m, r, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; m &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">split(root, r, root, tmp);</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">split(root, m, x, y);</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x &amp;&amp; y) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">int</span> p = get(x, <span class="number">1</span>), q = get(y, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (p &gt; q) &#123; swap(p, q); swap(x, y); &#125;</span><br><span class="line"><span class="keyword">int</span> num = get_len(x, q);</span><br><span class="line">split(x, num, z, x);</span><br><span class="line">root = merge(root, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x) root = merge(root, x);</span><br><span class="line"><span class="keyword">if</span> (y) root = merge(root, y);</span><br><span class="line">root = merge(root, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; get(root, x) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-tree"><a href="#G-tree" class="headerlink" title="G. tree"></a>G. tree</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵大小为$~n~$的无根树$~A~$，每次询问有多少个$~A~$的子图于大小为$~m~$的无根树$~B~$同构。<br>数据范围$~n\leq2000,~t\leq10000,~m\leq12~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>树$~\rm hash~$。预处理出大小不超过$~12~$的有根树，总量为$~7813~$。考虑从小到大枚举，对于当前的树枚举一个节点然后扩张出一个叶节点，整个过程类似于$~\rm BFS~$。然后再考虑将树$~B~$的根连接到树$~A~$的根后得到一棵大小不超过$~12~$的大树的转移方案数，总量为$~13689~$。然后树形$~\rm DP~$，记$~dp(i,j)~$表示再$~A~$中以$~i~$为根的子树中有多少子图在以$~i~$为根时，与第$~j~$棵有根树同构。对于每次询问的树$~B~$，枚举出本质不同的根然后对于预处理的$~dp~$值求和即可。总时间复杂度为$~O(13689n+tm^2\log m)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">const</span> u64 a = <span class="number">314159265359U</span>LL;</span><br><span class="line"><span class="keyword">const</span> u64 b = <span class="number">271828182845U</span>LL;</span><br><span class="line"><span class="keyword">const</span> u64 p = <span class="number">201907281725U</span>LL;</span><br><span class="line"><span class="function">u64 <span class="title">vec_hash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;u64&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">u64 ret = a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : vec) ret = ret * p ^ x;</span><br><span class="line"><span class="keyword">return</span> ret * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">12</span>], n;</span><br><span class="line">tree(<span class="keyword">int</span> _n = <span class="number">0</span>): n(_n) &#123; <span class="built_in">memset</span>(adj, <span class="number">0</span>, <span class="number">48</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; adj[u] ^= <span class="number">1</span> &lt;&lt; v, adj[v] ^= <span class="number">1</span> &lt;&lt; u; &#125;</span><br><span class="line"><span class="function">tree <span class="title">grow</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="function">tree <span class="title">ret</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        ret.link(u, n);</span><br><span class="line">        ++ret.n;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tree <span class="title">merge</span><span class="params">(<span class="keyword">const</span> tree&amp; t)</span> </span>&#123;</span><br><span class="line"><span class="function">tree <span class="title">ret</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != t.n; ++u) ret.adj[n + u] = t.adj[u] &lt;&lt; n;</span><br><span class="line">ret.link(<span class="number">0</span>, n);</span><br><span class="line">ret.n += t.n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;u64&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v != n; ++v) <span class="keyword">if</span> (v != p &amp;&amp; (adj[u] &amp; <span class="number">1</span> &lt;&lt; v)) tmp.push_back(dfs(v, u));</span><br><span class="line">sort(tmp.begin(), tmp.end());</span><br><span class="line"><span class="keyword">return</span> vec_hash(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</span><br><span class="line">tree bfs[maxt];</span><br><span class="line"><span class="keyword">int</span> bfs_size, dp[maxn][maxt], sum[maxt];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; from[maxt];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs(v, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = bfs_size - <span class="number">1</span>; ~i; --i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : from[i])</span><br><span class="line">dp[u][i] = add(dp[u][i], mul(dp[u][e.first], dp[v][e.second]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != bfs_size; ++i) sum[i] = add(sum[i], dp[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;u64, <span class="keyword">int</span>&gt; pmt;</span><br><span class="line">bfs[<span class="number">0</span>] = tree(<span class="number">1</span>);</span><br><span class="line">pmt[bfs[<span class="number">0</span>].dfs(<span class="number">0</span>, <span class="number">0</span>)] = <span class="number">0</span>;</span><br><span class="line">bfs_size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != bfs_size; ++i) <span class="keyword">if</span> (bfs[i].n != <span class="number">12</span>) <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != bfs[i].n; ++u) &#123;</span><br><span class="line">u64 hash = (bfs[bfs_size] = bfs[i].grow(u)).dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pmt.find(hash) == pmt.end()) pmt[hash] = bfs_size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; bfs[i].n != <span class="number">12</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; bfs[i].n + bfs[j].n &lt;= <span class="number">12</span>; ++j)</span><br><span class="line">from[pmt[bfs[i].merge(bfs[j]).dfs(<span class="number">0</span>, <span class="number">0</span>)]].emplace_back(i, j);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">--u, --v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="function">tree <span class="title">B</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">B.link(u - <span class="number">1</span>, v - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; root;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r != m; ++r) root.insert(pmt[B.dfs(r, r)]);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; r : root) res = add(res, sum[r]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-RNGs"><a href="#H-RNGs" class="headerlink" title="H. RNGs"></a>H. RNGs</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>暂略。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>暂略。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>暂略。</p><h2 id="I-string"><a href="#I-string" class="headerlink" title="I. string"></a>I. string</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义字符串$~a~$与$~b~$本质不同当且仅当$~a\neq b~$且$~a\neq rev(b)~$。问给定字符串$~s~$有多少种本质不同子串。<br>数据范围$~1\leq|s|\leq2\times10^5~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将$~s~$与$~rev(s)~$用特殊字符连接后，原本意义上的本质不同子串的统计会包括$~s~$的所有子串$~t~$和$~rev(t)~$，然后再对$~t=rev(t)~$即$~t~$是回文的情况去重即可。用后缀自动机和回文自动机处理即可，总时间复杂度为$~O(|s|\log26)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sam &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>;</span></span><br><span class="line">ul las = <span class="number">1</span>;</span><br><span class="line">ul tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ul c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sam</span>:</span>:node &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ul ch[<span class="number">27</span>];</span><br><span class="line">ul len = <span class="number">0</span>;</span><br><span class="line">ul fa = <span class="number">0</span>;</span><br><span class="line">node() &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">memset</span>(ch, <span class="number">0</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sam::node samnodes[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> sam::add(ul c)</span><br><span class="line">&#123;</span><br><span class="line">ul p = las;</span><br><span class="line">ul np = las = ++tot;</span><br><span class="line"><span class="keyword">auto</span>* nodes = samnodes;</span><br><span class="line">nodes[np].len = nodes[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( ; p &amp;&amp; !nodes[p].ch[c]; p = nodes[p].fa) &#123;</span><br><span class="line">nodes[p].ch[c] = np;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">nodes[np].fa = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ul q = nodes[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (nodes[q].len == nodes[p].len + <span class="number">1</span>) &#123;</span><br><span class="line">nodes[np].fa = q;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ul nq = ++tot;</span><br><span class="line">nodes[nq] = nodes[q];</span><br><span class="line">nodes[nq].len = nodes[p].len + <span class="number">1</span>;</span><br><span class="line">nodes[q].fa = nodes[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> ( ; p &amp;&amp; nodes[p].ch[c] == q; p = nodes[p].fa) &#123;</span><br><span class="line">nodes[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> rstr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N= <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[MAXN][N];</span><br><span class="line"><span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> len[MAXN];</span><br><span class="line"><span class="keyword">int</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;++i) nxt[p][i] =<span class="number">0</span>;</span><br><span class="line">cnt[p] = <span class="number">0</span>;</span><br><span class="line">num[p] = <span class="number">0</span>;</span><br><span class="line">len[p] = l;</span><br><span class="line"><span class="keyword">return</span> p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line">newnode(<span class="number">0</span>);</span><br><span class="line">newnode(<span class="number">-1</span>);</span><br><span class="line">last = <span class="number">0</span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">S[n] = <span class="number">-1</span>;</span><br><span class="line">fail[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(S[n - len[x] - <span class="number">1</span>] != S[n]) &#123;</span><br><span class="line">   x = fail[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">c -= <span class="string">'a'</span>;</span><br><span class="line">S[++n] = c;</span><br><span class="line"><span class="keyword">int</span> cur = get_fail(last);</span><br><span class="line"><span class="keyword">if</span>(!nxt[cur][c]) &#123;</span><br><span class="line"><span class="keyword">int</span> now = newnode(len[cur] + <span class="number">2</span>);</span><br><span class="line">fail[now] = nxt[get_fail(fail[cur])][c];</span><br><span class="line">nxt[cur][c] = now;</span><br><span class="line">num[now] = num[fail[now]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = nxt[cur][c];</span><br><span class="line">cnt[last]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; run;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != str.size(); ++i) &#123;</span><br><span class="line">sam::add(str[i] - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">sam::add(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = str.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">sam::add(str[i] - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">ull ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">2</span>; i &lt;= sam::tot; ++i) &#123;</span><br><span class="line">ans2 += samnodes[i].len - samnodes[samnodes[i].fa].len;</span><br><span class="line">&#125;</span><br><span class="line">ans2 -= ull(str.size() + <span class="number">1</span>) * ull(str.size() + <span class="number">1</span>);</span><br><span class="line">run.init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.size();++i) run.add(str[i],i);</span><br><span class="line">ull ans3 = run.p - <span class="number">2</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, (ans2 + ans3) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-free"><a href="#J-free" class="headerlink" title="J. free"></a>J. free</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在正边权图上给定两点，问最多使$~k~$条边边权为$~0~$的条件下的最短路。<br>数据范围$~1\leq n,m\leq10^3,~0\leq k\leq m~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>跑$~k+1~$次单源最短路或者建$~k+1~$层的大图跑一遍单源最短路。总时间复杂度为$~O(km\log n)~$。注意大图做法需要注意常数。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; adj[maxn], graph[maxx];</span><br><span class="line"><span class="keyword">int_fast8_t</span> vis[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, s, t, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t &gt;&gt; k;</span><br><span class="line">--s, --t;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">--u, --v;</span><br><span class="line">adj[u].emplace_back(v, w);</span><br><span class="line">adj[v].emplace_back(u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) graph[u] = adj[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != k; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : adj[u]) &#123;</span><br><span class="line">graph[i * n + u].emplace_back(i * n + n + e.first, <span class="number">0</span>);</span><br><span class="line">graph[i * n + n + u].emplace_back(i * n + n + e.first, e.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; heap;</span><br><span class="line">heap.emplace(<span class="number">0</span>, s);</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> top =  heap.top();</span><br><span class="line">heap.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[top.second]) <span class="keyword">continue</span>;</span><br><span class="line">vis[top.second] = <span class="number">1</span>;</span><br><span class="line">dis[top.second] = top.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : graph[top.second]) <span class="keyword">if</span> (!vis[e.first]) heap.emplace(top.first + e.second, e.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) res = min(res, dis[i * n + t]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-number"><a href="#K-number" class="headerlink" title="K. number"></a>K. number</h2><h3 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int64_t</span> res = count(str.begin(), str.end(), <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) &#123;</span><br><span class="line"><span class="keyword">int</span> x = ch - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">++cnt[last = (last + x) % <span class="number">3</span>];</span><br><span class="line">zero = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (zero) res += cnt[last] - <span class="number">1</span>;</span><br><span class="line">++cnt[last];</span><br><span class="line">++zero;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019暑假杭电多校三 (TBC)</title>
      <link href="/2019/08/01/2019%E6%9A%91%E5%81%87%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E4%B8%89%20(TBC)/"/>
      <url>/2019/08/01/2019%E6%9A%91%E5%81%87%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E4%B8%89%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=850" target="_blank" rel="noopener">2019 Multi-University Training Contest 3</a></p><h2 id="B-Blow-up-the-city"><a href="#B-Blow-up-the-city" class="headerlink" title="B. Blow up the city"></a>B. Blow up the city</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~\rm DAG~$，每次询问两点，问有多少个点满足扣去之后给定点中至少有一个点无法到达原图的无出度点。<br>数据范围$~1\leq T\leq10,~1\leq n\leq100000,~1\leq m\leq200000,~1\leq q\leq100000~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>支配树上$~\rm LCA~$。可以根据拓扑序维护倍增$~\rm LCA~$。总时间复杂度为$~O(T\cdot(m+q)\cdot\log n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; drct[maxn], from[maxn];</span><br><span class="line"><span class="keyword">int</span> deg[maxn], dep[maxn], pa[maxn][<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (dep[pa[u][i]] &gt;= dep[v]) u = pa[u][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] != pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">drct[u].clear();</span><br><span class="line">from[u].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">drct[u].push_back(v);</span><br><span class="line">from[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="keyword">if</span> (drct[u].empty()) &#123;</span><br><span class="line">drct[u].push_back(<span class="number">0</span>);</span><br><span class="line">from[<span class="number">0</span>].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">deg[u] = drct[u].size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = topo[i];</span><br><span class="line"><span class="keyword">if</span> (u) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = drct[u].begin();</span><br><span class="line"><span class="keyword">int</span> p = *ite++;</span><br><span class="line"><span class="keyword">while</span> (ite != drct[u].end()) p = LCA(p, *ite++);</span><br><span class="line">dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != <span class="number">18</span>; ++j) pa[u][j] = pa[pa[u][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : from[u]) <span class="keyword">if</span> (!--deg[v]) topo.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dep[u] + dep[v] - dep[LCA(u, v)] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Fansblog"><a href="#F-Fansblog" class="headerlink" title="F. Fansblog"></a>F. Fansblog</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个质数$~P~$，找出最大的质数$~Q&lt; P~$，计算$~Q!\mod P~$。<br>数据范围$~1\leq T\leq10,~10^9\leq P\leq10^{14}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>相邻的质数肯定不会太远，不会超过$~1000~$，可以暴力求出$~Q~$，然后利用威尔逊定理即可求出答案。总时间复杂度为$~O(1000T)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long i64;</span><br><span class="line"></span><br><span class="line">bool check(i64 x) &#123;</span><br><span class="line">for (i64 p = 2; p * p &lt; x; ++p) if (x % p == 0) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 mul(i64 a, i64 b, i64 p) &#123; return __int128(a) * b % p; &#125;</span><br><span class="line"></span><br><span class="line">i64 fpow(i64 a, i64 n, i64 p) &#123;</span><br><span class="line">i64 ret = 1;</span><br><span class="line">while (n) &#123;</span><br><span class="line">if (n &amp; 1) ret = mul(ret, a, p);</span><br><span class="line">a = mul(a, a, p);</span><br><span class="line">n &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">cin.tie(nullptr);</span><br><span class="line">cout.tie(nullptr);</span><br><span class="line">int T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line">while (T--) &#123;</span><br><span class="line">i64 P;</span><br><span class="line">cin &gt;&gt; P;</span><br><span class="line">i64 Q = P - 1, res = 1;</span><br><span class="line">while (!check(Q)) res = mul(res, Q--, P);</span><br><span class="line">cout &lt;&lt; mul(fpow(res, P - 2, P), P - 1, P) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 576 (Div. 1) (TBC)</title>
      <link href="/2019/08/01/Codeforces%20Round%20576%20(Div.%201)%20(TBC)/"/>
      <url>/2019/08/01/Codeforces%20Round%20576%20(Div.%201)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1198" target="_blank" rel="noopener">Codeforces Round #576 (Div. 1)</a></p><h2 id="A-MP3"><a href="#A-MP3" class="headerlink" title="A. MP3"></a>A. MP3</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, I;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; I;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++cnt[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = (I &lt;&lt; <span class="number">3</span>) / n;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">30</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">1</span> &lt;&lt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : cnt) tot.push_back(p.second);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, s = <span class="number">0</span>; i != <span class="keyword">int</span>(tot.size()); ++i) &#123;</span><br><span class="line">s += tot[i];</span><br><span class="line"><span class="keyword">if</span> (i - j == size) s -= tot[j++];</span><br><span class="line">res = max(res, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n - res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Welfare-State"><a href="#B-Welfare-State" class="headerlink" title="B. Welfare State"></a>B. Welfare State</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要求对一个序列支持两种操作：单点修改或全局取$~\max~$。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq n\leq2\cdot10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>最普遍的方法是线段树，全局取$~\max~$时更新根节点的标记，单点修改时对路径上的节点下放标记即可。总时间复杂度为$~O(n+q\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>], pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; val[index];</span><br><span class="line">pos[end] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">tag[lson] = max(tag[lson], tag[index]);</span><br><span class="line">tag[rson] = max(tag[rson], tag[index]);</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= p || end &lt; p) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">val[index] = x;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line">modify(lll, p, x);</span><br><span class="line">modify(rrr, p, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">val[index] = max(val[index], tag[index]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line">push_down(lll);</span><br><span class="line">push_down(rrr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op, p, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; x;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, p, x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">tag[<span class="number">1</span>] = max(tag[<span class="number">1</span>], x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">push_down(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cout</span> &lt;&lt; val[pos[i]] &lt;&lt; (i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Matching-vs-Independent-Set"><a href="#C-Matching-vs-Independent-Set" class="headerlink" title="C. Matching vs Independent Set"></a>C. Matching vs Independent Set</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个有$~3n~$个点的图，输出一个大小为$~n~$的独立边集或者独立点集。<br>数据范围$~1\leq\sum n\leq10^5,~0\leq\sum m\leq5\cdot10^5~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑任取一个极大独立边集，如果边数超过$~n~$，则答案已经构造完毕。如果边数少于$~n~$，则至少还有$~n~$个点没有取过，而根据当前的独立边集的极大性，剩余的点两两之间没有边，显然可以构造出大小为$~n~$的独立点集。总时间复杂度为$~O(n+m)~$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> e[maxn][<span class="number">2</span>], ban[maxn], vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">ban[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">e[i][<span class="number">0</span>] = u;</span><br><span class="line">e[i][<span class="number">1</span>] = v;</span><br><span class="line">adj[u].push_back(i);</span><br><span class="line">adj[v].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge, vertice;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (!ban[i]) &#123;</span><br><span class="line">edge.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">vis[e[i][j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> k : adj[e[i][j]]) ban[k] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i) <span class="keyword">if</span> (!vis[i]) vertice.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(edge.size()) &lt; n) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IndSet\n"</span> &lt;&lt; vertice.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; vertice[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Matching\n"</span> &lt;&lt; edge.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; edge[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Rectangle-Painting-1"><a href="#D-Rectangle-Painting-1" class="headerlink" title="D. Rectangle Painting 1"></a>D. Rectangle Painting 1</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个黑白染色的网格图，每次对一个矩形染白的花费是长和宽的最大值。计算把全图染白的最小花费。<br>数据范围$~1\leq n\leq50~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二维区间$~\rm DP~$，总时间复杂度为$~O(\frac{1}{36}n^5)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">56</span>;</span><br><span class="line"><span class="keyword">int</span> s[maxn][maxn], dp[maxn][maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rect</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'#'</span>) ++s[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x1 = n; x1; --x1)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y1 = n; y1; --y1)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x2 = x1; x2 &lt;= n; ++x2)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y2 = y1; y2 &lt;= n; ++y2)</span><br><span class="line"><span class="keyword">if</span> (rect(x1, y1, x2, y2)) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; cur = dp[x1][y1][x2][y2];</span><br><span class="line">cur = max(x2 - x1, y2 - y1) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = x1; x &lt;= x2; ++x) <span class="keyword">if</span> (!rect(x, y1, x, y2))</span><br><span class="line">cur = min(cur, dp[x1][y1][x - <span class="number">1</span>][y2] + dp[x + <span class="number">1</span>][y1][x2][y2]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = y1; y &lt;= y2; ++y) <span class="keyword">if</span> (!rect(x1, y, x2, y))</span><br><span class="line">cur = min(cur, dp[x1][y1][x2][y - <span class="number">1</span>] + dp[x1][y + <span class="number">1</span>][x2][y2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][<span class="number">1</span>][n][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019暑假牛客多校一</title>
      <link href="/2019/07/19/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%B8%80/"/>
      <url>/2019/07/19/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/881" target="_blank" rel="noopener">2019牛客暑期多校训练营（第一场）</a></p><h2 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A. Equivalent Prefixes"></a>A. Equivalent Prefixes</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个序列，求它们的最长的前缀长度满足这一对子序列的大小关系是一致的。<br>数据范围$~1\leq n\leq10^5,~\sum n\leq5\times10^5~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题意给定的关系等价于笛卡尔树相同。可以单调栈求出每个位置左边第一个比它小的位置，然后依次比较。单组数据的时间复杂度为$~O(n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; l, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">sta.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (a[sta.top()] &gt; a[i]) sta.pop();</span><br><span class="line">l[i] = sta.top();</span><br><span class="line">sta.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>), b(n + <span class="number">1</span>), la(n + <span class="number">1</span>), lb(n + <span class="number">1</span>);</span><br><span class="line">work(a, la, n);</span><br><span class="line">work(b, lb, n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (la[i] != lb[i]) <span class="keyword">break</span>;</span><br><span class="line">res = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B. Integration"></a>B. Integration</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给出$~\int_{0}^{\infty}\frac{\text{d}x}{1+x^2}=\frac{\pi}{2}~$。计算积分</p><script type="math/tex; mode=display">\frac{1}{\pi}\int_{0}^{\infty}\frac{\text{d}x}{\prod_{i=1}^{n}(a_i^2+x^2)}</script><p>数据范围$~1\leq n\leq10^3，~\sum n^2\leq10^7~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑裂项</p><script type="math/tex; mode=display">\frac{1}{(a^2+x^2)(b^2+x^2)}=\frac{1}{(b^2-a^2)(a^2+x^2)}+\frac{1}{(a^2-b^2)(b^2+x^2)}</script><p>递归展开</p><script type="math/tex; mode=display">\frac{1}{\prod_{i=1}^{n}(a_i^2+x^2)}</script><p>有</p><script type="math/tex; mode=display">\frac{1}{\prod_{i=1}^{n}(a_i^2+x^2)}=\sum_{i=1}^{n}\frac{1}{(a_i^2+x^2)\prod_{j\neq i}(a_j^2-a_i^2)}</script><p>所以答案为</p><script type="math/tex; mode=display">\frac{1}{\pi}\int_{0}^{\infty}\frac{\text{d}x}{\prod_{i=1}^{n}(a_i^2+x^2)}=\sum_{i=1}^{n}\frac{1}{2a_i(\prod_{j\neq i}(a_j^2-a_i^2))}</script><p>单组数据的时间复杂度为$~O(n^2)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), a2(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a2[i] = mul(a[i], a[i]);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cur = add(a[i], a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) <span class="keyword">if</span> (i != j) cur = mul(cur, sub(a2[j], a2[i]));</span><br><span class="line">res = add(res, fpow(cur, mod - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Euclidean-Distance"><a href="#C-Euclidean-Distance" class="headerlink" title="C. Euclidean Distance"></a>C. Euclidean Distance</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~\Bbb R^n~$上的一个点$~A=(\frac{a_1}{m},\frac{a_2}{m},\dots,\frac{a_n}{m})~$，求它到闭集$~D=\lbrace~(p_1,p_2,\dots,p_n):\sum_{i=1}^{n}p_i=1,~p_i\geq0,\forall~1\leq i\leq n~\rbrace~$的最短距离。<br>数据范围$~1\leq n\leq10^4,~\sum n\leq5\times10^5,~1\leq m\leq10^3,~-m\leq a\leq m~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难求出$~A~$到该$~n-1~$维超平面的距离的平方为</p><script type="math/tex; mode=display">\frac{(m-\sum_{i-1}^{n}a_i)^2}{nm^2}</script><p>然而由于$~p_i\geq0~$的限制，垂足有可能不在$~D~$内，所以还要计算垂足和$~D~$的距离。设垂足为$~\hat{A}~$，则有</p><script type="math/tex; mode=display">\hat{A}=(\dots,\frac{m+na_i-\sum_{i=1}^{n}a_i}{nm},\dots)</script><p>记$~\hat{a}_i=m+na_i-\sum_{i=1}^{n}a_i~$，则不难发现$~\hat{A}\in D~$的充要条件是$~\hat{a}_i\geq0,\forall~1\leq i\leq n~$。且对于$~\hat{a}_i&lt; 0~$，闭集$~D~$上距离$~\hat{A}~$最短的点$~P~$必须满足$~p_i=0~$。不妨设$~\hat{A}~$的各个维度中只有$~\hat{a}_1,\hat{a}_2,\dots,\hat{a}_k~$满足非负，那么问题可转化为在$~\Bbb R^k~$上求$~(\hat{a}_1,\hat{a}_2,\dots,\hat{a}_k)~$到$~\hat{D}=\lbrace~(p_1,p_2,\dots,p_k):\sum_{i=1}^{k}p_i=1,~p_i\geq0,\forall~1\leq i\leq k~\rbrace~$的最短距离。如果暴力降维求解，最坏时间复杂度为$~O(n^2)~$。考虑对$~a_i~$升序，根据$~\hat{a}_i~$的表达式可以发现$~\hat{a}_i~$也是升序的，因此每次降维的时候必然会除去$~a_i~$的一个前缀而保留后缀。归纳下去可知最后当$~A~$的垂足在$~D~$内时，必然保留的是$~A~$的一个后缀维度。二分或者暴力判断保留的后缀长度，然后对于前缀直接计算平方和，后缀带入距离公式，单组数据的时间复杂度为$~O(n\log n)~$。注意到$~a~$的数据范围且复杂度的$~O(\log n)~$仅来自于对$~a~$的升序，因此考虑到基数排序，单组数据为线性复杂度$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; a(n), suf(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">        sort(a.begin(), a.end());</span><br><span class="line">        suf.back() = a.back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) suf[i] = suf[i + <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            m - suf[n - mid] + mid * a[n - mid] &lt; <span class="number">0</span> ? r = mid : l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int64_t</span> p = <span class="number">0</span>, q = l * m * m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n - l; ++i) p += a[i] * a[i];</span><br><span class="line">        p = p * l + (m - suf[n - l]) * (m - suf[n - l]);</span><br><span class="line">        <span class="keyword">int64_t</span> d = __gcd(p, q);</span><br><span class="line">        p /= d;</span><br><span class="line">        q /= d;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'/'</span> &lt;&lt; q &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Parity-of-Tuples"><a href="#D-Parity-of-Tuples" class="headerlink" title="D. Parity of Tuples"></a>D. Parity of Tuples</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个$~m~$元组$~a_i=(a_{i1},a_{i2},\dots,a_{im})~$。定义$~f(x,a_i)=1~$当且仅当对任意$~a_{ij}\odot x~$在二进制表示上均有奇数个$~1~$，反之$~f(x,a_i)=0~$。定义$~count(x)=\sum_{i=1}^{n}f(x,a_i)~$，求</p><script type="math/tex; mode=display">\bigoplus_{x=0}^{2^k-1}\left(count(x)\cdot3^x\mod(10^9+7)\right)</script><p>数据范围$~1\leq n\leq10^5,~1\leq m\leq10,~1\leq k\leq20,~0\leq a_{ij}&lt; 2^k~$。<br>其中$~\odot~$和$~\oplus~$分别表示按位与和按位异或。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~f~$作为特征函数的恒等变换</p><script type="math/tex; mode=display">f(x,a_i)=\frac{1}{2^m}\prod_{j=1}^{m}\left(1-(-1)^{\mid a_i\odot x\mid}\right)</script><p>注意到如下性质</p><script type="math/tex; mode=display">(-1)^{\mid a\odot x\mid+\mid b\odot x\mid}=(-1)^{\mid(a\oplus b)\odot x\mid}</script><p>于是可以在$~O(2^m)~$的时间内把$~f(x,a_i)~$展开，求和得到</p><script type="math/tex; mode=display">count(x)=\frac{1}{2^m}\sum_{y=0}^{2^k-1}\left(g(y)\cdot(-1)^{\mid y\oplus x\mid}\right)</script><p>上式即为$~\rm FWT~$变换。单组数据时间复杂度为$~O(n\cdot2^m+k\cdot2^k)~$，注意$~O(n\cdot m\cdot2^m+k\cdot2^k)~$无法通过。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1</span> &lt;&lt; maxk], inv2[maxm + <span class="number">1</span>], pow3[<span class="number">1</span> &lt;&lt; maxk], a[<span class="number">1</span> &lt;&lt; maxm], val[<span class="number">1</span> &lt;&lt; maxm], tot[<span class="number">1</span> &lt;&lt; maxm];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv2[<span class="number">0</span>] = pow3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">inv2[<span class="number">1</span>] = <span class="number">500000004</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxm; ++i) inv2[i] = mul(inv2[i - <span class="number">1</span>], inv2[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; maxk); ++i) pow3[i] = mul(pow3[i - <span class="number">1</span>], <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; maxm); ++i) tot[i] = tot[i ^ lowbit(i)] ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k) &#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="number">4</span> &lt;&lt; k);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="built_in">cin</span> &gt;&gt; a[<span class="number">1</span> &lt;&lt; i];</span><br><span class="line">++cnt[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s != (<span class="number">1</span> &lt;&lt; m); ++s) &#123;</span><br><span class="line">val[s] = val[s ^ lowbit(s)] ^ a[lowbit(s)];</span><br><span class="line">tot[s] &amp; <span class="number">1</span> ? --cnt[val[s]] : ++cnt[val[s]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != k; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> all = ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>) ^ <span class="number">1</span> &lt;&lt; i, sub = all; sub; sub = all &amp; (sub - <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">int</span> x = cnt[sub], y = cnt[sub ^ <span class="number">1</span> &lt;&lt; i];</span><br><span class="line">cnt[sub] = x + y;</span><br><span class="line">cnt[sub ^ <span class="number">1</span> &lt;&lt; i] = x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = cnt[<span class="number">0</span>], y = cnt[<span class="number">1</span> &lt;&lt; i];</span><br><span class="line">cnt[<span class="number">0</span>] = x + y;</span><br><span class="line">cnt[<span class="number">1</span> &lt;&lt; i] = x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s != (<span class="number">1</span> &lt;&lt; k); ++s) res ^= mul(cnt[s], mul(inv2[m], pow3[s]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-ABBA"><a href="#E-ABBA" class="headerlink" title="E. ABBA"></a>E. ABBA</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算有多少种由$~n+m~$个<code>A</code>和$~n+m~$个<code>B</code>组成的字符串满足存在一种划分为$~n+m~$个长度为$~2~$的子序列的方案，满足恰好有$~n~$个<code>AB</code>和$~m~$个<code>BA</code>。<br>数据范围$~0\leq n,m\leq10^3~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到只有两种非法串，任意一种划分方案中<code>AB</code>的数量均小于$~n~$或者任意一种划分方案中<code>BA</code>的数量均小于$~m~$，且全集恰好为两个非法串集合与合法串集合的一个不交并。考虑存在一种划分方案使得<code>AB</code>数量不小于$~n~$的串的数量和存在一种划分方案使得<code>BA</code>数量不小于$~m~$的串的数量之和，此时的答案刚好是全集的大小加上合法串的数量，动态规划即可。单组数据时间复杂度为$~O(nm)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[maxn][maxn], dp2[maxn][maxn], inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fact[n], mul(finv[k], finv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) <span class="built_in">memset</span>(dp1[i], <span class="number">0</span>, (n + m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) <span class="built_in">memset</span>(dp2[i], <span class="number">0</span>, (n + m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        dp1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= ((n + m) &lt;&lt; <span class="number">1</span>); ++k) <span class="keyword">for</span> (<span class="keyword">int</span> i = min(n + m, k); ~i; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k - i;</span><br><span class="line">            <span class="keyword">if</span> (i - j &lt;= n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) dp1[i][j] = add(dp1[i][j], dp1[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span> (j) dp1[i][j] = add(dp1[i][j], dp1[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j - i &lt;= m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) dp2[i][j] = add(dp2[i][j], dp2[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span> (j) dp2[i][j] = add(dp2[i][j], dp2[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sub(add(dp1[n + m][n + m], dp2[n + m][n + m]), bino((n + m) &lt;&lt; <span class="number">1</span>, n + m)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Random-Point-in-Triangle"><a href="#F-Random-Point-in-Triangle" class="headerlink" title="F. Random Point in Triangle"></a>F. Random Point in Triangle</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个三角形，在内部随机一个点将大三角形划分为$~3~$个子三角形。计算面积最大的子三角形的面积的期望值。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接积分或者离线蒙特卡洛模拟可得期望值即为大三角形面积的$~\frac{11}{18}~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> cross(<span class="keyword">int64_t</span> x1, <span class="keyword">int64_t</span> y1, <span class="keyword">int64_t</span> x2, <span class="keyword">int64_t</span> y2) &#123; <span class="keyword">return</span> x1 * y2 - y1 * x2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x1, y1, x2, y2, x3, y3;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">11</span> * <span class="built_in">abs</span>(cross(x1 - x2, y1 - y2, x1 - x3, y1 - y3)) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Substrings-2"><a href="#G-Substrings-2" class="headerlink" title="G. Substrings 2"></a>G. Substrings 2</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义序列$~a_1,a_2,\dots,a_k~$和$~b_1,b_2,\dots,b_k~$是同态的，如果存在一个单射$~f~$使得$~f(a_i)=b_i,\forall~1\leq i\leq k~$。现给定一个序列$~s_1,s_2,\dots,s_n~$，问最多可以选出多少个相互不同态的连续子序列。<br>数据范围$~1\leq n\leq5\times10^4~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先设法把同态条件转化为等于条件。对于任意一个子序列$~t_1,t_2,\dots,t_k~$。如果$~t_i~$的左边没有和它一样的值，那么把它变为$~n~$，否则把它变为它左边等于它且离它最近的距离。这样两个连续子序列同态等价于两个连续子序列在变换后一致。问题即转化为不同连续子序列数量问题。<br>考虑后缀数组，即将所有的后缀按照字典序排序。然后不同连续子序列数量等于$~\frac{n(n+1)}{2}~$减去所有字典序相邻后缀的$~\rm LCP~$。<br>但是每个$~s_i~$在不同的连续子序列内变化对应的值不一定相同。处理变化时考虑子序列的左端点从右向左移动的过程，注意到每次移动至多修改后缀的一个变化值，用可持久化数组分块来维护这个过程。<br>可持久化数组分块是数组分块的一种拓展，数组分块支持$~O(1)~$的单点修改和$~O(\sqrt n)~$的区间查询。改为记录后缀和则是$~O(\sqrt n)~$的单点修改和$~O(1)~$的区间查询。由于每次修改只会操作一个分块，因此对于每个时刻的数组状态，用$~O(\sqrt n)~$个指针指向它对应的分块，然后对于需要修改的那一分块，可以在$~O(\sqrt n)~$新处理一个块并重新指向它。<br>对于$~\rm LCP~$和后缀数组，考虑用哈希实现，数据很弱并且是时限很紧，所以用$~64~$位自然溢出。用可持久化分块数组维护哈希值，这样单组数据的时间复杂度为$~O(n\cdot(\sqrt n+\log^2n))~$。用<code>c</code>代替<code>c++</code>可以再使常数少一倍。</p><h3 id="代码（c-）"><a href="#代码（c-）" class="headerlink" title="代码（c++）"></a><strong>代码（<code>c++</code>）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> base = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1</span> &lt;&lt; <span class="number">8</span> ;</span><br><span class="line"><span class="keyword">uint64_t</span> bas[maxn], block[maxn &lt;&lt; <span class="number">1</span>][maxm], *my_hash[maxn][maxm], sum[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> n, m, b, s[maxn], p[maxn], from[maxn], last[maxn];</span><br><span class="line"><span class="keyword">size_t</span> block_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* new_block(<span class="keyword">size_t</span> size) &#123;</span><br><span class="line"><span class="built_in">memset</span>(block[block_size], <span class="number">0</span>, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span>* new_block(<span class="keyword">size_t</span> size, <span class="keyword">uint64_t</span>* from) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(block[block_size], from, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> suf_hash(<span class="keyword">int</span> i, <span class="keyword">int</span> p) &#123;</span><br><span class="line"><span class="keyword">int</span> j = p / m, k = p % m;</span><br><span class="line"><span class="keyword">return</span> (j == b - <span class="number">1</span> ? <span class="number">0U</span>LL : sum[i][j + <span class="number">1</span>]) + my_hash[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> get_hash(<span class="keyword">int</span> i, <span class="keyword">int</span> l) &#123; <span class="keyword">return</span> (suf_hash(i, i) - suf_hash(i, i + l)) * bas[n - i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = n - max(i, j);</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, r) == get_hash(j, r)) <span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">get_hash(i, m) == get_hash(j, m) ? l = m : r = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_at</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> from[i + j] &lt; i ? n : i + j - from[i + j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = LCP(i, j);</span><br><span class="line"><span class="keyword">if</span> (k + i == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (k + j == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> char_at(i, k) &lt; char_at(j, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">bas[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) bas[i] = bas[i - <span class="number">1</span>] * base;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">block_size = <span class="number">0</span>;</span><br><span class="line">b = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">m = n / b + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(from, <span class="number">-1</span>, n &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(last, <span class="number">-1</span>, (n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != b; ++i) &#123;</span><br><span class="line">my_hash[n][i] = new_block(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) my_hash[n][i][j] = <span class="keyword">uint64_t</span>(n) * bas[i * m + j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; ~j; --j) my_hash[n][i][j] += my_hash[n][i][j + <span class="number">1</span>];</span><br><span class="line">sum[n][i] = my_hash[n][i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = b - <span class="number">2</span>; ~i; --i) sum[n][i] += sum[n][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(my_hash[i], my_hash[i + <span class="number">1</span>], b * <span class="keyword">sizeof</span> (<span class="keyword">uint64_t</span> *));</span><br><span class="line"><span class="built_in">memcpy</span>(sum[i], sum[i + <span class="number">1</span>], b &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (~last[s[i]]) &#123;</span><br><span class="line">from[last[s[i]]] = i;</span><br><span class="line"><span class="keyword">int</span> j = last[s[i]] / m, k = last[s[i]] % m;</span><br><span class="line">my_hash[i][j] = new_block(m, my_hash[i][j]);</span><br><span class="line"><span class="keyword">uint64_t</span> x = <span class="keyword">uint64_t</span>(last[s[i]] - i - n) * bas[last[s[i]]];</span><br><span class="line"><span class="keyword">while</span> (~k) my_hash[i][j][k--] += x;</span><br><span class="line"><span class="keyword">while</span> (~j) sum[i][j--] += x;</span><br><span class="line">&#125;</span><br><span class="line">last[s[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">iota(p, p + n, <span class="number">0</span>);</span><br><span class="line">sort(p, p + n, cmp);</span><br><span class="line"><span class="keyword">int64_t</span> res = n * (n + <span class="number">1L</span>L) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) res -= LCP(p[i - <span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（c）"><a href="#代码（c）" class="headerlink" title="代码（c）"></a><strong>代码（<code>c</code>）</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> base (1000000007ULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn (65536)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm (256)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line">ull bas[maxn], block[maxn][maxm], *hash[maxn][maxm], sum[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> n, m, b, s[maxn], p[maxn], from[maxn], last[maxn], tmp[maxn];</span><br><span class="line"><span class="keyword">size_t</span> block_size;</span><br><span class="line"></span><br><span class="line"><span class="function">ull* <span class="title">new_block</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(block[block_size], <span class="number">0</span>, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull* <span class="title">copy_block</span><span class="params">(<span class="keyword">size_t</span> size, ull* from)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(block[block_size], from, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">suf_hash</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = p / m, k = p % m;</span><br><span class="line"><span class="keyword">return</span> (j == b - <span class="number">1</span> ? <span class="number">0U</span>LL : sum[i][j + <span class="number">1</span>]) + hash[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l)</span> </span>&#123; <span class="keyword">return</span> (suf_hash(i, i) - suf_hash(i, i + l)) * bas[n - i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = n - (i &lt; j ? j : i);</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, r) == get_hash(j, r)) <span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, m) == get_hash(j, m)) l = m;</span><br><span class="line"><span class="keyword">else</span>                                  r = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_at</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> from[i + j] &lt; i ? n : i + j - from[i + j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = LCP(i, j);</span><br><span class="line"><span class="keyword">if</span> (k + i == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k + j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> char_at(i, k) &lt; char_at(j, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> s1 = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!s1) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> *b = a + s1;</span><br><span class="line"><span class="keyword">size_t</span> s2 = size - s1;</span><br><span class="line">sort(a, s1);</span><br><span class="line">sort(b, s2);</span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != s1 &amp;&amp; j != s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(a[i], b[j])) tmp[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span>                 tmp[k++] = b[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i != s1) tmp[k++] = a[i++];</span><br><span class="line"><span class="keyword">while</span> (j != s2) tmp[k++] = b[j++];</span><br><span class="line"><span class="built_in">memcpy</span>(a, tmp, size &lt;&lt; <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bas[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) bas[i] = bas[i - <span class="number">1</span>] * base;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">block_size = <span class="number">0</span>;</span><br><span class="line">b = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">m = n / b + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(from, <span class="number">-1</span>, n &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(last, <span class="number">-1</span>, (n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s + i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != b; ++i) &#123;</span><br><span class="line">hash[n][i] = new_block(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) hash[n][i][j] = (ull)(n) * bas[i * m + j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; ~j; --j) hash[n][i][j] += hash[n][i][j + <span class="number">1</span>];</span><br><span class="line">sum[n][i] = hash[n][i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = b - <span class="number">2</span>; ~i; --i) sum[n][i] += sum[n][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(hash[i], hash[i + <span class="number">1</span>], b * <span class="keyword">sizeof</span> (ull *));</span><br><span class="line"><span class="built_in">memcpy</span>(sum[i], sum[i + <span class="number">1</span>], b &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (~last[s[i]]) &#123;</span><br><span class="line">from[last[s[i]]] = i;</span><br><span class="line"><span class="keyword">int</span> j = last[s[i]] / m, k = last[s[i]] % m;</span><br><span class="line">hash[i][j] = copy_block(m, hash[i][j]);</span><br><span class="line">ull x = (ull)(last[s[i]] - i - n) * bas[last[s[i]]];</span><br><span class="line"><span class="keyword">while</span> (~k) hash[i][j][k--] += x;</span><br><span class="line"><span class="keyword">while</span> (~j) sum[i][j--] += x;</span><br><span class="line">&#125;</span><br><span class="line">last[s[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) p[i] = i;</span><br><span class="line">sort(p, n);</span><br><span class="line">ll res = n * (n + <span class="number">1L</span>L) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) res -= LCP(p[i - <span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-XOR"><a href="#H-XOR" class="headerlink" title="H. XOR"></a>H. XOR</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个可重集$~a_1,a_2,\dots,a_n~$，计算</p><script type="math/tex; mode=display">\sum_{S\subseteq A}^{\oplus_{x\in S}x=0}\mid S\mid</script><p>数据范围$~1\leq n\leq10^5,~\sum n\leq2\times10^6,~0\leq a\leq10^{18}~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>交换求和顺序</p><script type="math/tex; mode=display">\begin{aligned}\sum_{S\subseteq A,~\oplus_{x\in S}x=0}{\mid S\mid}&=\sum_{S\subseteq A}^{\oplus_{x\in S}x=0}\sum_{x\in S}1\\&=\sum_{a\in A}\sum_{S\subseteq A\backslash\lbrace a\rbrace}^{\oplus_{x\in S}=a}1\end{aligned}</script><p>考虑线性基，则$~\sum_{S\subseteq A\backslash\lbrace a\rbrace}^{\oplus_{x\in S}=a}1~$等价于$~a~$由$~A\backslash\lbrace a\rbrace~$构成的空间$~S(A\backslash\lbrace a\rbrace)~$内线性表出的方案数。记$~x~$为$~0~$由$~S(A)~$内元素线性表出的方案数，则有$~x=2^{\mid A\mid-\mid S(A)\mid}~$。如果$~a\in S(A\backslash\lbrace a\rbrace)~$，则方案数为$~\frac{x}{2}~$，否则为$~0~$。<br>在构造$~S(A)~$的时候将$~A~$内的元素从左至右加入到$~S~$之中，这一过程至多只有$~64~$个$~a~$无法被前缀构成的$~S~$线性表出，它们单独判断与$~S(A\backslash\lbrace a\rbrace)~$的关系。对于其余的$~a~$，必有$~a\in S(A\backslash\lbrace a\rbrace)~$。单组数据的时间复杂度为$~O(64\cdot n+64^3)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">linear_space</span> :</span> <span class="built_in">vector</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="function">T <span class="title">find</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) x = min(x, x ^ e); <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function">T <span class="title">push</span><span class="params">(T x)</span> </span>&#123; x = find(x); <span class="keyword">if</span> (x) <span class="keyword">this</span>-&gt;push_back(x); <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linear_space&lt;T&gt; merge(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s1, <span class="keyword">const</span> linear_space&lt;T&gt;&amp; s2) &#123;</span><br><span class="line">linear_space&lt;T&gt; ret(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : s2) ret.push(x);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod  = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 =  <span class="number">500000004</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> a[maxn];</span><br><span class="line">linear_space&lt;<span class="keyword">uint64_t</span>&gt; pre[maxn], suf[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> res = inv2, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">pre[i] = pre[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!pre[i].push(a[i])) res = add(res, res);</span><br><span class="line">&#125;</span><br><span class="line">suf[n + <span class="number">1</span>].clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">suf[i] = suf[i + <span class="number">1</span>];</span><br><span class="line">suf[i].push(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (pre[i].size() == pre[i - <span class="number">1</span>].size() || !merge(pre[i - <span class="number">1</span>], suf[i + <span class="number">1</span>]).find(a[i])) ++cnt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(res, cnt) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Points-Division"><a href="#I-Points-Division" class="headerlink" title="I. Points Division"></a>I. Points Division</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要将平面上的$~n~$个点划分到集合$~A~$或$~B~$之中，每个点划分给不同集合会有价值$~a~$或$~b~$。同时划分需要满足$~A~$内的点不能在某个$~B~$内的点的右下方。输出价值总和的最大值。<br>数据范围$~1\leq n\leq10^5,~\sum n\leq5\times10^5~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现每种划分等价于一条从左下到右上的一条折线将平面划分，不妨设折线的每个左上拐点均为$~B~$内的一个点。显然所有这样的折线的水平部分的纵坐标和垂直部分的横坐标的取值均为$~O(n)~$。考虑从左到右，横坐标相同则从下到上，计算整条折线的最高水平线的位置的所有取法下的价值总和的最大值。用线段树维护，需要支持区间查询，区间加法和单点取$~\max~$。单组数据的时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, a, b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> make_pair(x, y) &lt; make_pair(p.x, p.y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, point&amp; p) &#123; <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y &gt;&gt; p.a &gt;&gt; p.b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line">point p[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int64_t</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid   ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson  (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson  (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">seg[index] = tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (begin != (mid)) &#123; build(LEFT); build(RIGHT); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> val(i) (seg[i] + tag[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_down() do &#123; tag[lson] += tag[index]; tag[rson] += tag[index];       &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_up()   do &#123; seg[index] = max(val(lson), val(rson)); tag[index] = 0; &#125; while (false)</span></span><br><span class="line"><span class="keyword">int64_t</span> query(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> right) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right) <span class="keyword">return</span> LLONG_MIN;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= right) <span class="keyword">return</span> val(index);</span><br><span class="line">push_down();</span><br><span class="line"><span class="keyword">int64_t</span> ret = max(query(LEFT, right), query(RIGHT, right));</span><br><span class="line">push_up();</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int64_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= left) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify1(LEFT, left, x);</span><br><span class="line">modify1(RIGHT, left, x);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">int64_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt; pos || end &lt;= pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index] = max(val(index), x);</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify2(LEFT, pos, x);</span><br><span class="line">modify2(RIGHT, pos, x);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">sum += p[i].a;</span><br><span class="line">y.push_back(p[i].y);</span><br><span class="line">&#125;</span><br><span class="line">sort(p, p + n);</span><br><span class="line">sort(y.begin(), y.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) pos[i] = lower_bound(y.begin(), y.end(), p[i].y) - y.begin();</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != n; ) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j != n &amp;&amp; p[i].x == p[j].x) &#123;</span><br><span class="line">temp += p[j].b - p[j].a;</span><br><span class="line">dp[j] = max(<span class="keyword">int64_t</span>(<span class="number">0</span>), query(<span class="number">0</span>, n, <span class="number">1</span>, pos[j])) + temp;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">modify1(<span class="number">0</span>, n, <span class="number">1</span>, pos[i], p[i].b - p[i].a);</span><br><span class="line">modify2(<span class="number">0</span>, n, <span class="number">1</span>, pos[i], dp[i]);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(<span class="keyword">int64_t</span>(<span class="number">0</span>), query(<span class="number">0</span>, n, <span class="number">1</span>, n)) + sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Fraction-Comparision"><a href="#J-Fraction-Comparision" class="headerlink" title="J. Fraction Comparision"></a>J. Fraction Comparision</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x, a, y, b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; a &gt;&gt; y &gt;&gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span>      (__int128(x) * b == __int128(y) * a) <span class="built_in">cout</span> &lt;&lt; <span class="string">"=\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (__int128(x) * b &lt;  __int128(y) * a) <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;\n"</span>;</span><br><span class="line"><span class="keyword">else</span>                                         <span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019BNU排位四</title>
      <link href="/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E5%9B%9B/"/>
      <url>/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E5%9B%9B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247474" target="_blank" rel="noopener">2019BNU排位四</a></p><h2 id="A-Slime-Combining"><a href="#A-Slime-Combining" class="headerlink" title="A. Slime Combining"></a>A. Slime Combining</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">20</span>; ++i) <span class="keyword">if</span> (n &amp; <span class="number">1</span> &lt;&lt; i) res.emplace_back(i + <span class="number">1</span>);</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Guess-the-Permutation"><a href="#B-Guess-the-Permutation" class="headerlink" title="B. Guess the Permutation"></a>B. Guess the Permutation</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : a) <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : row) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (find(a[i].begin(), a[i].end(), n - <span class="number">1</span>) != a[i].end()) &#123;</span><br><span class="line">a[i][i] = n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i].front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != n; ++j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Constellation"><a href="#C-Constellation" class="headerlink" title="C. Constellation"></a>C. Constellation</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个点，找出一个三角形满足其它的点都在三角形外部。<br>数据范围$~3\leq n\leq100000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先取点$~1,2~$构成的直线，找直线上的点和直线外但离直线最近的点。直线上的点直接按坐标排序取头两个和直线外的点即构成所求三角形。排序用冒泡方式。总时间复杂度为$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt;&gt; star(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; x(n), y(n), d(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(&#123; <span class="number">0</span>, <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">star[i] = make_pair(x[i], y[i]);</span><br><span class="line">d[i] = <span class="built_in">abs</span>((x[<span class="number">1</span>] - x[<span class="number">0</span>]) * (y[i] - y[<span class="number">0</span>]) - (x[i] - x[<span class="number">0</span>]) * (y[<span class="number">1</span>] - y[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">if</span> (!d[i] &amp;&amp; i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">p.emplace_back(i);</span><br><span class="line">d[i] = LLONG_MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(p.size()); ++i) <span class="keyword">if</span> (star[p[i]] &lt; star[p[<span class="number">0</span>]]) swap(p[<span class="number">0</span>], p[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="keyword">int</span>(p.size()); ++i) <span class="keyword">if</span> (star[p[i]] &lt; star[p[<span class="number">1</span>]]) swap(p[<span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; p[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; min_element(d.begin() + <span class="number">2</span>, d.end()) - d.begin() + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Hamiltonian-Spanning-Tree"><a href="#D-Hamiltonian-Spanning-Tree" class="headerlink" title="D. Hamiltonian Spanning Tree"></a>D. Hamiltonian Spanning Tree</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~n~$阶完全图除了一棵树的边的权值为$~x~$以外，其余边的权值均为$~y~$。输出哈密顿路径的最小值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于$~x&gt;y~$的情况分类讨论即可。对于$~x\leq y~$的情况树形$~\rm DP~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>, mx[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs(v, u);</span><br><span class="line">cal += dp[v][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mx[<span class="number">1</span>] &lt; dp[v][<span class="number">0</span>] + <span class="number">1</span> - dp[v][<span class="number">1</span>]) mx[<span class="number">1</span>] = dp[v][<span class="number">0</span>] + <span class="number">1</span> - dp[v][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mx[<span class="number">0</span>] &lt; mx[<span class="number">1</span>]) swap(mx[<span class="number">0</span>], mx[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">dp[u][<span class="number">0</span>] = cal + mx[<span class="number">0</span>];</span><br><span class="line">dp[u][<span class="number">1</span>] = dp[u][<span class="number">0</span>] + mx[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">adj[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) mx = max(mx, <span class="keyword">int</span>(adj[u].size()));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n - <span class="number">1</span>) * y + (mx == n - <span class="number">1</span> ? x - y : <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n - <span class="number">1</span> - dp[<span class="number">1</span>][<span class="number">1</span>]) * y + dp[<span class="number">1</span>][<span class="number">1</span>] * x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Robot-Arm"><a href="#E-Robot-Arm" class="headerlink" title="E. Robot Arm"></a>E. Robot Arm</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个首尾相连的线段，初始时刻第$~i~$个线段的起点为$~(i-1,0)~$终点为$~(i,0)~$。需要支持两种操作：将一个线段固定起点伸长或固定起点旋转。每次操作输出最后一个线段的终点坐标。<br>数据范围$~1\leq n\leq 300000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>每个线段可以视为一个二维向量，那么每个线段的终点坐标等价于向量的前缀和。线段的伸长操作等价于向量的单点修改，线段的旋转操作等价于向量的后缀旋转。可以用线段树维护。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="keyword">double</span>(<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">int</span> ang;</span><br><span class="line">Seg(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>, <span class="keyword">int</span> _a = <span class="number">0</span>): x(_x), y(_y), ang(_a) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> PI * (ang % <span class="number">360</span>) / <span class="number">180</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cos</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">cos</span>(rad());        &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">sin</span>(rad());        &#125;</span><br><span class="line"><span class="function">Seg <span class="title">rotate</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">double</span> c = <span class="built_in">cos</span>(), s = <span class="built_in">sin</span>(); <span class="keyword">return</span> Seg(x * c - y * s, x * s + y * c); &#125;</span><br><span class="line">Seg <span class="keyword">operator</span>+ (<span class="keyword">const</span> Seg&amp; l) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Seg(x + l.x, y + l.y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">double</span> l)</span> </span>&#123; <span class="keyword">double</span> k = <span class="number">1</span> + l / hypot(x, y); x *= k; y *= k; &#125;</span><br><span class="line">&#125; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function">Seg <span class="title">merge</span><span class="params">(<span class="keyword">const</span> Seg&amp; l1, <span class="keyword">const</span> Seg&amp; l2)</span> </span>&#123; <span class="keyword">return</span> l1.rotate() + l2.rotate(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid   ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson  (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson  (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_down() do &#123; seg[lson].ang += seg[index].ang; seg[rson].ang += seg[index].ang; &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_up()   do &#123; seg[index] = merge(seg[lson], seg[rson]);                         &#125; while (false)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index] = Seg(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(LEFT);</span><br><span class="line">build(RIGHT);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">double</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= pos || end &lt; pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index].x += len;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify1(LEFT, pos, len);</span><br><span class="line">modify1(RIGHT, pos, len);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">int</span> ang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= pos) &#123;</span><br><span class="line">seg[index].ang += ang;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify2(LEFT, pos, ang);</span><br><span class="line">modify2(RIGHT, pos, ang);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) modify1(<span class="number">0</span>, n, <span class="number">1</span>, y    , z      );</span><br><span class="line"><span class="keyword">else</span>        modify2(<span class="number">0</span>, n, <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">360</span> - z);</span><br><span class="line">Seg res = seg[<span class="number">1</span>].rotate();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>) &lt;&lt; res.x &lt;&lt; <span class="string">' '</span> &lt;&lt; res.y &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Double-Knapsack"><a href="#F-Double-Knapsack" class="headerlink" title="F. Double Knapsack"></a>F. Double Knapsack</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个大小为$~n~$的可重集合$~A,B~$，元素值均在$~1~$到$~n~$之间。输出它们两的子集使得两个子集的求和一样。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>把集合视为序列，子集视为连续子序列。考虑$~A~$的前缀和$~a_0,a_1,\dots,a_n~$，其中$~a_0=0~$，则$~a~$单增。对于$~B~$同理。不妨设$~a_n\leq b_n~$。对于每个$~a_i,~i=0,1,\dots,n~$，通过双指针找出第一个不小于$~a_i~$的$~b_j~$，此时必有$~b_j-a_i\in[0,n)~$。根据抽屉原理，存在$~i_1&lt; i_2,~j_1&lt; j_2~$，满足$~b_{j_1}-a_{i_1}=b_{j_2}-a_{i_2}~$。此时即构造出两个连续子序列。总时间复杂度为$~O(n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int64_t</span> a[maxn], b[maxn], ii[maxn], jj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~ii[d]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i - ii[d] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ii[d] + <span class="number">1</span>; k &lt;= i; ++k) <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; (k == i ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j - jj[d] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = jj[d] + <span class="number">1</span>; k &lt;= j; ++k) <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; (k == j ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ii[d] = i;</span><br><span class="line">jj[d] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">memset</span>(ii, <span class="number">-1</span>, <span class="keyword">sizeof</span> (ii));</span><br><span class="line"><span class="built_in">memset</span>(jj, <span class="number">-1</span>, <span class="keyword">sizeof</span> (jj));</span><br><span class="line">ii[<span class="number">0</span>] = jj[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="built_in">cin</span> &gt;&gt; a[i]; a[i] += a[i - <span class="number">1</span>]; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123; <span class="built_in">cin</span> &gt;&gt; b[j]; b[j] += b[j - <span class="number">1</span>]; &#125;</span><br><span class="line"><span class="keyword">if</span> (a[n] &lt;= b[n]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (b[j] &lt; a[i]) ++j;</span><br><span class="line">work(b[j] - a[i], i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, i = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[i] &lt; b[j]) ++i;</span><br><span class="line">work(a[i] - b[j], i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-2Char"><a href="#H-2Char" class="headerlink" title="H. 2Char"></a>H. 2Char</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>水题。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">26</span>][<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (*min_element(str.begin(), str.end()) == *max_element(str.begin(), str.end())) &#123;</span><br><span class="line">cnt[str.front() - <span class="string">'a'</span>][str.front() - <span class="string">'a'</span>] += str.size();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ch;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">if</span> (find(str.begin(), str.end(), <span class="keyword">char</span>(i + <span class="string">'a'</span>)) != str.end())</span><br><span class="line">ch.emplace_back(i);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(ch.size()) &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">cnt[ch.front()][ch.back()] += str.size();</span><br><span class="line">cnt[ch.back()][ch.front()] += str.size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">26</span>; ++j) <span class="keyword">if</span> (i != j) cnt[i][j] += cnt[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">26</span>; ++j) <span class="keyword">if</span> (i != j) cnt[j][i] += cnt[i][i];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) res = max(res, *max_element(cnt[i], cnt[i] + <span class="number">26</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Anton-and-Lines"><a href="#I-Anton-and-Lines" class="headerlink" title="I. Anton and Lines"></a>I. Anton and Lines</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> x1, x2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x1 &gt;&gt; x2;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt;&gt; line(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; l : line) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l.second &gt;&gt; l.first;</span><br><span class="line">l.first += l.second * x1;</span><br><span class="line">&#125;</span><br><span class="line">sort(line.begin(), line.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i)</span><br><span class="line"><span class="keyword">if</span> (line[i - <span class="number">1</span>].first != line[i].first &amp;&amp; (line[i].first - line[i - <span class="number">1</span>].first) &lt; (x2 - x1) * (line[i - <span class="number">1</span>].second - line[i].second))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Beautiful-Function"><a href="#J-Beautiful-Function" class="headerlink" title="J. Beautiful Function"></a>J. Beautiful Function</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义好函数$~f(t)~$为$~t,0,1,\dots,50~$，或这些好函数的加法、减法、乘法、取绝对值的复合，其中乘法至多使用$~50~$次。现给定$~n~$个圆，要求构造出参数方程$~(f(t),g(t))~$满足对于每个圆，存在$~t=0,1,\dots,50~$满足$~(f(t),g(t))~$在圆上或者圆内。<br>数据范围$~1\leq n\leq50,~0\leq x,y\leq50,~2\leq r\leq50~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>从特征函数角度入手。构造如下函数</p><script type="math/tex; mode=display">h(t)={\mid t-(p-1)\mid}+{\mid t-(p+1)\mid}-{\mid t-p\mid}-{\mid t-p\mid}</script><p>对于$~t\in\Bbb Z~$，不难发现$~f(t=p)=2,~f(t\neq p)=0~$。那么对于每个圆，由于半径$~r\geq 2~$，圆内必存在偶整点，令$~p~$等于角标，然后将特征函数乘上横纵坐标后求和即可。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"("</span> + a + <span class="string">"*((abs((t-("</span> + i + <span class="string">"-1)))+abs((t-("</span> + i + <span class="string">"+1))))-(abs((t-"</span> + i + <span class="string">"))+abs((t-"</span> + i + <span class="string">")))))"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(n - <span class="number">1</span>, <span class="string">'('</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str(to_string(a[<span class="number">0</span>]), to_string(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"+"</span> &lt;&lt; str(to_string(a[i]), to_string(i)) &lt;&lt; <span class="string">")"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, x[<span class="number">50</span>], y[<span class="number">50</span>], r[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; r[i];</span><br><span class="line">x[i] = (x[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">y[i] = (y[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(x, n);</span><br><span class="line">print(y, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BNU排位三</title>
      <link href="/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%89/"/>
      <url>/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247395" target="_blank" rel="noopener">2019BNU排位三</a></p><h2 id="A-Nicoleta-and-the-circle-of-kids"><a href="#A-Nicoleta-and-the-circle-of-kids" class="headerlink" title="A. Nicoleta and the circle of kids"></a>A. Nicoleta and the circle of kids</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于$~n~$个点$~0,1,\dots,n-1~$，对于每个编号$~u~$，连接它到$~(u+1)\%n~$一条权值为$~1~$的边，一直到连接它到$~(u+k)\%n~$一条权值为$~k~$的边。计算这个图的最大生成树的大小。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~d=\gcd(n,k)~$，则原图可以分解为$~d~$个环，每个环均有$~\frac{n}{d}~$个点，并用权值为$~k~$的边连接。那么对于每个环上的点，用$~\frac{n}{d}-1~$条权值为$~k~$的边连接，再用$~d-1~$条权值为$~k-1~$的边连接，此时的生成树有$~n-d~$条$~k~$边和$~d-1~$条$~k-1~$边。不难证明如果$~k~$边数量超过$~n-d~$条，则必构成环，于是此树为最大生成树。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> N, K;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">int64_t</span> d = __gcd(N, K);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (N - <span class="number">1</span>) * K + <span class="number">1</span> - d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Ugly-Number"><a href="#B-Ugly-Number" class="headerlink" title="B. Ugly Number"></a>B. Ugly Number</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个字符串，问它是否是它的所有循环平移中字典序最小的那个。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>字符串哈希后可以在$~O(\log n)~$的时间内比较两个串的字典序，做法是二分出最长公共前缀$~\rm LCP~$，然后比较下一个字符，总时间复杂度为$~O(n\log n)~$。或者将字符串分解为若干不降子串，然后判断第一个的字典序是否最小，总时间复杂度为$~O(n)~$。</p><h3 id="代码（哈希-O-n-log-n-）"><a href="#代码（哈希-O-n-log-n-）" class="headerlink" title="代码（哈希$~O(n\log n)~$）"></a><strong>代码（哈希$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bas = <span class="number">8886</span>     ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv = <span class="number">112339</span>   ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> pos[maxn], neg[maxn], my_hash[maxn], val[maxn], n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pos[<span class="number">0</span>] = neg[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">pos[i] = mul(pos[i - <span class="number">1</span>], bas);</span><br><span class="line">neg[i] = mul(neg[i - <span class="number">1</span>], inv);</span><br><span class="line">&#125;</span><br><span class="line">iota(val, val + maxn, <span class="number">0</span>);</span><br><span class="line">shuffle(val, val + maxn, mt19937(chrono::steady_clock::now().time_since_epoch().count()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> mul(sub(my_hash[r], my_hash[l]), neg[l]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (get_hash(<span class="number">0</span>, n) == get_hash(p, p + n)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = n;</span><br><span class="line"><span class="keyword">while</span> (R - L != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">get_hash(<span class="number">0</span>, m) == get_hash(p, p + m) ? L = m : R = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str[L] &gt; str[p + L];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">str += str;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (n &lt;&lt; <span class="number">1</span>); ++i) my_hash[i + <span class="number">1</span>] = add(my_hash[i], mul(val[str[i]], pos[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="keyword">if</span> (check(i)) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || *min_element(str.begin(), str.end()) == *max_element(str.begin(), str.end()))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (pos != n &amp;&amp; str[pos] &gt;= str[pos - <span class="number">1</span>]) ++pos;</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">pre</span><span class="params">(str.substr(<span class="number">0</span>, pos))</span></span>;</span><br><span class="line">str += str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ppp = pos; ppp &lt; n; ppp = pos) &#123;</span><br><span class="line"><span class="keyword">for</span> (++pos; str[pos] &gt;= str[pos - <span class="number">1</span>]; ++pos);</span><br><span class="line"><span class="keyword">if</span> (str.substr(ppp, pos - ppp) &lt; pre) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Two-Cats"><a href="#C-Two-Cats" class="headerlink" title="C. Two Cats"></a>C. Two Cats</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问整除$~\prod_{i=1}^{n}v_i~$且因子个数为$~b~$的正整数个数。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对所有$~v~$因式分解后把$~\prod_{i=1}^{n}v_i~$的所有质因数及其幂指数存进<code>std::map</code>，然后对幂指数序列$~\rm DP~$即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> not_prime[maxn], factor[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!not_prime[i]) prime.emplace_back(factor[i] = i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : prime) &#123;</span><br><span class="line"><span class="keyword">if</span> (i * p &gt;= maxn) <span class="keyword">break</span>;</span><br><span class="line">not_prime[i * p] = <span class="number">1</span>;</span><br><span class="line">factor[i * p] = p;</span><br><span class="line"><span class="keyword">if</span> (i % p == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init_prime();</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">int</span> b, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : prime) &#123;</span><br><span class="line"><span class="keyword">if</span> (p &gt; v) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!(v % p)) &#123;</span><br><span class="line">++tot;</span><br><span class="line">v /= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tot) cnt[p] += tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v != <span class="number">1L</span>L) ++cnt[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(b + <span class="number">1</span>);</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; f : cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> x = f.second + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpp(b + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt;= b &amp;&amp; j &lt;= x; ++j) dpp[i * j] = add(dpp[i * j], dp[i]);</span><br><span class="line">dp = move(dpp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Checkerboard"><a href="#D-Checkerboard" class="headerlink" title="D. Checkerboard"></a>D. Checkerboard</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> N, rs, cs, rt, ct;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; rs &gt;&gt; cs &gt;&gt; rt &gt;&gt; ct;</span><br><span class="line"><span class="keyword">int64_t</span> dis = <span class="built_in">abs</span>(rt - rs) + <span class="built_in">abs</span>(ct - cs);</span><br><span class="line"><span class="keyword">if</span> (!dis) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; (N &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (N &lt; dis ? <span class="number">0</span> : ((N - dis) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Loppinha-the-boy-who-likes-sopinha"><a href="#E-Loppinha-the-boy-who-likes-sopinha" class="headerlink" title="E. Loppinha, the boy who likes sopinha"></a>E. Loppinha, the boy who likes sopinha</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~01~$串，每个长度为$~p~$的连续$~1~$会消耗$~\frac{p(p+1)}{2}~$单位的蛋白质。但是总共只有$~K~$单位的蛋白质。计算最少把多少$~1~$变为$~0~$使得蛋白质足够。<br>数据范围$~1\leq N\leq450,~1\leq K\leq10^7~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用$~f(l,t)~$表示长度为$~l~$的连续$~1~$中间把$~t~$个$~1~$变为$~0~$后蛋白质的最少消耗量，然后对于原串一直模拟，直到$~K~$足够即可。总时间复杂度为$~O(N^2)~$。可以堆优化，总时间复杂度降为$~O(N\log N)~$。</p><h3 id="代码（-O-N-2-）"><a href="#代码（-O-N-2-）" class="headerlink" title="代码（$~O(N^2)~$）"></a><strong>代码（$~O(N^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> cal[maxn], cut[maxn][maxn], len[maxn], tim[maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">iota(cal, cal + maxn, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">cut[i][<span class="number">0</span>] = cal[i] += cal[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != i; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> k = (i - j) / (j + <span class="number">1</span>), l = (i - j) % (j + <span class="number">1</span>);</span><br><span class="line">cut[i][j] = (j + <span class="number">1</span> - l) * cal[k] + l * cal[k + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j) &#123;</span><br><span class="line">len[cnt++] = j;</span><br><span class="line">sum += cal[j];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum &gt; K) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0</span>, pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != cnt; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cur = cut[len[i]][tim[i]] - cut[len[i]][tim[i] + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (val &lt; cur) &#123;</span><br><span class="line">val = cur;</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum -= val;</span><br><span class="line">++tim[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-N-log-N-）"><a href="#代码（-O-N-log-N-）" class="headerlink" title="代码（$~O(N\log N)~$）"></a><strong>代码（$~O(N\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal(maxn);</span><br><span class="line">iota(cal.begin(), cal.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) cal[i] += cal[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">auto</span> F = [&amp;] (<span class="keyword">int</span> l, <span class="keyword">int</span> t) &#123;</span><br><span class="line"><span class="keyword">if</span> (t &gt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k1 = (l - t) / (t + <span class="number">1</span>), k2 = (l - t) % (t + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> (t + <span class="number">1</span> - k2) * cal[k1] + k2 * cal[k1 + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> G = [&amp;] (<span class="keyword">int</span> l, <span class="keyword">int</span> t) &#123; <span class="keyword">return</span> F(l, t) - F(l, t + <span class="number">1</span>); &#125;;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; len;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j) &#123;</span><br><span class="line">len.emplace_back(j);</span><br><span class="line">sum += cal[j];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = len.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tim(size);</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; heap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) heap.emplace(G(len[i], tim[i]), i);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum &gt; K) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="keyword">auto</span> top = heap.top();</span><br><span class="line">heap.pop();</span><br><span class="line">sum -= top.first;</span><br><span class="line">heap.emplace(G(len[top.second], ++tim[top.second]), top.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Number-Preference"><a href="#F-Number-Preference" class="headerlink" title="F. Number Preference"></a>F. Number Preference</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> INF = <span class="number">1000000000000000000L</span>L;</span><br><span class="line"><span class="keyword">int</span> N, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int</span>&gt; like;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int64_t</span>&gt; hate;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="keyword">int</span> t, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; s;</span><br><span class="line">cnt += t == <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (s--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> l;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">1</span>) ++like[l];</span><br><span class="line"><span class="keyword">else</span> hate.emplace(l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (like.empty()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; INF - hate.size() &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : like) res += hate.find(p.first) == hate.end() &amp;&amp; p.second == cnt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Traffic-Management"><a href="#G-Traffic-Management" class="headerlink" title="G. Traffic Management"></a>G. Traffic Management</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~N~$辆车的初始位置$~S~$和初始速度$~V~$，均为正方向。如果两辆车相撞，则后方较快的消失。问最后一次撞击的位置。<br>数据范围$~1\leq N\leq10^5,~0\leq S,V\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。按初始位置排好序后不难发现后面的车至多与前面的车追尾一次。总时间复杂度为$~O(N\log N)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt; car(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : car) <span class="built_in">cin</span> &gt;&gt; c.first &gt;&gt; c.second;</span><br><span class="line">sort(car.begin(), car.end(), greater&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt;());</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i != N; ++i)</span><br><span class="line">car[j].second &lt; car[i].second ? res = max(res, (car[j].first - car[i].first) / (car[i].second - car[j].second)) : j = i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>) &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-I-Will-Go"><a href="#I-I-Will-Go" class="headerlink" title="I. I Will Go"></a>I. I Will Go</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个大小为$~N~$的森林，根节点去聚会不受任何限制，其他节点去聚会的必要条件是它父亲也去了宴会。有$~Q~$次询问，询问$~y~$是否去了聚会，但是被告知$~x~$去了，判断能否根据$~x~$确定答案。<br>数据范围$~2\leq N\leq1\times10^5,~1\leq Q\leq2\times10^5~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>当且仅当$~x~$是$~y~$的后代时，才能确定答案。用$~\rm DFS~$判断即可。总时间复杂度为$~O(N+Q)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn], root;</span><br><span class="line"><span class="keyword">int</span> dfs_clock, l[maxn], r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; l[u] = dfs_clock++; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) dfs(v); r[u] = dfs_clock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (~a) son[a].emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> root.emplace_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; r : root) dfs(r);</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (l[x] &gt;= l[y] &amp;&amp; r[x] &lt;= r[y] ? <span class="string">"Yes\n"</span> : <span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-PC-is-for-kicking"><a href="#L-PC-is-for-kicking" class="headerlink" title="L. PC is for kicking"></a>L. PC is for kicking</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj(N + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bfs(<span class="number">1</span>, a), vis(N + <span class="number">1</span>);</span><br><span class="line">vis[a] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (--N) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">adj[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!bfs.empty()) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : bfs) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123; next.emplace_back(v); vis[v] = <span class="number">1</span>; &#125;</span><br><span class="line">bfs = move(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BNU排位二</title>
      <link href="/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%BA%8C/"/>
      <url>/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247236" target="_blank" rel="noopener">2019BNU排位二</a></p><h2 id="A-Nate-and-Actual-3D-Girls"><a href="#A-Nate-and-Actual-3D-Girls" class="headerlink" title="A. Nate and Actual 3D Girls"></a>A. Nate and Actual 3D Girls</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>), tot(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ++cnt[(ch - <span class="string">'A'</span>) % <span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ++tot[(ch - <span class="string">'A'</span> + k) % <span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> res = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) res &amp;= cnt[i] &gt;= tot[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"Make her kokoro go doki-doki!"</span> : <span class="string">"It is gonna be daijoubu."</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nate-and-Bones"><a href="#B-Nate-and-Bones" class="headerlink" title="B. Nate and Bones"></a>B. Nate and Bones</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n * m; i; --i) &#123;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line">res += __gcd(x, l) != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Nate-and-Contest-Invitation"><a href="#C-Nate-and-Contest-Invitation" class="headerlink" title="C. Nate and Contest Invitation"></a>C. Nate and Contest Invitation</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个朋友关系网。最多能邀请$~k~$个人，被邀请的人的朋友以及朋友的朋友等也会来。输出最多能来多少人。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>并查集或者$~\text{DFS}~$维护每个连通块的大小即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">return</span> u == fa[u] ? u : fa[u] = find(fa[u]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">u = find(u);</span><br><span class="line">v = find(v);</span><br><span class="line"><span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">fa[v] = u;</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) sz[fa[u] = u] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; fri(m);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; f : fri) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; f.first &gt;&gt; f.second;</span><br><span class="line">name.emplace(f.first);</span><br><span class="line">name.emplace(f.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; str : name) id[str] = temp++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; f : fri) merge(id[f.first], id[f.second]);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; group;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) <span class="keyword">if</span> (fa[u] == u) group.emplace_back(sz[u]);</span><br><span class="line">sort(group.begin(), group.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(group.begin() + max(<span class="number">0</span>, <span class="keyword">int</span>(group.size()) - k), group.end(), <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Nate-and-Dimension-Hopping-Money"><a href="#D-Nate-and-Dimension-Hopping-Money" class="headerlink" title="D. Nate and Dimension-Hopping Money"></a>D. Nate and Dimension-Hopping Money</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">double</span> n, x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x /= <span class="number">100</span>;</span><br><span class="line">y /= <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>)</span><br><span class="line">&lt;&lt; n &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x - y + x * y) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x - y + x * y) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Nate-and-Fan-Meet-and-Greet"><a href="#F-Nate-and-Fan-Meet-and-Greet" class="headerlink" title="F. Nate and Fan Meet-and-Greet"></a>F. Nate and Fan Meet-and-Greet</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Nate-and-Game"><a href="#G-Nate-and-Game" class="headerlink" title="G. Nate and Game"></a>G. Nate and Game</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个三角形，问一条平行于$~\rm x~$轴的直线最多穿过多少三角形。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>扫描线维护每一条线经过的三角形数量。本题由于坐标范围小，可以改用差分数组维护，复杂度可以少一个$~\log~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; add, sub;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="keyword">int</span> mi = *min_element(y, y + <span class="number">3</span>), mx = *max_element(y, y + <span class="number">3</span>);</span><br><span class="line">++add[mi];</span><br><span class="line">++sub[mx];</span><br><span class="line">line.emplace(mi);</span><br><span class="line">line.emplace(mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; y : line)&#123;</span><br><span class="line">res = max(res, cur += add[y]);</span><br><span class="line">cur -= sub[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Nate-and-High-School-Nakama"><a href="#H-Nate-and-High-School-Nakama" class="headerlink" title="H. Nate and High School Nakama"></a>H. Nate and High School Nakama</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>总共有$~n~$个点，输出所有可能的图中的连通块数量之和。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先计算$~n~$阶完全图的连图子图数量$~f(n)~$。记不连通子图数量为$~g(n)~$，则有$~f(n)+g(n)=2^{\frac{n(n-1)}{2}}~$。对$~g(n)~$，枚举点$~1~$所在连通块的大小，则有</p><script type="math/tex; mode=display">g(n)=\sum_{k=1}^{n-1}f(k)\binom{n-1}{k-1}2^{\frac{(n-k)(n-k-1)}{2}}</script><p>即</p><script type="math/tex; mode=display">f(n)=2^{\frac{n(n-1)}{2}}-\sum_{k=1}^{n-1}f(k)\binom{n-1}{k-1}2^{\frac{(n-k)(n-k-1)}{2}}</script><p>记全点集为$~S=\lbrace~1,2,\dots,n~\rbrace~$，用边集$~E~$代表图，记$~F(E)~$为$~E~$的所有连通块点集构成的集合。即对任意$~V\in F(E)~$，有$~V\subset S~$且$~V~$在$~E~$下连通，并且$~V_1\cap V_2=\varnothing,\forall~V_1\neq V_2\in F(E)~$。于是答案为计算$~\sum_{E}{\mid F(E)\mid}~$。对于上述$~V~$与$~E~$的关系，即$~V~$构成$~E~$的连通块点集，记为$~V\mid E~$。则有如下恒等变换</p><script type="math/tex; mode=display">\sum_{E}{\mid F(E)\mid}=\sum_{E}\sum_{V\in F(E)}1=\sum_{V\subset S}\sum_{V\mid E}1</script><p>其中$~\sum_{V\mid E}1~$表示点集$~V~$恰好构成一个连通块的图的数量。不难注意到对于$~{\mid V_1\mid}={\mid V_2\mid}~$，有$~\sum_{V_1\mid E}1=\sum_{V_2\mid E}1~$。于是把枚举$~S~$的子集$~V~$改为枚举$~\mid V\mid~$，则答案为</p><script type="math/tex; mode=display">\sum_{E}{\mid F(E)\mid}=\sum_{k=1}^{n}\binom{n}{k}f(k)2^{\frac{(n-k)(n-k-1)}{2}}</script><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod  = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int64_t</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (n = (n % (mod - <span class="number">1</span>) + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], cal[maxn], res[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">cal[i] = add(cal[i - <span class="number">1</span>], i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) cal[i] = fpow(<span class="number">2</span>, cal[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fact[n], mul(finv[k], finv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">res[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">2</span>; n != maxn; ++n) &#123;</span><br><span class="line">res[n] = cal[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != n; ++k) res[n] = sub(res[n], mul(res[k], mul(bino(n - <span class="number">1</span>, k - <span class="number">1</span>), cal[n - k])));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) ans = add(ans, mul(res[k], mul(bino(n, k), cal[n - k])));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Nate-and-Integer-Coefficient"><a href="#I-Nate-and-Integer-Coefficient" class="headerlink" title="I. Nate and Integer Coefficient"></a>I. Nate and Integer Coefficient</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>已知$~a~$且$~x~$满足$~x^2-ax+1=0~$，求$~b~$满足$~x^{2n}-bx^n+1=0~$。<br>数据范围$~1\leq T\leq10^5,~{\mid a\mid},{\mid n\mid}\leq10^{18}~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现$~\pm n~$的答案是一样的，下面只考虑$~n\geq 0~$的情况。记$~a_k~$满足$~x^{2k}-a_kx^k+1=0~$。有$~a_0=2,~a_1=a~$。于是对于$~0\leq k_1\leq k_2~$，有</p><script type="math/tex; mode=display">a_{k_1}x^{k_1}=x^{2k_1}+1\\a_{k_2}x^{k_2}=x^{2k_2}+1</script><p>两式相乘，得</p><script type="math/tex; mode=display">\begin{aligned}a_{k_1}a_{k_2}x^{k_1+k_2}&=(x^{2k_1}+1)(x^{2k_2}+1)\\&=(x^{2(k_1+k_2)}+1)+x^{2k_1}(x^{2(k_2-k_1)}+1)\\&=a_{k1+k2}x^{k_1+k_2}+x^{2k_1}\cdot a_{k_2-k_1}x^{k_2-k_1}\\&=(a_{k_1+k_2}+a_{k_2-k_1})x^{k_1+k_2}\end{aligned}</script><p>取$~k_1=n,~k_2=n+1~$，于是得到序列$~\lbrace~a_n~\rbrace~$的线性递推式</p><script type="math/tex; mode=display">a_{n+1}=a_1a_n-a_{n-1}=a\cdot a_n-a_{n-1}</script><p>接下来矩阵快速幂即可。总时间复杂度为$~O(T\log n)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> A[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> B[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> C[<span class="number">2</span>][<span class="number">2</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">2</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">2</span>; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != <span class="number">2</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> a, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> A = (a % mod + mod) % mod;</span><br><span class="line"><span class="keyword">if</span> (!n) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> bas[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; A, mod - <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125; &#125;, mat[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span> &#125; &#125;, tmp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (n = <span class="built_in">abs</span>(n); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(mat, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(bas, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(bas, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(mul(mat[<span class="number">1</span>][<span class="number">0</span>], A), add(mat[<span class="number">1</span>][<span class="number">1</span>], mat[<span class="number">1</span>][<span class="number">1</span>])) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BNU排位一</title>
      <link href="/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%80/"/>
      <url>/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247234" target="_blank" rel="noopener">2019BNU排位一</a></p><h2 id="A-Mental-Rotation"><a href="#A-Mental-Rotation" class="headerlink" title="A. Mental Rotation"></a>A. Mental Rotation</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个图，输出旋转后的样子。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟即可，具体见代码。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'.'</span>] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'&lt;'</span>] = <span class="string">'^'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'&gt;'</span>] = <span class="string">'v'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'^'</span>] = <span class="string">'&gt;'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'v'</span>] = <span class="string">'&lt;'</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pic(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : pic) <span class="built_in">cin</span> &gt;&gt; row;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ch == <span class="string">'R'</span> ? ++cnt : --cnt;</span><br><span class="line"><span class="keyword">auto</span> rotate = [&amp;] () &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != N; ++i) &#123;</span><br><span class="line">tmp[i].resize(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != N; ++j) tmp[i][j] = pic[N - <span class="number">1</span>  -j][i];</span><br><span class="line">&#125;</span><br><span class="line">pic = move(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : pic) <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch : row) ch = <span class="built_in">map</span>[ch];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (cnt &amp;= <span class="number">3</span>; cnt; --cnt) rotate();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row : pic) <span class="built_in">cout</span> &lt;&lt; row &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-SpongeBob-SquarePants"><a href="#B-SpongeBob-SquarePants" class="headerlink" title="B. SpongeBob SquarePants"></a>B. SpongeBob SquarePants</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> w, h;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (w == h ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-I-Don’t-Want-To-Pay-For-The-Late-Jar"><a href="#C-I-Don’t-Want-To-Pay-For-The-Late-Jar" class="headerlink" title="C. I Don’t Want To Pay For The Late Jar!"></a>C. I Don’t Want To Pay For The Late Jar!</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> D;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= D; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> N, S, res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; S;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="keyword">int</span> f, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; f &gt;&gt; t;</span><br><span class="line">res = max(res, f - max(<span class="number">0</span>, t - S));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Optimal-Slots"><a href="#E-Optimal-Slots" class="headerlink" title="E. Optimal Slots"></a>E. Optimal Slots</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出$~01~$背包的字典序最小方案。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸$~01~$背包，可以用<code>std::bitset</code>优化。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">if</span> (!T) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N), cal(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">bitset</span>&lt;(1 &lt;&lt; 14)&gt;&gt; dp0(N + <span class="number">1</span>), dp1(N + <span class="number">1</span>);</span><br><span class="line">dp1[N].<span class="built_in">set</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">dp0[i] = dp0[i + <span class="number">1</span>] | dp1[i + <span class="number">1</span>];</span><br><span class="line">dp1[i] = dp0[i] &lt;&lt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = T; ~j; --j) <span class="keyword">if</span> (dp1[i].test(j)) &#123; cal[i] = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sum = *max_element(cal.begin(), cal.end()), p = <span class="number">-1</span>; sum; sum -= a[p]) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123; ++p; &#125; <span class="keyword">while</span> (!dp1[p].test(sum));</span><br><span class="line">res.emplace_back(a[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ans : res) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(res.begin(), res.end(), <span class="number">0</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Military-Class"><a href="#F-Military-Class" class="headerlink" title="F. Military Class"></a>F. Military Class</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>二分图，其中两行之间编号之差的绝对值不超过$~e~$的可以连边，同时给出了$~k~$对边不能连。问一共有多少完美匹配。<br>数据范围$~1\leq n\leq2000,~0\leq e\leq4,~0\leq k\leq2000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\text{DP}~$。记录半径为$~4~$总共$~9~$个点的匹配状态，总时间复杂度为$~O(9\cdot2^9\cdot n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = <span class="number">1</span> &lt;&lt; <span class="number">9</span> ;</span><br><span class="line"><span class="keyword">int</span> ok[maxn], dp[maxn][maxs];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, e, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; e &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">ok[i] = ((<span class="number">1</span> &lt;&lt; min(e + <span class="number">5</span>, n - i + <span class="number">4</span>)) - <span class="number">1</span>) ^ ((<span class="number">1</span> &lt;&lt; (<span class="number">4</span> - min(e, i))) - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(u - v) &lt;= e) ok[u - <span class="number">1</span>] &amp;= ~(<span class="number">1</span> &lt;&lt; (v - u + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][((<span class="number">1</span> &lt;&lt; min(<span class="number">9</span>, n + <span class="number">4</span>)) - <span class="number">1</span>) ^ ((<span class="number">1</span> &lt;&lt; <span class="number">4</span>) - <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s != maxs; ++s) <span class="keyword">if</span> (dp[i][s]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != (<span class="number">1</span> &lt;&lt; <span class="number">9</span>); j &lt;&lt;= <span class="number">1</span>) <span class="keyword">if</span> (ok[i] &amp; s &amp; j) &#123;</span><br><span class="line"><span class="keyword">int</span> ss = s ^ j;</span><br><span class="line"><span class="keyword">if</span> (ss &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">ss &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">5</span> &lt; n) ss ^= <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line">dp[i + <span class="number">1</span>][ss] = add(dp[i + <span class="number">1</span>][ss], dp[i][s]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxs; ++i) assert(!dp[n][i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Are-You-Safe"><a href="#H-Are-You-Safe" class="headerlink" title="H. Are You Safe?"></a>H. Are You Safe?</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>求一个凸包并判断一些点是否在凸包内。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接抄板子。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">Point(<span class="keyword">int</span> _x = <span class="number">0</span>, <span class="keyword">int</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x ? y &lt; p.y : x &lt; p.x; &#125;</span><br><span class="line">Point <span class="keyword">operator</span>- (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x - p.x, y - p.y); &#125;</span><br><span class="line"><span class="keyword">int</span>   <span class="keyword">operator</span>^ (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - p.x * y; &#125;</span><br><span class="line">&#125; c[<span class="number">64</span>], p[<span class="number">64</span>], h[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convex</span><span class="params">(Point *p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</span><br><span class="line">sort(p, p + n);</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">1</span> &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">ch[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; k &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">ch[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) --m;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> C, P;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; C &gt;&gt; P;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != C; ++i) <span class="built_in">cin</span> &gt;&gt; c[i].x &gt;&gt; c[i].y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != P; ++i) <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class="line"><span class="keyword">int</span> n = convex(c, C, h);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; h[i].x &lt;&lt; <span class="string">' '</span> &lt;&lt; h[i].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; h-&gt;x &lt;&lt; <span class="string">' '</span> &lt;&lt; h-&gt;y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p[P] = p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) area += h[i] ^ h[i + <span class="number">1</span>];</span><br><span class="line">area = <span class="built_in">abs</span>(area);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != P; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[i].x &lt;&lt; <span class="string">' '</span> &lt;&lt; p[i].y &lt;&lt; <span class="string">" is "</span>;</span><br><span class="line"><span class="keyword">int</span> calc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) calc += <span class="built_in">abs</span>((h[j] - p[i]) ^ (h[j + <span class="number">1</span>] - p[i]));</span><br><span class="line"><span class="keyword">if</span> (area == calc) <span class="built_in">cout</span> &lt;&lt; <span class="string">"un"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"safe!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-To-Crash-Or-Not-To-Crash"><a href="#I-To-Crash-Or-Not-To-Crash" class="headerlink" title="I. To Crash Or Not To Crash"></a>I. To Crash Or Not To Crash</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line"><span class="keyword">auto</span> p = str.find(<span class="string">'='</span>);</span><br><span class="line"><span class="keyword">if</span> (~p) &#123;</span><br><span class="line"><span class="keyword">for</span> (++p; p != str.size(); ++p) <span class="keyword">if</span> (str[p] != <span class="string">'.'</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; str[p] &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"You shall pass!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Kitchen-Plates"><a href="#J-Kitchen-Plates" class="headerlink" title="J. Kitchen Plates"></a>J. Kitchen Plates</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一组大小关系，问是否存在一种排序满足所有的关系。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>拓扑排序。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> deg[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> u = str.front() - <span class="string">'A'</span>, v = str.back() - <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">1</span>] == <span class="string">'&gt;'</span>) swap(u, v);</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">++deg[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != <span class="number">5</span>; ++u) <span class="keyword">if</span> (!deg[u]) topo.emplace_back(u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(topo.size()); ++i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : adj[topo[i]]) <span class="keyword">if</span> (!--deg[u]) topo.emplace_back(u);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(topo.size()) != <span class="number">5</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : topo) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(u + <span class="string">'A'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Help-The-Support-Lady"><a href="#K-Help-The-Support-Lady" class="headerlink" title="K. Help The Support Lady"></a>K. Help The Support Lady</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个任务，用时为$~t~$，期限为$~2t~$。问最多能做多少任务。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。对于每个任务，在$~t~$时刻之前开始才能完成，否则直接抛弃。对$~t~$升序，每次做当前可以完成的用时最短的任务即可。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= m; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; tt : t) <span class="built_in">cin</span> &gt;&gt; tt;</span><br><span class="line">sort(t.begin(), t.end());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= t[i]) &#123;</span><br><span class="line">j += t[i];</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BNU排位热身</title>
      <link href="/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E7%83%AD%E8%BA%AB/"/>
      <url>/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E7%83%AD%E8%BA%AB/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247198" target="_blank" rel="noopener">2019BNU排位热身</a></p><h2 id="A-Pineapple-Incident"><a href="#A-Pineapple-Incident" class="headerlink" title="A. Pineapple Incident"></a>A. Pineapple Incident</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> t, s, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; s &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (t &lt;= x &amp;&amp; (x - t) % s &lt;= <span class="number">1</span> &amp;&amp; t + <span class="number">1</span> != x ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Barnicle"><a href="#B-Barnicle" class="headerlink" title="B. Barnicle"></a>B. Barnicle</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个科学记数法数字字符串，转化为小数表示。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用字符<code>&#39;e&#39;</code>和<code>&#39;.&#39;</code>把原串截成整数部分、小数部分和进位部分$~3~$段，然后可以利用<code>std::stringstream</code>把进位部分转化为整数，把小数部分的前缀移动至整数部分的后缀，处理完前导零和后导零即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> b, p1 = str.find(<span class="string">'.'</span>), p2 = str.find(<span class="string">'e'</span>);</span><br><span class="line">string a(str.substr(0, p1)), d(str.substr(p1 + 1, p2 - p1 - 1));</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str.substr(p2 + <span class="number">1</span>))</span></span>;</span><br><span class="line">ss &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> bb = min(b, p2 - p1 - <span class="number">1</span>);</span><br><span class="line">b -= bb;</span><br><span class="line">a += d.substr(<span class="number">0</span>, bb);</span><br><span class="line">d  = d.substr(bb);</span><br><span class="line"><span class="keyword">while</span> (!d.empty() &amp;&amp; d.back() == <span class="string">'0'</span>) d.pop_back();</span><br><span class="line"><span class="keyword">if</span> (d.empty()) <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">string</span>(b, <span class="string">'0'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">'.'</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Lorenzo-Von-Matterhorn"><a href="#C-Lorenzo-Von-Matterhorn" class="headerlink" title="C. Lorenzo Von Matterhorn"></a>C. Lorenzo Von Matterhorn</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在一棵完全二叉树上支持路径修改和路径查询操作。<br>数据范围$~1\leq q\leq1000,~1\leq u,v\leq10^{18},~1\leq w\leq10^9~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到这棵树的深度至为$~60~$层，以及总操作数不超过$~1000~$，那么涉及到的点或边的总量不会超过$~1.2\times10^6~$。于是可以用<code>std::map</code>暴力存权值，问题的关键变为如何在完全二叉树上确定路径。事实上只要当$~u\neq v~$时，一直让较大的那个数字除以$~2~$下取整即可，边可以用它的儿子点编号表示。总复杂度$~O(60q\log q)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt; cost;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="keyword">int64_t</span> u, v, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &lt; v) &#123;</span><br><span class="line">cost[v] += w;</span><br><span class="line">v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cost[u] += w;</span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &lt; v) &#123;</span><br><span class="line">res += cost[v];</span><br><span class="line">v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res += cost[u];</span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Puzzles"><a href="#D-Puzzles" class="headerlink" title="D. Puzzles"></a>D. Puzzles</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树的形状，根节点为$~1~$，在随机$~\text{DFS}~$过程下，问每个节点的$~\text{DFS}~$序的期望$~f(u)~$。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先进行一次$~\text{DFS}~$过程线性处理出每个节点为根的子树的大小$~s(u)~$。根节点的期望值一定是$~1~$。假设已知节点$~p~$的期望值，那么考虑它的儿子$~u~$的期望值$~f(p)~$。对于另一个儿子$~v~$，如果先遍历了$~v~$则$~u~$的$~\text{DFS}~$序需要增加$~s(v)~$。注意到对于$~u~$的每个兄弟$~v~$，它们遍历的前后顺序的概率各占一半，且相互独立，于是有$~f(u)=f(p)+\frac{1}{2}\sum_{v\in son(p)}^{u\neq v}s(v)+1~$。再执行一遍$~\text{DFS}~$过程即可，总时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">double</span> sz[maxn], ord[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) sz[u] += dfs1(v); <span class="keyword">return</span> sz[u] += <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; ord[u] += <span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) &#123; ord[v] = ord[u] + (sz[u] - sz[v] - <span class="number">1</span>) / <span class="number">2</span>; dfs2(v); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">2</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">son[p].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u != n; ++u) <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">7</span>) &lt;&lt; ord[u] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ord[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-PLEASE"><a href="#E-PLEASE" class="headerlink" title="E. PLEASE"></a>E. PLEASE</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~3~$个杯子，初始球在中间，每次等概率随机交换左边和中间或者右边和中间。问在$~n=\prod_{i=1}^{k}a_i~$次交换后球在中间的概率是多少，用即约分数取模后表出。<br>数据范围$~1\leq k\leq10^5,~1\leq a\leq10^{18}~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设第$~i~$次交换后球在中间的概率为$~b_i~$，则有$~b_0=1,~b_1=0~$。不难得出关系式</p><script type="math/tex; mode=display">b_{n+1}=\frac{1-b_n}{2}</script><p>及</p><script type="math/tex; mode=display">b_{n+1}-\frac{1}{3}=-\frac{1}{2}\left(b_n-\frac{1}{3}\right)</script><p>于是得出通项公式</p><script type="math/tex; mode=display">\begin{aligned}b_n &=\frac{1}{3}+\frac{2}{3}\left(-\frac{1}{2}\right)^n            \\    &=\frac{\frac{1}{3}\left(2^{n-1}-(-1)^{n-1}\right)}{2^{n-1}}\end{aligned}</script><p>于有$~p=\frac{1}{3}(2^{n-1}-(-1)^{n-1}),q=2^{n-1}~$且满足$~(p,q)=1~$。接下来欧拉降幂和快速幂即可，总时间复杂度为$~O(k+\log mod)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> neg = <span class="number">1000000006</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">500000004</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv3 = <span class="number">333333336</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">int64_t</span> aa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> par = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">aa = a % neg * aa % neg;</span><br><span class="line">par &amp;= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> two = fpow(<span class="number">2</span>, aa);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sub(mul(two, inv2), mul(par ? add(two, <span class="number">1</span>) : sub(two, <span class="number">1</span>), inv3)) &lt;&lt; <span class="string">'/'</span> &lt;&lt; mul(two, inv2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Link-Cut-Tree"><a href="#F-Link-Cut-Tree" class="headerlink" title="F. Link/Cut Tree"></a>F. Link/Cut Tree</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出$~[l,r]~$中的所有的$~k~$的幂。<br>数据范围$~1\leq l\leq r\leq10^{18},~2\leq k\leq10^9~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。注意不要爆<code>long long</code>。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> INF = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> l, r, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; res;</span><br><span class="line"><span class="keyword">int64_t</span> cur = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cur &lt; l) cur = <span class="keyword">double</span>(cur) * k &gt; INF ? INF : cur * k;</span><br><span class="line"><span class="keyword">while</span> (cur &lt;= r) &#123;</span><br><span class="line">res.emplace_back(cur);</span><br><span class="line">cur = <span class="keyword">double</span>(cur) * k &gt; INF ? INF : cur * k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Gena’s-Code"><a href="#G-Gena’s-Code" class="headerlink" title="G. Gena’s Code"></a>G. Gena’s Code</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一组数字，至多一个不是$~10~$的幂，求它们的积。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>找出不是$~10~$的幂的特殊数字串然后根据其它串的长度在它后面补$~0~$即可。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">head</span><span class="params">(<span class="string">"1"</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"0"</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"1"</span> + <span class="built_in">string</span>(str.size() - <span class="number">1</span>, <span class="string">'0'</span>)) l += str.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> head = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; head &lt;&lt; <span class="built_in">string</span>(l, <span class="string">'0'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Peter-and-Snow-Blower"><a href="#H-Peter-and-Snow-Blower" class="headerlink" title="H. Peter and Snow Blower"></a>H. Peter and Snow Blower</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个多边形和一个旋转中心，输出多边形绕旋转中心一周后扫过的面积。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>计算几何。只要求出多边形中离旋转中心最远的距离和最近的距离。具体见代码。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, Point&amp; p) &#123; <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis2</span><span class="params">(Point p1, Point p2)</span> </span>&#123; <span class="keyword">return</span> hypot(p1.x - p2.x, p1.y - p2.y); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> px, py;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; px &gt;&gt; py;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; x(n), y(n);</span><br><span class="line"><span class="keyword">double</span> R = <span class="number">0</span>, r = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">x[i] -= px;</span><br><span class="line">y[i] -= py;</span><br><span class="line"><span class="keyword">double</span> d2 = x[i] * x[i] + y[i] * y[i];</span><br><span class="line">R = max(R, d2);</span><br><span class="line">r = min(r, d2);</span><br><span class="line">&#125;</span><br><span class="line">x.emplace_back(x.front());</span><br><span class="line">y.emplace_back(y.front());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (x[i + <span class="number">1</span>] * (x[i + <span class="number">1</span>] - x[i]) + y[i + <span class="number">1</span>] * (y[i + <span class="number">1</span>] - y[i]) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (x[i] * (x[i] - x[i + <span class="number">1</span>]) + y[i] * (y[i] - y[i + <span class="number">1</span>]) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="built_in">fabs</span>(x[i + <span class="number">1</span>] * y[i] - x[i] * y[i + <span class="number">1</span>]) / hypot(x[i + <span class="number">1</span>] - x[i], y[i + <span class="number">1</span>] - y[i]);</span><br><span class="line">R = max(R, d * d);</span><br><span class="line">r = min(r, d * d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">7</span>) &lt;&lt; <span class="built_in">acos</span>(<span class="keyword">double</span>(<span class="number">-1</span>)) * (R - r) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Skills"><a href="#I-Skills" class="headerlink" title="I. Skills"></a>I. Skills</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定能力序列$~a_1,a_2,\dots,a_n~$并且还可以再操作$~m~$次$~+1~$，序列值上界为$~A~$。最终序列的权值计算为</p><script type="math/tex; mode=display">(\sum_{i=1}^{n}{\Bbb I(a_i=A)})\times c_f+\min(a1,a2,\dots,a_n)\times c_m</script><p>输出最大的权值以及此时的新序列$~\hat{a}_1,\hat{a}_2,\dots,\hat{a}_n~$。<br>数据范围$~1\leq n\leq100000,~1\leq A\leq10^9,~0\leq c_f,c_m\leq1000,~0\leq m\leq10^{15}~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对序列$~a_1,a_2,\dots,~a_n~$升序，处理好前缀和后缀和。权值最大化的方案一定是让一个前缀增加至一个相等的新最小值，后缀增加至$~A~$。那么枚举多长的后缀变为$~A~$，可以二分得到新的最小值最大可以是多少，更新答案即可。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> A, cf, cm, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; A &gt;&gt; cf &gt;&gt; cm &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; a(n), p(n), suf(n), pre(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line">sort(p.begin(), p.end(), [&amp;] (<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123; <span class="keyword">return</span> a[i] &lt; a[j]; &#125;);</span><br><span class="line">suf.front() = A - a[p.back()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) suf[i] = suf[i - <span class="number">1</span>] + A - a[p[n - i - <span class="number">1</span>]];</span><br><span class="line">pre.front() = a[p.front()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) pre[i] = pre[i - <span class="number">1</span>] + a[p[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) pre[i] = i * a[p[i]] + a[p[i]] - pre[i];</span><br><span class="line"><span class="keyword">int</span> pos1 = upper_bound(pre.begin(), pre.end(), m) - pre.begin(), pos2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int64_t</span> mii = min(A, a[p[pos1 - <span class="number">1</span>]] + (m - pre[pos1 - <span class="number">1</span>]) / pos1), res =  mii * cm;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> rem = m - suf[i];</span><br><span class="line"><span class="keyword">if</span> (rem &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">auto</span> ite = upper_bound(pre.begin(), pre.end(), rem);</span><br><span class="line"><span class="keyword">int</span> l = min(n - i - <span class="number">1</span>, (upper_bound(pre.begin(), pre.end(), rem) - pre.begin()));</span><br><span class="line"><span class="keyword">int64_t</span> mi = min(A, l ? a[p[l - <span class="number">1</span>]] + (rem - pre[l - <span class="number">1</span>]) / l : A);</span><br><span class="line"><span class="keyword">int64_t</span> ans = i * cf + cf + mi * cm;</span><br><span class="line"><span class="keyword">if</span> (res &lt;= ans) &#123;</span><br><span class="line">res = ans;</span><br><span class="line">mii = mi;</span><br><span class="line">pos1 = l;</span><br><span class="line">pos2 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos1--) &#123;</span><br><span class="line">m -= mii - a[p[pos1]];</span><br><span class="line">a[p[pos1]] = mii;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos2) &#123;</span><br><span class="line">m -= A - a[p[n - pos2]];</span><br><span class="line">a[p[n - pos2--]] = A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BNUCPC</title>
      <link href="/2019/05/17/2019BNUCPC/"/>
      <url>/2019/05/17/2019BNUCPC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/895" target="_blank" rel="noopener">2019BNUCPC</a></p><h2 id="A-足球"><a href="#A-足球" class="headerlink" title="A. 足球"></a>A. 足球</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">23</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(a.begin(), a.end(), <span class="number">0</span>) * *min_element(a.begin(), a.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-进制"><a href="#B-进制" class="headerlink" title="B. 进制"></a>B. 进制</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; sum(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> base = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : sum) &#123;</span><br><span class="line">s += base;</span><br><span class="line">base *= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">reverse(str.begin(), str.end());</span><br><span class="line"><span class="keyword">int64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != str.size(); ++i) <span class="keyword">if</span> (str[i] == <span class="string">'1'</span>) res += sum[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-寻找路径"><a href="#C-寻找路径" class="headerlink" title="C. 寻找路径"></a>C. 寻找路径</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>改编自$~\text{2019 Google Code Jam Qualification T2}~$。要从$~n\times m~$的网格图的左下角走到右上角，只能向上或者向右。现给定一个由$~n~$个向上和$~m~$个向右组成的路径，问是否存在另一条路径与给定路径没有重复的边，存在则输出任意一种。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>如果第一步和最后一步不一样，则显然可以输出贴着右下方或者左上方的路径。如果一样，不妨设第一步和最后一步都是向上，那么如果新的路径存在，则它的第一步和最后一步必须向右。如果在给定路径上存在两个连续的向右，那么用$~n~$个向上从这两个向右的中点穿过，前面和后面均为向右即可。如果不存在，很容易发现答案也是不存在的。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">string</span> str, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'U'</span> &amp;&amp; str.back() == <span class="string">'U'</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != n + m; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'R'</span> &amp;&amp; str[i - <span class="number">1</span>] == <span class="string">'R'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(count(str.begin(), str.begin() + i, <span class="string">'R'</span>), <span class="string">'R'</span>) + <span class="built_in">string</span>(n, <span class="string">'U'</span>);</span><br><span class="line">res.append(n + m - res.size(), <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) res = <span class="string">"impossible"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'U'</span> &amp;&amp; str.back() == <span class="string">'R'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(m, <span class="string">'R'</span>) + <span class="built_in">string</span>(n, <span class="string">'U'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'R'</span> &amp;&amp; str.back() == <span class="string">'U'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(n, <span class="string">'U'</span>) + <span class="built_in">string</span>(m, <span class="string">'R'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'R'</span> &amp;&amp; str.back() == <span class="string">'R'</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != n + m; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'U'</span> &amp;&amp; str[i - <span class="number">1</span>] == <span class="string">'U'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(count(str.begin(), str.begin() + i, <span class="string">'U'</span>), <span class="string">'U'</span>) + <span class="built_in">string</span>(m, <span class="string">'R'</span>);</span><br><span class="line">res.append(n + m - res.size(), <span class="string">'U'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) res = <span class="string">"impossible"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-选数字"><a href="#D-选数字" class="headerlink" title="D. 选数字"></a>D. 选数字</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定序列$~a_1,a_2,\dots,a_n~$，问等概率选$~k~$个数字中最小值的期望乘以$~\binom{n}{k}~$的值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题目等价于询问对于所有的$~k~$个数字的选法中最小值的总和。考虑第$~i~$小的数字的贡献次数，相当于先选这个数再在第$~i+1~$小至第$~n~$小（最大）的数字中选剩下的$~k-1~$个数字，这个值是$~\binom{n-i}{k-1}~$。最后全部加起来即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; inv(maxn), fact(maxn), finv(maxn);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">uint64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i + k &lt;= n; ++i) res += mul(mul(a[i], fact[n - i - <span class="number">1</span>]), mul(finv[k - <span class="number">1</span>], finv[n - k - i]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-高等术学"><a href="#E-高等术学" class="headerlink" title="E. 高等术学"></a>E. 高等术学</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>场上初始有$~1~$号怪兽，每个怪兽死亡都会召唤若干新的怪兽到场上，共$~n~$只，血量为$~h_1,h_2,\dots,h_n~$。攻击为$~\text{AOE}~$模式，即每次攻击场上所有怪兽受到相同伤害。攻击力为$~d_1,d_2,\dots,d_m~$的循环。每次攻击需要花费$~1~$的代价，但是如果本次攻击消灭的至少$~1~$只怪兽，则下次攻击免费。问消灭所有怪兽的总代价。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^5,~1\leq h\leq10^9,~1\leq d\leq10^9~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然要用堆来维护当前场上血量最少的怪。然后计算需要多少次攻击时现考虑需要多少个$~m~$次的攻击，然后在$~d~$的前缀和上二分。一个技巧是在把新的怪兽入堆时，把它的血量加上之前攻击力的总和。总时间复杂度为$~O(n(\log n+\log m))~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; h(n), d(m);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; next(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; hh : h) <span class="built_in">cin</span> &gt;&gt; hh;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; dd : d) <span class="built_in">cin</span> &gt;&gt; dd;</span><br><span class="line"><span class="keyword">auto</span> p = d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != m; ++i) p[i] += p[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vec : next) &#123;</span><br><span class="line"><span class="keyword">size_t</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">vec.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; nn : vec) <span class="built_in">cin</span> &gt;&gt; nn, --nn;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;&gt; que;</span><br><span class="line">que.emplace(h.front(), <span class="keyword">size_t</span>(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">uint64_t</span> cur = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> rem = que.top().first - cur / m * p.back();</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(p.begin(), p.end(), rem);</span><br><span class="line"><span class="keyword">uint64_t</span> cnt = ite - p.begin() - cur % m;</span><br><span class="line"><span class="keyword">if</span> (ite == p.end()) &#123;</span><br><span class="line">rem -= p.back();</span><br><span class="line">cnt += rem / p.back() * m;</span><br><span class="line"><span class="keyword">if</span> (rem %= p.back()) cnt += lower_bound(p.begin(), p.end(), rem) - p.begin();</span><br><span class="line"><span class="keyword">else</span> --cnt;</span><br><span class="line">&#125;</span><br><span class="line">res += cnt;</span><br><span class="line">cur += cnt;</span><br><span class="line">++cur;</span><br><span class="line"><span class="keyword">uint64_t</span> tot = cur / m * p.back() + p[cur % m] - d[cur % m];</span><br><span class="line"><span class="keyword">while</span> (!que.empty() &amp;&amp; que.top().first &lt;= tot) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; nn : next[que.top().second]) que.emplace(h[nn] + tot, nn);</span><br><span class="line">que.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-仙人掌"><a href="#F-仙人掌" class="headerlink" title="F. 仙人掌"></a>F. 仙人掌</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问大小为$~n~$且满足$~\text{DFS}~$序为$~1,2,\dots,n~$的有标号仙人掌个数。仙人掌为任何一条边至多属于一个简单环的连通图。<br>数据范围$~1\leq T\leq5000,~1\leq n\leq5000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。用$~{\scr F}_i~$表示大小为$~i~$且满足$~\text{DFS}~$序单调的有标号仙人掌构成的集合。记$~dp_i^{(0)}={\mid {\scr F}_i\mid}~$，则$~dp^{(0)}~$为答案序列。对于仙人掌$~F~$，用$~S(F)\subseteq F~$表示$~F~$中包含根节点的不连通子树。记$~dp_i^{(1)}=\sum_{F\in{\scr F}_i}{\mid S(F)\mid}~$。显然$~dp_1^{(0)}=dp_1^{(0)}=1~$。对于$~i&gt;1~$，枚举根$~1~$的标号最大的儿子，设为$~j+1~$。则整个仙人掌等价于标号为$~1,2,\dots,j~$的仙人掌$~A~$的根节点$~1~$上挂一棵标号为$~j+1,j+2,\dots,i~$的仙人掌$~B~$，或者再加一条覆盖边$~(1,j+1)~$的非$~\text{DFS}~$树边$~l~$。注意到$~l~$的一端为$~1~$，另一端根据仙人掌的性质，必然在$~S(B)~$之中。所以有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp_i^{(0)}&=\sum_{j=1}^{i-1}dp_j^{(0)}\times(dp_{i-j}^{(0)}+dp_{i-j}^{(1)})\\dp_i^{(1)}&=\sum_{j=1}^{i-1}dp_j^{(0)}\times dp_{i-j}^{(1)}+dp_j^{(1)}\times(dp_{i-j}^{(0)}+dp_{i-j}^{(1)})\\\end{aligned}</script><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">5000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; dp0(maxn + <span class="number">1</span>), dp1(maxn + <span class="number">1</span>);</span><br><span class="line">dp0[<span class="number">1</span>] = dp1[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i &lt;= maxn; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">1</span>; j != i; ++j) &#123;</span><br><span class="line">dp0[i] = add(dp0[i], mul(dp0[j], add(dp0[i - j], dp1[i - j])));</span><br><span class="line">dp1[i] = add(dp1[i], add(mul(dp0[j], dp1[i - j]), mul(dp1[j], add(dp0[i - j], dp1[i - j]))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp0[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-慢慢变小的序列"><a href="#G-慢慢变小的序列" class="headerlink" title="G. 慢慢变小的序列"></a>G. 慢慢变小的序列</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要对序列$~A_1,A_2,\dots,A_n~$支持两种操作。修改操作为将区间$~[L,R]~$与首项为$~X~$，公差为$~Y~$的等差数列取最小值。查询操作为查询$~A_x~$的值。<br>数据范围$~1\leq n,q\leq100000,~{\mid A\mid}\leq100000,~{\mid X\mid}\leq100000,~{\mid Y\mid}\leq5~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到$~Y~$的数据范围，用$~11~$棵线段树维护每种公差的修改即可。总时间复杂度为$~O(11q\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">minn</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123; x = min(x, y); &#125;</span><br><span class="line"><span class="keyword">int</span> seg[<span class="number">11</span>][<span class="number">1</span> &lt;&lt; <span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build5</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[<span class="number">5</span>][index];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build5(LEFT);</span><br><span class="line">build5(RIGHT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= end || right &lt;= begin) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) &#123;</span><br><span class="line">minn(seg[id][index], x + (begin - left) * (id - <span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">modify(id, LEFT, SEG, x);</span><br><span class="line">modify(id, RIGHT, SEG, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; end || pos &lt;= begin) <span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span> seg[id][index];</span><br><span class="line"><span class="keyword">return</span> min(min(query(id, LEFT, pos), query(id, RIGHT, pos)), seg[id][index] + (pos - begin - <span class="number">1</span>) * (id - <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="built_in">memset</span>(seg, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (seg));</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">build5(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; opt;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r, x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x &gt;&gt; y;</span><br><span class="line">modify(y + <span class="number">5</span>, <span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i) minn(res, query(i, <span class="number">0</span>, n, <span class="number">1</span>, x));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-你不知道的故事"><a href="#H-你不知道的故事" class="headerlink" title="H. 你不知道的故事"></a>H. 你不知道的故事</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~2^k-1~$个灯和开关，初始亮灭状态给出。可以把它们视作一棵完全二叉树的$~\text{BFS}~$序。对于每个开关$~i~$，它一定能控制对应位置的灯$~i~$，有可能控制灯$~2i,2i+1,\lfloor\frac{i}{2}\rfloor~$，即完全二叉树上与它相邻的点。且保证每个灯不会被它的两个儿子开关同时控制。对于任意一种全局开关控制情况，均对应着一种开关方式使得亮的灯数最多。现问这个最多灯数的最小值（在所有全局开关控制情况下）。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。显然直接暴力枚举所有的全局开关控制情况然后做树形$~\text{DP}~$是不可能的。用三个$~01~$状态分别记录当前点的亮灭情况，父亲的亮灭情况，自己的开关能否控制父亲。数值表示的是当前点的子树能对答案的最大贡献。转移过程暴力枚举自己的开关能否控制左右儿子，左右儿子的开关能否控制自己，共$~12~$种情况取$~\min~$，然后根据自己是否按开关取$~\max~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1</span> &lt;&lt; <span class="number">15</span>], dp[<span class="number">1</span> &lt;&lt; <span class="number">15</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(o) for (int o = 0; o != 2; ++o)</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; k); ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; k &gt;&gt; <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; k); ++i) loop(s) loop(f) loop(x) dp[i][s][f][x] = max((s ^ <span class="number">1</span>) + x - ((x &amp; f) &lt;&lt; <span class="number">1</span>), s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="number">1</span> &lt;&lt; k &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i; --i) loop(s) loop(f) loop(x) loop(l) loop(r) loop(lf) loop(rf) <span class="keyword">if</span> (!(lf &amp; rf))</span><br><span class="line">dp[i][s][f][x] = min(dp[i][s][f][x], max(</span><br><span class="line">dp[i &lt;&lt; <span class="number">1</span>][l ^ a[i &lt;&lt; <span class="number">1</span>]][s ^ <span class="number">1</span>][lf] + dp[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][r ^ a[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>]][s ^ <span class="number">1</span>][rf] + (s ^ <span class="number">1</span>) + x - ((x &amp; f) &lt;&lt; <span class="number">1</span>),</span><br><span class="line">dp[i &lt;&lt; <span class="number">1</span>][    a[i &lt;&lt; <span class="number">1</span>]][s    ][lf] + dp[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][    a[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>]][s    ][rf] + s</span><br><span class="line">));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][a[<span class="number">1</span>]][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 比赛笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019BITCPC</title>
      <link href="/2019/04/26/2019BITCPC/"/>
      <url>/2019/04/26/2019BITCPC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102174" target="_blank" rel="noopener">2019BITCPC</a></p><h2 id="A-两只脑斧"><a href="#A-两只脑斧" class="headerlink" title="A. 两只脑斧"></a>A. 两只脑斧</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; res;</span><br><span class="line">res[<span class="string">"0"</span>] = <span class="string">'X'</span>;</span><br><span class="line">res[<span class="string">"5--"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1++"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3++"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7+"</span>] = <span class="string">'I'</span>;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[str];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-炼金术"><a href="#B-炼金术" class="headerlink" title="B. 炼金术"></a>B. 炼金术</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~m~$个小写字母串，要求输出一个长度为$~n~$的小写字母串，使得所有给定串都不是它的子串。保证一定有解。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^4,~{\sum_{i=1}^{m}\mid s_i\mid}\leq3\times10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>建立$~\text{AC}~$自动机，那么可以将其看成一个有向图，显然每个单词末尾字符所对应的节点是不可经过的。在建立自动机的$~\text{BFS}~$过程中，将当前节点是否可经过属性逻辑或上其$~fail~$节点的属性。那么扣去不可经过的节点，题目转化为在该有向图任意寻找一条长度为$~n~$的链。通过$~\text{DFS}~$寻找环，如果无环，则在$~\text{DAG}~$上$~\text{DP}~$，总时间复杂度为$~O(n+\sum s)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> maxs = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> ch_size = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">size_t</span> next[ch_size], fail, to, dis; <span class="keyword">bool</span> end, vis; &#125; trie[maxs];</span><br><span class="line"><span class="keyword">size_t</span> size, n;</span><br><span class="line"><span class="keyword">char</span> res[maxs];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(trie, <span class="number">0</span>, <span class="keyword">sizeof</span> (trie)); size = <span class="number">1</span>, res[n] = <span class="string">'\0'</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != len; ++i) &#123;</span><br><span class="line"><span class="keyword">size_t</span> ch = str[i] - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[cur].next[ch]) trie[cur].next[ch] = size++;</span><br><span class="line">cur = trie[cur].next[ch];</span><br><span class="line">&#125;</span><br><span class="line">trie[cur].end = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">size_t</span>&gt; que;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (trie-&gt;next[i]) que.emplace(trie-&gt;next[i]);</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].next[i]) &#123;</span><br><span class="line">trie[trie[cur].next[i]].fail = trie[trie[cur].fail].next[i];</span><br><span class="line">que.emplace(trie[cur].next[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">trie[cur].next[i] = trie[trie[cur].fail].next[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">trie[cur].end |= trie[trie[cur].fail].end;</span><br><span class="line">trie[cur].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">trie[<span class="number">0</span>].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">size_t</span> cur = <span class="number">0</span>, <span class="keyword">size_t</span> index = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (~trie[cur].to) &#123;</span><br><span class="line">res[index++] = <span class="string">'a'</span> + trie[cur].to;</span><br><span class="line"><span class="keyword">return</span> dfs1(trie[cur].next[trie[cur].to], index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].vis) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">trie[cur].vis = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (!trie[trie[cur].next[i]].end) &#123;</span><br><span class="line">res[index] = <span class="string">'a'</span> + i;</span><br><span class="line"><span class="keyword">if</span> (dfs1(trie[cur].next[trie[cur].to = i], index + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> trie[cur].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> dfs2(<span class="keyword">size_t</span> cur = <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].dis) <span class="keyword">return</span> trie[cur].dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (!trie[trie[cur].next[i]].end)</span><br><span class="line">trie[cur].dis = max(trie[cur].dis, dfs2(trie[cur].next[i]));</span><br><span class="line"><span class="keyword">return</span> ++trie[cur].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>, cur = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != ch_size; ++j) <span class="keyword">if</span> (i + trie[trie[cur].next[j]].dis &gt;= n) &#123;</span><br><span class="line">res[i] = <span class="string">'a'</span> + j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; acam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">size_t</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; acam.n &gt;&gt; m;</span><br><span class="line">acam.init();</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">acam.insert(str.data(), str.size());</span><br><span class="line">&#125;</span><br><span class="line">acam.build_fail();</span><br><span class="line"><span class="keyword">if</span> (!acam.dfs1()) &#123;</span><br><span class="line">assert(acam.dfs2() &gt; acam.n);</span><br><span class="line">acam.route();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; acam.res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-赛尔逵传说"><a href="#C-赛尔逵传说" class="headerlink" title="C. 赛尔逵传说"></a>C. 赛尔逵传说</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>打怪兽。怪兽血量为$~d~$，攻击力为$~x~$，自己攻击力为$~k~$。同时可以嗑最多$~c~$次$~\text{buff}~$，使得下一次攻击力增加$~k~$，随后失效。怪物轮流上，自己先攻击，问最少损失的血量。<br>数据范围$~1\leq n\leq10^5,~1\leq k,c\leq10^6,~1\leq d,x\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>在不考虑$~\text{buff}~$的条件下，对付每个怪兽需要受到的攻击次数为$~\lfloor\frac{d-1}{k}\rfloor~$，而每层$~\text{buff}~$可以使得该次数减$~1~$。于是对于怪兽的攻击力$~x~$排序后模拟即可，总时间复杂度为$~O(n\log n + c)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> n, k, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; c;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;&gt; monster(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; m : monster) &#123;</span><br><span class="line"><span class="keyword">size_t</span> d, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d &gt;&gt; x;</span><br><span class="line">m = pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;(x, (d - <span class="number">1</span>) / k);</span><br><span class="line">&#125;</span><br><span class="line">sort(monster.begin(), monster.end());</span><br><span class="line">reverse(monster.begin(), monster.end());</span><br><span class="line"><span class="keyword">uint64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : monster) &#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = min(c, m.second);</span><br><span class="line">c -= cur;</span><br><span class="line">res += m.first * <span class="keyword">uint64_t</span>(m.second - cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-碟中谍"><a href="#D-碟中谍" class="headerlink" title="D. 碟中谍"></a>D. 碟中谍</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个通道，上下侧为$~y=w~$和$~y=0~$，左右侧为$~x=+\infty~$和$~x=-\infty~$。同时平面上有$~n~$个圆形障碍物，坐标为$~(x,y)~$，半径为$~r~$。自己也是圆形，问最大的半径使得可以从左边移动至右边。<br>数据范围$~1\leq T\leq100,~1\leq 2\leq10^5,~0\leq n\leq10^3,~-10^5\leq x\leq10^5,~0\leq y\leq w,~1\leq r\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>假设当前自己的半径为$~R~$。则可以把上下侧改为$~y=w-R~$和$~y=R~$，每个圆的半径都增加$~R~$。那么此时能否通过等价于是否存在一条无半径路径穿越这个通道，等价于这些圆是否将上下侧连通。那么本题可以转化为最短路问题，路径的长度定义为路径上边的长度的最大值，边的长度定义为两个圆的距离。用$~\text{Dijstra}~$算法，总时间复杂度为$~O(Tn^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span> <span class="keyword">double</span> x, y, r; &#125; circle[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Circle&amp; c1, <span class="keyword">const</span> Circle&amp; c2)</span> </span>&#123; <span class="keyword">return</span> max(<span class="number">0.0</span>, hypot(c1.x - c2.x, c1.y - c2.y) - c1.r - c2.r); &#125;</span><br><span class="line"><span class="keyword">double</span> cost[maxn][maxn], res[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%u"</span>, &amp;w, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;circle[i].x, &amp;circle[i].y, &amp;circle[i].r);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != n; ++j) cost[i][j] = dis(circle[i], circle[j]);</span><br><span class="line">cost[n + <span class="number">1</span>][n + <span class="number">1</span>] = cost[n][n] = <span class="number">0</span>;</span><br><span class="line">cost[n + <span class="number">1</span>][n] = cost[n][n + <span class="number">1</span>] = w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">cost[n + <span class="number">1</span>][i] = cost[i][n + <span class="number">1</span>] = max(<span class="number">0.0</span>, circle[i].y - circle[i].r);</span><br><span class="line">cost[n][i] = cost[i][n] = max(<span class="number">0.0</span>, w - circle[i].y - circle[i].r);</span><br><span class="line">&#125;</span><br><span class="line">n += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) res[i] = inf;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, n);</span><br><span class="line">res[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> next = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (next != n - <span class="number">2U</span>) &#123;</span><br><span class="line">vis[next] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">double</span> cur = inf;</span><br><span class="line"><span class="keyword">size_t</span> last = next;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (!vis[i]) <span class="keyword">if</span> ((res[i] = min(res[i], max(res[last], cost[last][i]))) &lt; cur) next = i, cur = res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, res[n - <span class="number">2</span>] / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-只有一端开口的瓶子"><a href="#E-只有一端开口的瓶子" class="headerlink" title="E. 只有一端开口的瓶子"></a>E. 只有一端开口的瓶子</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>现在有一个$~1,2,\dots,n~$的全排列构成的序列和$~k~$个空的栈。可以有如下三种操作：把当前序列的头部放入第$~p~$个栈的顶部；把第$~p~$个栈的顶部放入新序列的尾部；把第$~p~$个栈的顶部放入第$~q~$个栈的顶部。最终要使得新序列升序，即为$~1,2,\dots,n~$。先给定$~T~$组全排列，问这些全排列分别至少需要准备多少个栈才能完成升序操作。<br>数据范围$~1\leq T\leq100,~1\leq n\leq10^5~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现答案不会大于$~2~$，那么只需要判断答案是否为$~1~$即可。线性栈模拟，总时间复杂度为$~O(Tn)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">size_t</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">size_t</span>&gt; sta;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">sta.emplace(p);</span><br><span class="line"><span class="keyword">while</span> (!sta.empty() &amp;&amp; sta.top() == next) &#123;</span><br><span class="line">sta.pop();</span><br><span class="line">++next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (sta.empty() ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-风王之瞳"><a href="#F-风王之瞳" class="headerlink" title="F. 风王之瞳"></a>F. 风王之瞳</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算长宽为$~n,m~$的正方形网格图有多少个格点正方形。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不妨设$~n\leq m~$。先考虑对于边长为$~k\leq n~$的正方形，顶点都落在该正方形上的格点正方形有$~k~$个。而这样的正方形有$~(n-k+1)(m-k+1)~$个。于是答案为</p><script type="math/tex; mode=display">\sum_{k=1}^{n}k(n-k+1)(m-k+1)=\frac{n(n+1)(n+2)(2m-n+1)}{12}</script><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (n &gt; m) swap(n, m);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n * (n + <span class="number">1</span>) * (n + <span class="number">2</span>) / <span class="number">6</span> * (<span class="number">2</span> * m - n + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-神圣的-F2-连接着我们"><a href="#G-神圣的-F2-连接着我们" class="headerlink" title="G. 神圣的 F2 连接着我们"></a>G. 神圣的 F2 连接着我们</h3><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个二分图，两边的编号都是$~1,2,\dots,n~$，左边有$~p~$个关键点$~x_1,x_2,\dots,x_p~$，右边有$~q~$个关键点$~y_1,y_2,\dots,y_q~$。还有$~m~$组双向边，权值为$~w~$，将左边编号在$~[a,b]~$的点于右边编号在$~[c,d]~$的点相连，注意同一侧的点之间是没有边的。需要所有左边的关键点$~x~$到右边最近的$~y~$的距离，或者无法连通。<br>数据范围$~1\leq n,m,p,q\leq10^5,~1\leq a\leq b\leq n,~1\leq c\leq d\leq n,~1\leq w\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然是多源最短路问题，关键在于如何建图，如果暴力建图那么边数是$~O(nm)~$的。对于每侧的点都建立两棵线段树：在线段树一上，所有的父子对都连一条父亲指向儿子的权值为$~0~$的边；在线段树二上，所有的父子对都连一条儿子指向父亲的权值为$~0~$的边；在两颗线段树对应的点对上，连一条线段树一上节点指向线段树二上节点的权值为$~0~$的边。对于题目给出的边，将区间$~[a,b]~$和$~[c,d]~$在两边的线段树上分解，再给图增加两个中间点代表从左到右和从右到左的边。连接的边有：在左二树分解到的节点指向一号中间点的权值为$~w~$的边；一号中间点指向在右一树分解到的节点的权值为$~0~$的边；在右二树上分解到的节点指向二号中间点的权值为$~w~$的边；二号中间点指向在左一树分解到的节点的权值为$~0~$的边。然后跑堆优化的$~\text{Dijstra}~$多源最短路，只要在最开始将所有的$~y~$入堆，剩下的步骤和单源最短路一致。总时间复杂度为$~O(m\log^2n)~$，空间复杂度为$~O(n+m\log n)~$。注意本题会卡时间常数和<strong>空间常数</strong>。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson, side</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson, side</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size_t uint32_t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> pos[<span class="number">2</span>][maxn], graph_size, seg[<span class="number">2</span>][maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">uint64_t</span> dis; <span class="keyword">size_t</span> side, index; &#125; node[maxn * <span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;&gt; dir[maxn * <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">size_t</span> begin, <span class="keyword">size_t</span> end, <span class="keyword">size_t</span> index, <span class="keyword">size_t</span> side)</span> </span>&#123;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].side = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].side = side;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].index = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].index = index;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].dis = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].dis = <span class="number">-1</span>;</span><br><span class="line">dir[graph_size &lt;&lt; <span class="number">1</span>].emplace_back(graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">seg[side][index] = graph_size++;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1U</span> == end) &#123;</span><br><span class="line">pos[side][end] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(LEFT);</span><br><span class="line">build(RIGHT);</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span>].emplace_back(seg[side][lson] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span>].emplace_back(seg[side][rson] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][lson] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][rson] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">size_t</span> left, <span class="keyword">size_t</span> right, <span class="keyword">size_t</span> begin, <span class="keyword">size_t</span> end, <span class="keyword">size_t</span> index, <span class="keyword">size_t</span> side, <span class="keyword">size_t</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= end || right &lt;= begin) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) &#123;</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(graph_size &lt;&lt; <span class="number">1</span> ^ side, w);</span><br><span class="line">dir[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span> ^ side].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">link(SEG, LEFT, w);</span><br><span class="line">link(SEG, RIGHT, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">size_t</span> n, m, p, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p &gt;&gt; q;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> a, b, c, d, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; w;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].side = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].side = <span class="number">-1</span>;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].index = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].index = <span class="number">-1</span>;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].dis = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].dis = <span class="number">-1</span>;</span><br><span class="line">link(--a, b, <span class="number">0</span>, n, <span class="number">1</span>, <span class="number">0</span>, w);</span><br><span class="line">link(--c, d, <span class="number">0</span>, n, <span class="number">1</span>, <span class="number">1</span>, w);</span><br><span class="line">++graph_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; x(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; xx : x) <span class="built_in">cin</span> &gt;&gt; xx;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">que.emplace(<span class="keyword">uint64_t</span>(zero), seg[<span class="number">1</span>][pos[<span class="number">1</span>][y]] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> dis = que.top().first;</span><br><span class="line"><span class="keyword">size_t</span> cur = que.top().second;</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (~node[cur].dis) <span class="keyword">continue</span>;</span><br><span class="line">node[cur].dis = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : dir[cur]) <span class="keyword">if</span> (!~node[next.first].dis) que.emplace(dis + next.second, next.first);</span><br><span class="line">dir[cur].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> res = zero;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> xx : x) res = max(res, node[seg[<span class="number">0</span>][pos[<span class="number">0</span>][xx]] &lt;&lt; <span class="number">1</span>].dis);</span><br><span class="line"><span class="keyword">if</span> (~res) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"boring game"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-目标是成为数论大师"><a href="#H-目标是成为数论大师" class="headerlink" title="H. 目标是成为数论大师"></a>H. 目标是成为数论大师</h3><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问$~f(x)=\sqrt{ax}+b~$的点，保证存在且为整数。输出格式为升序不重。<br>数据范围$~1\leq T\leq100,~-10^3\leq a,b\leq10^3~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>解二次方程，注意细节。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">int</span> x) &#123; <span class="keyword">if</span> ((<span class="keyword">int</span>)round(<span class="built_in">sqrt</span>(a * x)) + b == x) res.emplace_back(x); &#125;;</span><br><span class="line"><span class="keyword">int</span> delta = round(<span class="built_in">sqrt</span>(a * a + <span class="number">4</span> * a * b));</span><br><span class="line">add((a + <span class="number">2</span> * b - delta) / <span class="number">2</span>);</span><br><span class="line">add((a + <span class="number">2</span> * b + delta) / <span class="number">2</span>);</span><br><span class="line">sort(res.begin(), res.end());</span><br><span class="line">res.resize(unique(res.begin(), res.end()) - res.begin());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != res.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-出给-paul-lu-的数数题"><a href="#I-出给-paul-lu-的数数题" class="headerlink" title="I. 出给 paul-lu 的数数题"></a>I. 出给 paul-lu 的数数题</h3><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~n\times n~$的表上每个位置的值只能取$~[1,k]~$。定义一个位置为$~\text{bi}~$点当且仅当它严格大于它所处的行与列的所有其它的值。记$~B_i\in[0,n^2]~$为恰好有$~i~$个$~\text{bi}~$点的方案数。计算$~\sum_{i=0}^{n^2}{i^2\cdot B_i}~$。<br>数据范围$~1\leq T\leq20,~1\leq n,k\leq200~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对任意方案$~A~$，用$~f(A)~$表示该方案下的$~\text{bi}~$点的数量，则有</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_Af^2(A)</script><p>用$~S(A)~$表示该方案下的所有$~\text{bi}~$点的集合，则</p><script type="math/tex; mode=display">f(A)=\sum_{p\in S(A)}1</script><p>于是</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_A\sum_{p_1\in S(A)}\sum_{p_2\in S(A)}1</script><p>对于两点$~p_1,p_2~$（可重），用$~g(p_1,p_2)~$表示它们均为$~\text{bi}~$的方案数，则可以交换求和顺序，得到</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_{p_1}\sum_{p_2}g(p_1,p_2)</script><p>当$~p_1,p_2~$不重合但同行或者同列时，显然有$~g=0~$。不难发现$~g~$其实只有$~2~$种非平凡取值，即$~p_1,p_2~$重合时和$~p_1,p_2~$不重合时。那么令$~g_0=g((1,1),(1,1)),~g_1=g((1,1),(2,2))~$，则有</p><script type="math/tex; mode=display">g_0=k^{(n-1)^2}\sum_{i=0}^{k-1}i^{2(n-1)}                                           \\g_1=k^{(n-2)^2}\sum_{i=0}^{k-1}\sum_{j=0}^{k-1}\min(i,j)^{2(n-1)}\max(i,j)^{2(n-2)} \\\sum_{i=0}^{n^2}{i^2\cdot B_i}=n^2g_0+n^2(n-1)^2g_1                                 \\</script><p>剩下的计算步骤是十分简单的。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> sub = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> sub(a, mod - b); &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> fpow = [&amp;] (<span class="keyword">uint64_t</span> a, <span class="keyword">uint64_t</span> n) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">uint64_t</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">uint64_t</span> i = <span class="number">0</span>; i != k; ++i) cal1 = add(cal1, fpow(i, (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>));</span><br><span class="line">cal1 = mul(cal1, fpow(k, (n - <span class="number">1</span>) * (n - <span class="number">1</span>)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">uint64_t</span> i = <span class="number">0</span>; i != k; ++i) <span class="keyword">for</span> (<span class="keyword">uint64_t</span> j = <span class="number">0</span>; j != k; ++j)</span><br><span class="line">cal2 = add(cal2, mul(fpow(min(i, j), (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>), fpow(max(i, j), (n - <span class="number">2</span>) &lt;&lt; <span class="number">1</span>)));</span><br><span class="line">cal2 = mul(mul(cal2, (n - <span class="number">1</span>) * (n - <span class="number">1</span>)), fpow(k, (n - <span class="number">2</span>) * (n - <span class="number">2</span>)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(add(cal1, cal2), n * n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-金色传说"><a href="#J-金色传说" class="headerlink" title="J. 金色传说"></a>J. 金色传说</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个长度为$~n~$的字符串表达式合法，当且仅当它仅由$~0,1,\dots,9~$，以及$~+~$或$~-~$组成，且首尾不能是运算符，运算符不相邻（注意允许数字有前导零）。问所有长度为$~n~$的合法字符串表达式的值之和。<br>数据范围$~1\leq T\leq100,~1\leq n\leq5\times10^5~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设答案序列为$~{f_n}~$，前几项$~f_0=0,~f_1=45,~f_2=4950,\dots~$，其生成多项式为</p><script type="math/tex; mode=display">F(x)=\sum_{n=0}^{\infty}f_nx^n</script><p>准备工作先考虑序列$~{g_n:g_n=10^n}~$，易得其生成多项式为</p><script type="math/tex; mode=display">G(x)=~\sum_{n=0}^{\infty}10^nx^n=\frac{1}{1-10x}</script><p>考虑仅有数字组成的字符串，对应的答案序列为$~{h_n:h_n=\frac{10^n(10^n-1)}{2}}~$，其生成多项式可以推出为</p><script type="math/tex; mode=display">H(x)=\sum_{n=0}^{\infty}h_nx^n=\frac{1}{2}\left(\frac{1}{1-100x}-\frac{1}{1-10x}\right)</script><p>计算$~f_n~$。若没有运算符，则对$~f_n~$为$~h_n~$。若有运算符，考虑最后一个数字的长度$~k~$，满足$~1\leq k\leq n-2~$。此时最后一个数字有$~g_k~$种取法，运算符有$~2~$种取法。注意到此时由于正负号相消，最后一个数字对于$~f_n~$的贡献为$~0~$，于是剩下的贡献为$~2g_kf_{n-1-k}~$。即</p><script type="math/tex; mode=display">\begin{aligned}f_n &=h_n+2\sum_{k=1}^{n-2}g_kf_{n-1-k}             \\    &=h_n-2f_{n-1-k}+2\sum_{k=0}^{n-1}g_kf_{n-1-k}  \\\end{aligned}</script><p>这是一个卷积式，它对于$n\geq1~$均满足。于是对于$~n=1,2,\dots~$，等式两边乘以$~x^{n-1}~$后累加，可以得出生成多项式的等式</p><script type="math/tex; mode=display">\frac{F(x)-F(0)}{x}=\frac{H(x)-H(0)}{x}-2F(x)+2G(x)F(x)</script><p>可以算出</p><script type="math/tex; mode=display">F(x)=\frac{1}{1-110x+980x^2+2000x^3}</script><p>于是对于$~n\geq3~$，有线性递推式</p><script type="math/tex; mode=display">f_n=110f_{n-1}-980f_{n-2}-2000f_{n-3}</script><p>预处理或者矩阵快速幂均可通过此题，时间复杂度分别为$~O(n+T)~$和$~O(T\log n)~$。</p><h3 id="代码（-O-T-log-n-）"><a href="#代码（-O-T-log-n-）" class="headerlink" title="代码（$~O(T\log n)~$）"></a><strong>代码（$~O(T\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mat_mul = [&amp;] (<span class="keyword">size_t</span> A[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">size_t</span> B[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">size_t</span> C[<span class="number">3</span>][<span class="number">3</span>]) &#123; <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j) <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k != <span class="number">3</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j])); &#125;;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, res[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125; &#125;, bas[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">110</span>, mod - <span class="number">980</span>, mod - <span class="number">2000</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125; &#125;, tmp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">cin</span> &gt;&gt; n; n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">mat_mul(res, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(res, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">mat_mul(bas, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(bas, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(add(mul(res[<span class="number">2</span>][<span class="number">0</span>], <span class="number">110</span>), res[<span class="number">2</span>][<span class="number">1</span>]), <span class="number">45</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-多项式求导"><a href="#K-多项式求导" class="headerlink" title="K. 多项式求导"></a>K. 多项式求导</h2><h3 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多项式求导。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; ~i; --i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a_(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) a_[i - <span class="number">1</span>] = mul(a[i], i);</span><br><span class="line">a = a_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-旅行的意义"><a href="#L-旅行的意义" class="headerlink" title="L. 旅行的意义"></a>L. 旅行的意义</h2><h3 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>地图是个$~\text{DAG}~$，起点为$~1~$。每到一个新的点会停留$~1~$天，然后等概率的选择再留$~1~$天或者去下一个可以到的点，路程花费$~1~$天。至多停留$~2~$天，然后必须等概率的选择下一个可以到的点，如果不能继续则停止。问总天数的期望。<br>数据范围$~1\leq T\leq10,~1\leq n\leq10^5,~0\leq m\leq10^5~$</p><h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸的$~\text{DAG}~$上概率$~\text{DP}~$，代码使用的拓扑排序代替记忆化$~\text{DFS}~$。<strong>注意快读！</strong></p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inv(<span class="number">100002</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100001</span>; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; to(n), from(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; deg(n, <span class="number">0</span>), topo;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">--u;</span><br><span class="line">--v;</span><br><span class="line">to[u].emplace_back(v);</span><br><span class="line">from[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> u = <span class="number">0</span>; u != n; ++u) <span class="keyword">if</span> (!(deg[u] = to[u].size())) &#123;</span><br><span class="line">res[u] = <span class="number">2</span>;</span><br><span class="line">topo.emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != topo.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; u = topo[i];</span><br><span class="line"><span class="keyword">if</span> (!to[u].empty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : to[u]) res[u] = add(res[u], res[v]);</span><br><span class="line">res[u] = mul(res[u], inv[to[u].size()]);</span><br><span class="line">res[u] = add(res[u], inv[to[u].size() + <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : from[u]) <span class="keyword">if</span> (!--deg[v]) topo.emplace_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 542 [Alex Lopashev Thanks-Round] (Div. 2)</title>
      <link href="/2019/04/18/Codeforces%20Round%20542%20%5BAlex%20Lopashev%20Thanks-Round%5D%20(Div.%202)/"/>
      <url>/2019/04/18/Codeforces%20Round%20542%20%5BAlex%20Lopashev%20Thanks-Round%5D%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1130" target="_blank" rel="noopener">Codeforces Round #542 [Alex Lopashev Thanks-Round] (Div. 2)</a></p><h2 id="A-Be-Positive"><a href="#A-Be-Positive" class="headerlink" title="A. Be Positive"></a>A. Be Positive</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a, neg = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span>) ++neg;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>) ++pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (neg * <span class="number">2</span> &gt;= n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pos * <span class="number">2</span> &gt;= n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Two-Cakes"><a href="#B-Two-Cakes" class="headerlink" title="B. Two Cakes"></a>B. Two Cakes</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~2n~$的序列，数字$~1,2,\dots,n~$各出现$~2~$次。有$~2~$人初始再序列的最左边，他们分别要依次拿到$~1,2,\dots,n~$，且每个数字只能被拿一次，所以结束时刚好拿完。问这$~2~$人移动距离之和的最小值。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。见代码。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pos(n + <span class="number">1</span>);</span><br><span class="line">pos.front() = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n * <span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">pos[a].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">res += min(<span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">0</span>] - pos[i][<span class="number">0</span>]) + <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">1</span>] - pos[i][<span class="number">1</span>]), <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">0</span>] - pos[i][<span class="number">1</span>]) + <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">1</span>] - pos[i][<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Connect"><a href="#C-Connect" class="headerlink" title="C. Connect"></a>C. Connect</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个地图由土和水组成，起点终点均在土上，只能在土上移动。可以至多建$~1~$个隧道连接$~2~$个土，欧式距离的平方。问从起点到终点的最小花费。<br>数据范围$~1\leq n\leq50~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>爆搜$~\text{BFS}~$或者$~\text{DFS}~$得到起点和终点的联通块，然后暴力枚举隧道的起点和终点即可。总时间复杂度为$~O(n^4)~$。<br>注意到在爆搜过程中，可以不枚举终点纵坐标$~y_2~$，只需要使得$~(y-y_1 )^2~$最小，这一步可以预处理，所以总时间复杂度可以降为$~O(n^3)~$。</p><h3 id="代码（-O-n-4-）"><a href="#代码（-O-n-4-）" class="headerlink" title="代码（$~O(n^4)~$）"></a><strong>代码（$~O(n^4)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> cell[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="built_in">memset</span>(cell, <span class="string">'1'</span>, <span class="keyword">sizeof</span> (cell));</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;, dis[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dis));</span><br><span class="line"><span class="keyword">int</span> n, r1, c1, r2, c2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r1 &gt;&gt; c1 &gt;&gt; r2 &gt;&gt; c2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; cell[i][j];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line"><span class="keyword">auto</span> push = [&amp;] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y) &#123; cell[x][y] = <span class="string">'1'</span>; que.emplace_back(x, y); &#125;;</span><br><span class="line">push(r2, c2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) dis[X][y] = min(dis[X][y], (Y - y) * (Y - y));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">que.clear();</span><br><span class="line">push(r1, c1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) res = min(res, (X - x) * (X - x) + dis[x][Y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-3-）"><a href="#代码（-O-n-3-）" class="headerlink" title="代码（$~O(n^3)~$）"></a><strong>代码（$~O(n^3)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> cell[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;, dis[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cell, <span class="string">'1'</span>, <span class="keyword">sizeof</span> (cell));</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dis));</span><br><span class="line"><span class="keyword">int</span> n, r1, c1, r2, c2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r1 &gt;&gt; c1 &gt;&gt; r2 &gt;&gt; c2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; cell[i][j];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line"><span class="keyword">auto</span> push = [&amp;] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y) &#123; cell[x][y] = <span class="string">'1'</span>; que.emplace_back(x, y); &#125;;</span><br><span class="line">push(r2, c2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) dis[X][y] = min(dis[X][y], (Y - y) * (Y - y));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">que.clear();</span><br><span class="line">push(r1, c1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) res = min(res, (X - x) * (X - x) + dis[x][Y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D1-Toy-Train-Simplified"><a href="#D1-Toy-Train-Simplified" class="headerlink" title="D1. Toy Train (Simplified)"></a>D1. Toy Train (Simplified)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个车站围成环，以及$~m~$颗糖果的初始位置和目标位置。火车每次到站至多只能装$~1~$颗糖果，但是可以卸下若干糖果。问分别以每个站为起点，要将所有糖果送到目标地点，火车的最少行驶距离。<br>数据范围$~2\leq n\leq100,~1\leq m\leq200~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑第$~i~$站，一共有$~x~$颗糖果以它为起点，且最近的终点为$~y~$，这一步可以在$~O(m)~$内处理完。那么火车第$~1~$次到达该站时，至少还要行驶$~(x-1)\cdot n+y~$。而每次到达一个新站，取该站目标地点最远的那颗糖果这样就能得到最小距离的方案。按题意枚举起点以及起点到所有站的距离，总时间复杂度为$~O(n^2+m)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis(n + <span class="number">1</span>, <span class="number">0</span>), cnt(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">++cnt[a];</span><br><span class="line">dis[a] = min(dis[a], a &gt; b ? b - a : b - a - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span> (cnt[j])</span><br><span class="line">res = max(res, (i &gt; j ? j - i + n : j - i) + cnt[j] * n + dis[j]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D2-Toy-Train"><a href="#D2-Toy-Train" class="headerlink" title="D2. Toy Train"></a>D2. Toy Train</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>上一题的基础上增加数据范围$~2\leq n\leq5000,~1\leq m\leq20000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>上一题的$~O(n^2+m)~$做法依然能过。但是注意到在计算第$~1~$个位置的答案时，已经处理的大部分区间的最小值。那么只需要记录前缀$~\min~$和后缀$~\min~$，这样每个位置的答案可以在$~O(1)~$内求出，总时间复杂度为$~O(n+m)~$。</p><h3 id="代码（-O-n-m-）"><a href="#代码（-O-n-m-）" class="headerlink" title="代码（$~O(n+m)~$）"></a><strong>代码（$~O(n+m)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis(n + <span class="number">1</span>, <span class="number">0</span>), cnt(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">++cnt[a];</span><br><span class="line">dis[a] = min(dis[a], a &gt; b ? b - a : b - a - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(n, -n), suf(n + <span class="number">2</span>, -n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line">pre[i] = pre[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[i]) pre[i] = max(pre[i], cnt[i] * n + dis[i] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">suf[i] = suf[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[i]) suf[i] = max(suf[i], cnt[i] * n + dis[i] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(pre[i - <span class="number">1</span>] + n - i, suf[i] - i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Wrong-Answer"><a href="#E-Wrong-Answer" class="headerlink" title="E. Wrong Answer"></a>E. Wrong Answer</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要计算一个序列的</p><script type="math/tex; mode=display">\max_{0\leq l\leq r< n}{(r-l+1)\sum_{i=l}^{r}{a_i}}</script><p>现给出一个假算法的伪代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function find_answer(n, a)</span><br><span class="line"># Assumes n is an integer between 1 and 2000, inclusive</span><br><span class="line"># Assumes a is a list containing n integers: a[0], a[1], ..., a[n-1]</span><br><span class="line">res = 0</span><br><span class="line">cur = 0</span><br><span class="line">k = -1</span><br><span class="line">for i = 0 to i = n-1</span><br><span class="line">cur = cur + a[i]</span><br><span class="line">if cur &lt; 0</span><br><span class="line">cur = 0</span><br><span class="line">k = i</span><br><span class="line">res = max(res, (i-k)*cur)</span><br><span class="line">return res</span><br></pre></td></tr></table></figure></p><p>输出一个序列$~a_0,a_1,\dots,a_{n-1}~$满足正确算法得到的答案比假算法得到的答案恰好大$~k~$。<br>数据范围$~1\leq k\leq10^9,~1\leq n\leq2000,~{\mid a_i\mid}\leq10^6~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不妨令$~a_0=0,~a_i\geq 0,~\forall~i&gt;0,~S=\sum_{i&gt;0} a_i&gt;1~$。于是有$~k=n(S-1)-(n-1)S=S-n~$。令$~n=2000~$，于是$~S=k+2000~$，构造方法十分简单。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxa = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">k += maxn;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; maxn &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt; maxa) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; maxa, k -= maxa;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; k, k = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 541 (Div. 2)</title>
      <link href="/2019/03/12/Codeforces%20Round%20541%20(Div.%202)/"/>
      <url>/2019/03/12/Codeforces%20Round%20541%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1131" target="_blank" rel="noopener">Codeforces Round #541 (Div. 2)</a></p><h2 id="A-Sea-Battle"><a href="#A-Sea-Battle" class="headerlink" title="A. Sea Battle"></a>A. Sea Battle</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w1, h1, w2, h2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w1 &gt;&gt; h1 &gt;&gt; w2 &gt;&gt; h2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (w1 + h1 + h2 + <span class="number">2</span> &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Draw"><a href="#B-Draw" class="headerlink" title="B. Draw!"></a>B. Draw!</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">res += max(<span class="number">0</span>, min(a, b) - last);</span><br><span class="line">last = max(a, b) - (a != b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Birthday"><a href="#C-Birthday" class="headerlink" title="C. Birthday"></a>C. Birthday</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数子，要求排成一个环，使得相邻的差的绝对值之和最小。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。升序后奇项排一起偶项排一起。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n &amp; <span class="number">1</span> ? n - <span class="number">2</span> : n - <span class="number">1</span>; i != <span class="number">1</span>; i -= <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Gourmet-choice"><a href="#D-Gourmet-choice" class="headerlink" title="D. Gourmet choice"></a>D. Gourmet choice</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>由$~n+m~$个菜品，给出一个$~n\times m~$的矩阵表示相应的比较关系。输出根据这个矩阵的打分方式，满足矩阵的比较关系，且不同的分数数量最小。有可能输出不存在。<br>数据范围$~1\leq n,m\leq1000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>拓扑排序。建图时需要注意如果$~a&gt;b~$且$~b=c~$，则需要增加$~a&gt;c~$。可以用$~\text{DSU}~$并查集和$~\text{bitset}~$来维护相等的联通块，这样建图的时间复杂度上限为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}})~$（不写按秩合并）。应该还有更优的建图方式，但上述做法能过，总时间复杂度为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}}+(n+m)^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, deg[maxn], fa[maxn], res[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; mat[maxn], adj[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; toward[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">mat[fa[y] = x] |= mat[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) adj[i] |= mat[find(j)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) ++deg[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) <span class="keyword">if</span> (!deg[i]) now.push_back(i);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!now.empty()) &#123;</span><br><span class="line">cnt += now.size();</span><br><span class="line">topo.push_back(now);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : now) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j)</span><br><span class="line"><span class="keyword">if</span> (adj[i][j]) <span class="keyword">if</span> (!--deg[j]) tmp.push_back(j);</span><br><span class="line">now = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt != n + m) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) mat[fa[i] = i].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j != n + m; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&lt;'</span>) adj[j].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&gt;'</span>) adj[i].<span class="built_in">set</span>(j);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'='</span>) merge(i, j);</span><br><span class="line">&#125;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; j : topo[i]) res[j] = topo.size() - i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="built_in">cout</span> &lt;&lt; res[i + n] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-String-Multiplication"><a href="#E-String-Multiplication" class="headerlink" title="E. String Multiplication"></a>E. String Multiplication</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于给定字符串$~s=\overline{s_1s_2\dots s_n}~$和$~t=\overline{t_1t_2\dots t_m}~$，定义$~s+t=\overline{s_1s_2\dots s_nt_1t_2\dots t_m}~$和$~s\cdot t=t+s_1+t+s_2+t+\dots+t+s_n+t~$。现给定字符串序列$~p_1,p_2,\dots,p_n~$，问$~(((p_1\cdot p_2)\cdot p3)\cdot\dots)\cdot p_n~$中最长的连续相同子序列长度。<br>数据范围$~\sum{\mid p\mid}\leq100000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现$~\cdot~$运算满足结合律，那么等价于询问$~p_1\cdot(p_2\cdot(\dots\cdot p_n))~$。直接线性模拟即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">strs.push(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">int</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>, res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch1 = now.front(), ch2 = now.back(), last = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++cal1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch2) ++cal2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != last) cnt = <span class="number">0</span>;</span><br><span class="line">res = max(res, ++cnt);</span><br><span class="line">last = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> check = res == (<span class="keyword">int</span>)now.size();</span><br><span class="line"><span class="keyword">while</span> (!strs.empty()) &#123;</span><br><span class="line">now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal1 = tmp1 + (tmp1 + <span class="number">1</span>) * res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal2 = tmp2 + (tmp2 + <span class="number">1</span>) * res;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != ch1) cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> tmp = max(tmp, ++cnt);</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, tmp + (tmp + <span class="number">1</span>) * res);</span><br><span class="line">check = tmp == (<span class="keyword">int</span>)now.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch1 == ch2) &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch2)) res = max(res, cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Asya-And-Kittens"><a href="#F-Asya-And-Kittens" class="headerlink" title="F. Asya And Kittens"></a>F. Asya And Kittens</h2><p>给定正整数$~n~$和$~n-1~$对$~x\not=y~$，满足$~1\leq x,y\leq n~$。需要找到一个全排列，初始每项均属于单独的区间。然后按顺序考虑$~(x,y)~$，$x~$所在的区间必须与$~y~$所在的区间相邻，然后将这两个区间合并，最终整个全排列均在一个区间之内。<br>数据范围$~2\leq n\leq150000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸并查集。不写按秩合并的时间复杂度上限为$~O(n\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150001</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">sons[fa[y] = x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : sons[u]) dfs(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line"><span class="keyword">while</span> (--n) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">merge(x, y);</span><br><span class="line">&#125;</span><br><span class="line">dfs(find(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Most-Dangerous-Shark"><a href="#G-Most-Dangerous-Shark" class="headerlink" title="G. Most Dangerous Shark"></a>G. Most Dangerous Shark</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给出$~m~$个多米诺骨牌的给高度$~a~$和花费$~c~$。问将所有多米诺骨牌推倒的最小总花费。<br>数据范围$~1\leq m\leq10^7,~1\leq a\leq m,~1\leq c\leq100000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用$~left_i~$表示将$~i~$向左推，恰好推倒至$~left_i~$。那么不难发现所有的区间$~I_i=[left_i,i]~$均互相包含或者不交，所以可以通过栈结构来线性求出。同理用$~right_i~$表示将$~i~$向右推，恰好推倒至$~right_i~$。接下来动态规划，用$~dp_i~$表示将前$~i~$个都推倒的最小花费，则有转移式</p><script type="math/tex; mode=display">dp_i=\min\lbrace dp_j+c_i:left_i\leq j< i\rbrace\cup\lbrace dp_{j-1}+c_j:j< i\leq right_j\rbrace</script><p>整个过程均可用栈维护，总时间复杂度为$~O(m)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; blocks(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(m + <span class="number">1</span>), left(m + <span class="number">1</span>), right(m + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; c(m + <span class="number">1</span>), dp(m + <span class="number">1</span>), minn(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; block : blocks) &#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">block.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q, index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> id, mul;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id &gt;&gt; mul;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : blocks[id - <span class="number">1</span>]) &#123;</span><br><span class="line">++index;</span><br><span class="line">a[index] = domi.first;</span><br><span class="line">c[index] = domi.second * mul;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (right[i] = min(m, i + a[i] - <span class="number">1</span>); !sta1.empty() &amp;&amp; right[i] &gt;= sta1.top(); sta1.pop())</span><br><span class="line">right[i] = max(right[i], right[sta1.top()]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!sta1.empty()) sta1.pop();</span><br><span class="line">dp.front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; sta2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">minn[i] = dp[left[i] = max(<span class="number">0</span>, i - a[i])];</span><br><span class="line"><span class="keyword">for</span> (left[i] = max(<span class="number">0</span>, i - a[i]); !sta1.empty() &amp;&amp; left[i] &lt; sta1.top(); sta1.pop()) &#123;</span><br><span class="line">left[i] = min(left[i], left[sta1.top()]);</span><br><span class="line">minn[i] = min(minn[i], minn[sta1.top()]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i] = minn[i] + c[i];</span><br><span class="line"><span class="keyword">while</span> (!sta2.empty() &amp;&amp; i &gt; right[sta2.top().first]) sta2.pop();</span><br><span class="line"><span class="keyword">if</span> (sta2.empty()) &#123;</span><br><span class="line">sta2.push(make_pair(right[i], dp[i - <span class="number">1</span>] + c[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = min(dp[i], sta2.top().second);</span><br><span class="line">sta2.push(make_pair(right[i], min(sta2.top().second, dp[i - <span class="number">1</span>] + c[i])));</span><br><span class="line">&#125;</span><br><span class="line">minn[i] = min(minn[i], dp[i]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest (TBC)</title>
      <link href="/2019/03/10/2014-2015%20ACM-ICPC,%20NEERC,%20Northern%20Subregional%20Contest%20(TBC)/"/>
      <url>/2019/03/10/2014-2015%20ACM-ICPC,%20NEERC,%20Northern%20Subregional%20Contest%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/100531" target="_blank" rel="noopener">2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest</a></p><h2 id="A-Alarm-Clock"><a href="#A-Alarm-Clock" class="headerlink" title="A. Alarm Clock"></a>A. Alarm Clock</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"alarm.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"alarm.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">24</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">60</span>; ++j)</span><br><span class="line">res[d[i % <span class="number">10</span>] + d[i / <span class="number">10</span>] + d[j % <span class="number">10</span>] + d[j / <span class="number">10</span>]] = make_pair(i, j);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">auto</span> ite = res.find(n);</span><br><span class="line"><span class="keyword">if</span> (ite == res.end()) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>, ite-&gt;second.first, ite-&gt;second.second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Buffcraft"><a href="#B-Buffcraft" class="headerlink" title="B. Buffcraft"></a>B. Buffcraft</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。有坑。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"buffcraft.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"buffcraft.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> b, k, cd, cp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; k &gt;&gt; cd &gt;&gt; cp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; d(cd + <span class="number">1</span>), p(cp + <span class="number">1</span>);</span><br><span class="line">d.front() = p.front() = make_pair(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) <span class="built_in">cin</span> &gt;&gt; d[i].first, d[i].second = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) <span class="built_in">cin</span> &gt;&gt; p[i].first, p[i].second = i;</span><br><span class="line">sort(d.begin() + <span class="number">1</span>, d.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line">sort(p.begin() + <span class="number">1</span>, p.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; dd(cd + <span class="number">1</span>, <span class="number">0</span>), pp(cp + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) dd[i] = dd[i - <span class="number">1</span>] + d[i].first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) pp[i] = pp[i - <span class="number">1</span>] + p[i].first;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= min(k, cd); ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = (b + dd[i]) * (pp[min(cp, k - i)] + <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (cal &lt; temp) &#123;</span><br><span class="line">cal = temp;</span><br><span class="line">n = i;</span><br><span class="line">m = min(cp, k - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">cout</span> &lt;&lt; d[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (n) <span class="built_in">cout</span> &lt;&lt; d[n].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) <span class="built_in">cout</span> &lt;&lt; p[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (m) <span class="built_in">cout</span> &lt;&lt; p[m].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Digits"><a href="#D-Digits" class="headerlink" title="D. Digits"></a>D. Digits</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出最小的$~n~$个不同正整数的和，满足这些数的各位数之和相等。<br>数据范围$~1\leq n\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到数据范围较小，考虑爆搜。爆搜$~10^7~$以内的正整数更新数据范围内对应的答案即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"digits.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"digits.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res(<span class="number">5001</span>, <span class="number">0x3f3f3f3f3f3f3f3f</span>), cal(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j /= <span class="number">10</span>) sum += j % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (++cnt[sum] &lt;= <span class="number">5000</span>) res[cnt[sum]] = min(res[cnt[sum]], cal[sum] += i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Grave"><a href="#G-Grave" class="headerlink" title="G. Grave"></a>G. Grave</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"grave.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"grave.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">4</span>], y[<span class="number">4</span>], w, h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">2</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">3</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">2</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">3</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Hiking-in-the-Hills"><a href="#H-Hiking-in-the-Hills" class="headerlink" title="H. Hiking in the Hills"></a>H. Hiking in the Hills</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个三维空间下的地形图，表面由$~n~$个三角形拼接而成。然后给定平面上的起点和终点，输出一条路径，使得路径的海拔的最大值最小。<br>数据范围$~2\leq n\leq2000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对偶图的单源最短路问题。将三角形视为点，任意相接触的两三角形的公共边或公共点是为边，那么边权则是公共部分的最低海拔。暴力建图即可，时间复杂度为$~O(n^2)~$，单元最短路用$~\text{Dijstra}~$算法，是否堆优化均不影响时间复杂度。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">ll x, y, z;</span><br><span class="line">Point() &#123;&#125;</span><br><span class="line">Point(ll xx, ll yy, ll zz): x(xx), y(yy), z(zz) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt;  y &lt;&lt; <span class="string">' '</span> &lt;&lt;  z &lt;&lt; <span class="string">'\n'</span>; &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x &amp;&amp; y == p.y; &#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x - p.x, y - p.y, <span class="number">0</span>); &#125;</span><br><span class="line">ll <span class="keyword">operator</span> ^ (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">lower</span><span class="params">(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2)</span> </span>&#123; <span class="keyword">return</span> p1.z &lt; p2.z ? p1 : p2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triagnle</span> &#123;</span></span><br><span class="line">Point p[<span class="number">3</span>];</span><br><span class="line">Triagnle() &#123;&#125;</span><br><span class="line">Triagnle(Point a, Point b, Point c) &#123; p[<span class="number">0</span>] = a, p[<span class="number">1</span>] = b, p[<span class="number">2</span>] = c; &#125;</span><br><span class="line">Triagnle(Point pp[]) &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i] = pp[i]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i].input(); &#125;</span><br><span class="line"><span class="function">ll <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>((p[<span class="number">1</span>] - p[<span class="number">0</span>]) ^ (p[<span class="number">2</span>] - p[<span class="number">0</span>])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">have</span><span class="params">(Point&amp; pp)</span> </span>&#123;</span><br><span class="line">ll cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) cal += <span class="built_in">abs</span>((p[i] - pp) ^ (p[(i + <span class="number">1</span>) % <span class="number">3</span>] - pp));</span><br><span class="line"><span class="keyword">return</span> cal == area();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">vector</span>&lt;Point&gt; <span class="keyword">operator</span> &amp; (<span class="keyword">const</span> Triagnle&amp; t1, <span class="keyword">const</span> Triagnle&amp; t2) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j)</span><br><span class="line"><span class="keyword">if</span> (t1.p[i] == t2.p[j]) ret.push_back(t1.p[i]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">int</span> id, from;</span><br><span class="line">ll h;</span><br><span class="line">Node() &#123;&#125;</span><br><span class="line">Node(Point pp, <span class="keyword">int</span> i, <span class="keyword">int</span> f, ll hh): p(pp), id(i), from(f), h(hh) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> h &gt; n.h; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"hiking.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"hiking.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;Triagnle&gt; planes(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; plane : planes) plane.input();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, Point&gt;&gt;&gt; adj(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != n; ++j) &#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = planes[i] &amp; planes[j];</span><br><span class="line"><span class="keyword">if</span> (tmp.size()) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp.size() == <span class="number">1</span>) &#123;</span><br><span class="line">adj[i].push_back(mp(j, tmp.front()));</span><br><span class="line">adj[j].push_back(mp(i, tmp.front()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> p = lower(tmp.front(), tmp.back());</span><br><span class="line">adj[i].push_back(mp(j, p));</span><br><span class="line">adj[j].push_back(mp(i, p));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Point start, finish;</span><br><span class="line">start.input();</span><br><span class="line">finish.input();</span><br><span class="line"><span class="keyword">int</span> begin, end;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(start)) &#123;</span><br><span class="line">begin = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(finish)) &#123;</span><br><span class="line">end = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; que;</span><br><span class="line">que.push(Node(start, begin, begin, start.z));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(n, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; nodes(n);</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[now.id]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.id] = <span class="literal">true</span>;</span><br><span class="line">from[now.id] = now.from;</span><br><span class="line">nodes[now.id] = now.p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; next : adj[now.id]) <span class="keyword">if</span> (!vis[next.ff]) que.push(Node(next.ss, next.ff, now.id, max(now.h, next.ss.z)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; res(<span class="number">1</span>, finish);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">res.push_back(nodes[end]);</span><br><span class="line"><span class="keyword">if</span> (end == begin) <span class="keyword">break</span>;</span><br><span class="line">end = from[end];</span><br><span class="line">&#125;</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ans : res) ans.output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Instruction"><a href="#I-Instruction" class="headerlink" title="I. Instruction"></a>I. Instruction</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>铁路轨道视为一棵$~n~$个节点的二叉树，起点为根节点，终点为叶节点。然后给定$~m~$列火车的出发时刻$~t~$和终点$~p~$。每个非叶节点的初始指向为编号较小的子节点。为使得每辆火车均到达相应终点，那么需要在一些时刻修改一些非叶节点的指向。输出一种不超过$~100000~$次的修改方案。<br>数据范围$~3\leq n\leq51,~1\leq m\leq100,~0\leq t\leq10000,~1\leq p\leq26~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟。对于每辆火车，考虑它从起点到终点的过程，则可以得到这条路径上的非叶节点在某些时刻需要满足的状态（指向哪个子节点）。最终对于每个节点，所有的状态按时间升序然后去重即可。总时间复杂度为$~O(nm\log m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"instruction.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"instruction.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">128</span>], fa[<span class="number">64</span>], son[<span class="number">64</span>][<span class="number">2</span>], tmp[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, to[<span class="number">64</span>][<span class="number">64</span>], go[<span class="number">64</span>][<span class="number">64</span>], state[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, check[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; f;</span><br><span class="line">fa[i] = f;</span><br><span class="line">to[f][i] = tmp[f];</span><br><span class="line">son[f][tmp[f]++] = i;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'p'</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">p[name] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j = fa[j]) go[fa[j]][i] = to[fa[j]][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; node[<span class="number">64</span>], res;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; ch;</span><br><span class="line"><span class="keyword">int</span> id = p[ch];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != id; i = son[i][go[i][id]]) node[i].push_back(mp(t++, go[i][id]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (check[i]) &#123;</span><br><span class="line">sort(node[i].begin(), node[i].end());</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> fuck : node[i]) <span class="keyword">if</span> (now != fuck.ss) &#123;</span><br><span class="line">now = fuck.ss;</span><br><span class="line">res.push_back(mp(fuck.ff, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ans : res) <span class="built_in">cout</span> &lt;&lt; ans.ss &lt;&lt; <span class="string">' '</span> &lt;&lt; ans.ff &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Joy-of-Flight"><a href="#J-Joy-of-Flight" class="headerlink" title="J. Joy of Flight"></a>J. Joy of Flight</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定起点和终点坐标，飞机需要恰好在第$~k~$秒到达终点，同时给出这期间的风向变化和飞机的最大速度$~v_\max~$，每秒飞机的真实位移等于飞机速度向量于风速向量之和。输出每秒飞机所到达的坐标或者不存在到达终点的方案。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>分离风速与自身速度。那么方案存在等价于起点经过$~k~$秒的风吹所到达的坐标与终点的距离$~dis~$小于等于$~k\cdot v_\max~$。那么每秒的飞机速度即为$~\frac{dis}{k}~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"joy.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"joy.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">pll begin, end;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;begin.ff, &amp;begin.ss, &amp;end.ff, &amp;end.ss);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vmax;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;k, &amp;vmax);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pll&gt;&gt; input(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;pll&gt; winds(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld%lld"</span>, &amp;input[i].ff, &amp;input[i].ss.ff, &amp;input[i].ss.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = input[i - <span class="number">1</span>].ff; i &amp;&amp; j != input[i].ff; ++j) winds[j] = input[i - <span class="number">1</span>].ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = input.back().ff; i != k; ++i) winds[i] = input.back().ss;</span><br><span class="line">pll flow = mp(end.ff - begin.ff, end.ss - begin.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) flow = mp(flow.ff - wind.ff, flow.ss - wind.ss);</span><br><span class="line"><span class="keyword">if</span> (flow.ff * flow.ff + flow.ss * flow.ss &gt; vmax * vmax * k * k) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>), <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">pll temp = begin;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) &#123;</span><br><span class="line">++day;</span><br><span class="line">temp = mp(temp.ff + wind.ff, temp.ss + wind.ss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %f\n"</span>, temp.ff + (<span class="keyword">double</span>)flow.ff * day / k, temp.ss + (<span class="keyword">double</span>)flow.ss * day / k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Kebab-House"><a href="#K-Kebab-House" class="headerlink" title="K. Kebab House"></a>K. Kebab House</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数轴上从$~1~$开始有$~n~$个相连的线段区间，并给出每个区间的长度$~q~$。现要在所有线段内合法的取若干个点，满足相邻的两个点之间所未取到的点的数量至少为$~t~$，每个线段内最多取$~q-x~$个点。问合法的方案数（包括不取）。<br>数据范围$~1\leq n\leq1000,~0\leq t\leq100,~0\leq q\leq250,~0\leq x\leq q~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。问$~\text{WSY}~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul base = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">plus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b &lt; base ? a + b : a + b - base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">minus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a + base - b : a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">mul</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ull(a) * ull(b) % ull(base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define TEST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::istream&amp; myis = <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="built_in">std</span>::ostream&amp; myos = <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">myis</span><span class="params">(<span class="string">"kebab.in"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">myos</span><span class="params">(<span class="string">"kebab.out"</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ul m, n, t;</span><br><span class="line">ul segst[<span class="number">250001</span>];</span><br><span class="line">ul segable[<span class="number">250001</span>];</span><br><span class="line">ul sum[<span class="number">250001</span>];</span><br><span class="line">ul ans[<span class="number">250001</span>][<span class="number">251</span>];</span><br><span class="line">ul finalans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">myis.tie(<span class="number">0</span>);</span><br><span class="line">myis &gt;&gt; m &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>, st = <span class="number">1</span>; i != m; ++i) &#123;</span><br><span class="line">ul q, x;</span><br><span class="line">myis &gt;&gt; q &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (ul j = st; j != st + q; ++j) &#123;</span><br><span class="line">segst[j] = st;</span><br><span class="line">segable[j] = q - x;</span><br><span class="line">&#125;</span><br><span class="line">st = st + q;</span><br><span class="line">n = st - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= segable[i]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span>) &#123;</span><br><span class="line">ans[i][j] = sum[<span class="built_in">std</span>::min(i - t - <span class="number">1</span>, segst[i] - <span class="number">1</span>)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span> &amp;&amp; i - t - <span class="number">1</span> &gt;= segst[i] + j - <span class="number">2</span>) &#123;</span><br><span class="line">ans[i][j] = minus(ans[i - t - <span class="number">1</span>][j - <span class="number">1</span>], segst[i] + j - <span class="number">2</span> &gt;= <span class="number">1</span> ? ans[segst[i] + j - <span class="number">3</span>][j - <span class="number">1</span>] : ul(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = plus(sum[i], ans[i][j]);</span><br><span class="line">finalans = plus(finalans, ans[i][j]);</span><br><span class="line">ans[i][j] = plus(ans[i - <span class="number">1</span>][j], ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myos &lt;&lt; finalans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 61 (Rated for Div. 2)</title>
      <link href="/2019/03/10/Educational%20Codeforces%20Round%2061%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/03/10/Educational%20Codeforces%20Round%2061%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1132" target="_blank" rel="noopener">Educational Codeforces Round 61 (Rated for Div. 2)</a></p><h2 id="A-Regular-Bracket-Sequence"><a href="#A-Regular-Bracket-Sequence" class="headerlink" title="A. Regular Bracket Sequence"></a>A. Regular Bracket Sequence</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>现有$~cnt_1~$个$~\text{((}~$，$cnt_2~$个$~\text{()}~$，$~cnt_3~$个$~\text{)(}~$，$~cnt_4~$个$~\text{))}~$。问能否组合成一个合法括号串。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>判断$~cnt_1=cnt_4~$，且$~cnt_1&gt;0~$或$~cnt_3=0~$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; cnt[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (cnt[<span class="number">0</span>] == cnt[<span class="number">3</span>] &amp;&amp; (cnt[<span class="number">0</span>] &amp;&amp; !cnt[<span class="number">2</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Discounts"><a href="#B-Discounts" class="headerlink" title="B. Discounts"></a>B. Discounts</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = accumulate(a.begin(), a.end(), <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - a[n - q] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Painting-the-Fence"><a href="#C-Painting-the-Fence" class="headerlink" title="C. Painting the Fence"></a>C. Painting the Fence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$以内$~q~$个离散区间，问$~q-2~$个区间的并集最多包含多少个整点。<br>数据范围$~3\leq n,q\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~q-1~$的做法。对于数轴$~1,2,\dots,n~$上差分，则得到所包含于区间数量的差分数组。同时把每个区间放入其右端点的$~\text{vector}~$之中。从小到大枚举右端点，则可以知道每个区间中有多少个点的值为$~1~$，代表不取这个区间所减少的答案。整个过程都是线性的，所以时间复杂度为$~O(n+q)~$。那么对于本体，现暴力枚举第一个不选的区间即可，总时间复杂度为$~O(q\cdot(n+q))~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; seg(q);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; line(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">++d[seg[i].first];</span><br><span class="line">--d[++seg[i].second];</span><br><span class="line">line[seg[i].second - <span class="number">1</span>].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dd(d), sweep(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">--dd[seg[i].first];</span><br><span class="line">++dd[seg[i].second];</span><br><span class="line"><span class="keyword">int</span> sub = <span class="number">0x3f3f3f3f</span>, cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">sweep[j] = sweep[j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ((dd[j] += dd[j - <span class="number">1</span>]) == <span class="number">1</span>) ++sweep[j];</span><br><span class="line"><span class="keyword">if</span> (dd[j]) ++cal;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; k : line[j]) <span class="keyword">if</span> (i != k)</span><br><span class="line">sub = min(sub, sweep[seg[k].second - <span class="number">1</span>] - sweep[seg[k].first - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> res = max(res, cal - sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Stressful-Training"><a href="#D-Stressful-Training" class="headerlink" title="D. Stressful Training"></a>D. Stressful Training</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$台电脑，给出初始电量$~a~$和每分钟耗电$~b~$。总共$~k~$分钟，现有$~1~$个充电器，每分钟只能给$~1~$台电脑充电。问使得在最后一刻之前没有电脑没电（为负）的最小功率或者不存在。<br>数据范围$~1\leq n,k\leq2\cdot10^5,~1\leq a\leq10^{17},~1\leq b\leq10^{12}~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分答案，然后判断是否合法。使用优先队列的话总时间复杂度为$~O(k\log n\log\max)~$，很难通过。对于每台电脑，将其放入没电的时刻所对应的$~\text{vector}~$之中，模拟这$~k~$分钟即可。这样总时间复杂度为$~O((n+k)\log\max)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; ab;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) time.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first / laptop.second &lt; k) line[laptop.first / laptop.second].push_back(laptop);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fuck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : time) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = ((laptop.first / laptop.second + <span class="number">1</span>) * laptop.second - laptop.first - <span class="number">1</span>) / x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((cnt -= temp) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> ((laptop.first + temp * x) / laptop.second &lt; k) line[(laptop.first + temp * x) / laptop.second].push_back(make_pair(laptop.first + temp * x, laptop.second));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">ab.resize(n);</span><br><span class="line">line.resize(--k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.second;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first &lt; laptop.second * k) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line">x = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check()) right = x;</span><br><span class="line"><span class="keyword">else</span> left = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (right == INF ? <span class="number">-1</span> : right) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Knapsack"><a href="#E-Knapsack" class="headerlink" title="E. Knapsack"></a>E. Knapsack</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数字$~1\leq i\leq8~$有$~cnt_i~$个。问组成的和在不超过$~W~$下的最大值。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~S=\gcd(1,2,\dots,8)=840~$。对于数字$~i~$，取$~\frac{S}{i}~$个求和能得到$~S~$。动态规划，记$~dp[i][j]~$为已经考虑了前$~i~$个数字，每个数字至多取$~\min(\frac{S}{i},cnt_i)~$个，未取过的数字还能凑出多少$~S~$。这样空间复杂度为$~O(8^2\cdot840)~$，时间复杂度为$~O(8\cdot\log8\cdot840^2)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> gcd = <span class="number">840</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w, cnt, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(maxn + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(maxn * gcd + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">dp.front().front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= gcd / i &amp;&amp; j &lt;= cnt; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = i * j; k &lt;= maxn * gcd; ++k)</span><br><span class="line"><span class="keyword">if</span> (~dp[i - <span class="number">1</span>][k - i * j]) dp[i][k] = max(dp[i][k], dp[i - <span class="number">1</span>][k - i * j] + (cnt - j) / (gcd / i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn * gcd &amp;&amp; i &lt;= w; ++i) <span class="keyword">if</span> (~dp.back()[i])</span><br><span class="line">res = max(res, i + gcd * min(dp.back()[i], (w - i) / gcd));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Clear-the-String"><a href="#F-Clear-the-String" class="headerlink" title="F. Clear the String"></a>F. Clear the String</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，每次可以消除连续的相同子串，问最小消除次数。<br>数据范围$~1\leq n\leq500~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>相邻去重后就是一个区间$~\text{DP}~$问题。具体见代码，时间复杂度为$~O(n^3)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~dp[l][r]) <span class="keyword">return</span> dp[l][r];</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> dp[l][r] = <span class="number">0</span>;</span><br><span class="line">dp[l][r] = calc(l + <span class="number">1</span>, r) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i) <span class="keyword">if</span> (str[l] == str[i]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, i - <span class="number">1</span>) + calc(i, r));</span><br><span class="line"><span class="keyword">if</span> (str[l] == str[r]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, r - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> dp[l][r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">str = <span class="built_in">string</span>(str.begin(), unique(str.begin(), str.end()));</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(<span class="number">0</span>, str.size() - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Greedy-Subsequences"><a href="#G-Greedy-Subsequences" class="headerlink" title="G. Greedy Subsequences"></a>G. Greedy Subsequences</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列$~a_1,a_2,\dots,a_n~$，定义贪心子序列满足除首项外，每一项均为原序列中右边第一个大于前一项的值。给定$~k~$，输出区间$~[1,k],~[2,k+1],~\dots,~[n-k+1,n]~$的最长贪心子序列长度。<br>数据范围$~1\leq k\leq n\leq10^6,~1\leq a\leq n~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~f(r)=\max\lbrace l:a_r\geq a_l,~l&lt; r\rbrace~$，其中不妨设$~a_0=\inf~$。这一步可以通过单调栈线性求出。再令$~g(l,r)~$表示首相为$~a_l~$，右边不超过$~r~$的最长贪心子序列长度。则有转移式</p><script type="math/tex; mode=display">g(l,r)=\begin{cases}g(l,r-1)    &\text{$l\leq f(r)$}    \\g(l,r-1)+1  &\text{$l>f(r)$}\end{cases}</script><p>且区间$~[r-k+1,r]~$的答案为$~\max_{l=r-k+1}^{r}{g(l,r)}~$。用线段树维护即可，总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line"><span class="keyword">if</span> (index &lt; maxn) &#123;</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">&#125;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">++tag[index];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(LEFT, SEG);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(RIGHT, SEG);</span><br><span class="line">seg[index] = max(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> max(query(LEFT, SEG), query(RIGHT, SEG));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">sta.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (a[sta.top()] &lt; a[i]) sta.pop();</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, sta.top(), i);</span><br><span class="line">sta.push(i);</span><br><span class="line"><span class="keyword">if</span> (i &gt;= k) <span class="built_in">cout</span> &lt;&lt; query(<span class="number">0</span>, n, <span class="number">1</span>, i - k, i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EOJ Monthly 2019.2 (based on February Selection)</title>
      <link href="/2019/02/25/EOJ%20Monthly%202019.2%20(based%20on%20February%20Selection)/"/>
      <url>/2019/02/25/EOJ%20Monthly%202019.2%20(based%20on%20February%20Selection)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://acm.ecnu.edu.cn/contest/140" target="_blank" rel="noopener">EOJ Monthly 2019.2 (based on February Selection)</a></p><h2 id="A-回收卫星"><a href="#A-回收卫星" class="headerlink" title="A. 回收卫星"></a>A. 回收卫星</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。有一个球心为$~(x,~y,~z)~$半径为$~r~$的球，且原点$~(0,~0,~0)~$保证在球内部或边界上。每次可以询问一个点是否在球的内部或边界上，需要在至多$~200~$次询问下确定球心坐标。<br>数据范围$~{\mid x\mid}\leq10^9,~{\mid y\mid}\leq10^9,~{\mid z\mid}\leq10^9,~1\leq r\leq10^9~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过二分可以确定$~x_1=\max\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$和$~x_2=\min\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$。注意到绝对值最大为$~2\times10^9~$，二分上界必须大于该数，且会爆$~\text{int}~$。<br>考虑关于$~x_0~$的一元二次方程</p><script type="math/tex; mode=display">(x-x_0)^2+y^2+z^2=r^2</script><p>解为</p><script type="math/tex; mode=display">x_0=x\pm\sqrt{r^2-y^2-z^2}</script><p>于是有</p><script type="math/tex; mode=display">x_1=x+\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x_2=x-\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x={\frac{x_1+x_2}{2}}</script><p>同理可解出$~y~$与$~z~$。次数最多$~6\times32=192~$次。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2000000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y, <span class="keyword">const</span> <span class="keyword">int</span>&amp; z)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="string">' '</span> &lt;&lt; z &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left, right, x1, x2, y1, y2, z1, z2;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(-mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, -mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, -mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z2 = -left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; (x1 + x2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (y1 + y2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (z1 + z2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-解题"><a href="#B-解题" class="headerlink" title="B. 解题"></a>B. 解题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$位大整数，询问$~q~$次，每次给定一个正整数$~m~$。选取大整数十进制表示下连续的一段保留，其余全变成$~0~$，找出最小的如此生成的正整数满足是$~m~$的倍数，或者不存在。<br>数据范围$~1\leq n\leq10^6,~1\leq q\leq500,~\sum m\leq5\times10^7~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~a_i~$为大整数后$~i~$位模$~m~$的余数，注意需要添加$~a_0=0~$。取区间$~[l,r]~$生成的数字是$~m~$的倍数，等价于$~a_{n+1-l}=a_{n-r}~$。只要将$~i~$从小到大计算$~a_i~$，对于最小的$~j~$，存在$~i&lt; j~$满足$~a_i=a_j~$，则答案$~[l,r]=[n+1-j,n-i]~$。由抽屉原理，至多计算$~m+1~$次就一定能得出答案。总时间复杂度为$~O(\sum m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = num.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dig(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) dig[i] = num[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos(m, <span class="number">0</span>);</span><br><span class="line">pos[<span class="number">0</span>] = n;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> base = <span class="number">1</span>, now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">now = (now + base * dig[i]) % m;</span><br><span class="line"><span class="keyword">if</span> (pos[now]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; pos[now] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos[now] = i;</span><br><span class="line">base = base * <span class="number">10</span> % m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-魔板"><a href="#C-魔板" class="headerlink" title="C. 魔板"></a>C. 魔板</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个$~n\times m~$个格点的网格图，第$~i~$行第$~j~$列的坐标为$~(i,j)~$。每个点有个数字，有序状态下$~(i,j)~$的数字为$~(i-1)\times m+j~$。有两种置换方式：选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x,y+1)~$上的数字顺时针交换；选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x+1,y+1),(x,y+1)~$上的数字顺时针交换。现给定一个打乱的状态，输出任意一种使其有序的操作方式，且次数不能超过$~3\cdot10^6~$。<br>数据范围$~2\leq n,m\leq100~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>构造大模拟。注意到先进行$~1~$次操作$~2~$再进行$~2~$次操作$~1~$，等价于只交换$~(x+1,y)~$和$~(x+1,y+1)~$。先进行$~2~$次操作$~1~$再进行$~1~$次操作$~2~$，等价于只交换$~(x,y+1)~$和$~(x+1,y+1)~$。那么暴力模拟即可，上限$~3\cdot10^6~$其实很宽松。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line">pii pos[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">101</span>][<span class="number">101</span>], m, n, res_size;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, pii&gt; res[<span class="number">1</span> &lt;&lt; <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = b] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = c] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">1</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x + <span class="number">1</span>][y + <span class="number">1</span>], d = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y + <span class="number">1</span>] = b] = mp(x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = c] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = d] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">2</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work2(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_right</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work2(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line">pos[mat[i][j]] = mp(i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j, ++k) &#123;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &lt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss);</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &gt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ff &gt; i + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">1</span>) &#123;</span><br><span class="line">work2(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != i) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != m) &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_right(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res_size &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != res_size; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[i].ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ss &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-进制转换"><a href="#D-进制转换" class="headerlink" title="D. 进制转换"></a>D. 进制转换</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问$~[l,r]~$中有多少个数的$~k~$进制表示恰好有$~m~$个末尾$~0~$。<br>数据范围$1\leq T\leq10^5,~1\leq l\leq r\leq10^18,~2\leq k,m\leq100$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。预处理所有的$~k^m~$，然后将$~k^m~$的倍数的数量减去$~k^{m+1}~$的数量即可。总时间复杂度为$~O(km+T)~$，注意细节。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pown[<span class="number">101</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k, <span class="keyword">const</span> <span class="keyword">int</span>&amp; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~pown[k][m] ? n / pown[k][m] : <span class="number">0</span>) - (~pown[k][m + <span class="number">1</span>] ? n / pown[k][m + <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">pown[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">101</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pown[i][j - <span class="number">1</span>] &lt; INF / i &amp;&amp; ~pown[i][j - <span class="number">1</span>])</span><br><span class="line">pown[i][j] = pown[i][j - <span class="number">1</span>] * i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pown[i][j] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line"><span class="keyword">int</span> k, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k &gt;&gt; m;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(r, k, m) - calc(l - <span class="number">1</span>, k, m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-中位数"><a href="#E-中位数" class="headerlink" title="E. 中位数"></a>E. 中位数</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个带点权有重边的有向无环图$~\text{DAG}~$，问点$~1~$到点$~n~$所有路径的最大中位数。路径的中位数定义为升序后角标为$~\lfloor\frac{x}{2}\rfloor+1~$的权值。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分套$~\text{DAG}~$上差分$~\text{DP}~$。二分答案，然后对于权值大于等于当前值的点标记为$~1~$反之为$~-1~$。从点$~1~$开始跑$~\text{DP}~$，如果点$~n~$的结果小于$~0~$，则当前值过大。可以先对$~\text{DAG}~$先拓扑排序，这样$~\text{DP}~$过程不需要用递归实现，常数小。总时间复杂度为$~O(n\log A)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> deg[maxn], a[maxn], cal[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!deg[v]++) dfs(v); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">topo.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[topo[i]]) <span class="keyword">if</span> (!--deg[j]) topo.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; end)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cal, <span class="number">0xc0</span>, <span class="keyword">sizeof</span> (cal));</span><br><span class="line">cal[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> u : topo) &#123;</span><br><span class="line">a[u] &lt; x ? --cal[u] : ++cal[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) cal[v] = max(cal[v], cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cal[end] &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line">dfs();</span><br><span class="line"><span class="keyword">if</span> (!deg[n]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid, n)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; left &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-方差"><a href="#F-方差" class="headerlink" title="F. 方差"></a>F. 方差</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数，问$~m~$个数的最小方差$~\sigma^2~$是多少，输出$~\sigma^2m^2~$。<br>数据范围$~1\leq m\leq n\leq10^6,~1\leq x\leq10^3~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先排序，注意到数据范围，桶排（基数排序）的时间复杂度为$~O(n+x)~$。注意到方差计算公式</p><script type="math/tex; mode=display">\begin{aligned}\sigma^2    &=\frac{1}{m}\sum(a-\bar{a})^2   \\            &=\frac{1}{m}\sum a^2-\bar{a}^2\end{aligned}</script><p>于是答案计算公式为</p><script type="math/tex; mode=display">\max\{m\sum_{i=l}^{r}a_i^2-(\sum_{i=l}^{r}a_i)^2\}</script><p>滑窗即可。总时间复杂度为$~O(n+x)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) cal1 += a[i] * a[i], cal2 += a[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = cal1 * m - cal2 * cal2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i ^ n; ++i) &#123;</span><br><span class="line">cal1 += a[i] * a[i] - a[i - m] * a[i - m];</span><br><span class="line">cal2 += a[i] - a[i - m];</span><br><span class="line">res = min(res, cal1 * m - cal2 * cal2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 60 (Rated for Div. 2)</title>
      <link href="/2019/02/24/Educational%20Codeforces%20Round%2060%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/02/24/Educational%20Codeforces%20Round%2060%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1117" target="_blank" rel="noopener">Educational Codeforces Round 60 (Rated for Div. 2)</a></p><h2 id="A-Best-Subsegment"><a href="#A-Best-Subsegment" class="headerlink" title="A. Best Subsegment"></a>A. Best Subsegment</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> x = * max_element(a.begin(), a.end());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> aa : a) &#123;</span><br><span class="line"><span class="keyword">if</span> (aa ^ x) res = max(res, cnt), cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> ++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(res, cnt) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Emotes"><a href="#B-Emotes" class="headerlink" title="B. Emotes"></a>B. Emotes</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>  (n--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &gt; max2) max2 = a;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m / (k + <span class="number">1</span>) * (max1 * k + max2) + m % (k + <span class="number">1</span>) * max1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Magic-Ship"><a href="#C-Magic-Ship" class="headerlink" title="C. Magic Ship"></a>C. Magic Ship</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要让一艘船从$~(x_1,~y_1)~$走到$~(x_2,~y_2)~$，每天可以选择上下左右或者不走。但是还有给定的周期为$~n~$的风速影响，每天船的最终移动为当前的风速与船速的选择之和。问到达目的地的最短时间或达不到。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将船速和风速分开考虑。那么第$~k~$天能到达目的地，当且仅当$~{\mid x_2-x_3\mid+\mid y_2-y_3\mid}\leq k~$。其中$~(x_3,~y_3)~$为如果这$~k~$天船本身静止依靠风速所到达的地点。那么就可以二分天数得出答案了。总时间复杂度为$~O(n+\log\max)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> + (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> pll&amp; y) &#123;<span class="keyword">return</span> mp(x.ff + y.ff, x.ss + y.ss);&#125;</span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> - (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> pll&amp; y) &#123;<span class="keyword">return</span> mp(x.ff - y.ff, x.ss - y.ss);&#125;</span><br><span class="line"><span class="keyword">inline</span> pll <span class="keyword">operator</span> * (<span class="keyword">const</span> pll&amp; x, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; y) &#123;<span class="keyword">return</span> mp(x.ff * y, x.ss * y);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">pll wind[maxn], p1, p2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; step)</span> </span>&#123;</span><br><span class="line">pll tmp = wind[n] * (step / n) + wind[step % n] - p2;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(tmp.ff) + <span class="built_in">abs</span>(tmp.ss) &lt;= step;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p1.ff &gt;&gt; p1.ss &gt;&gt; p2.ff &gt;&gt; p2.ss &gt;&gt; n;</span><br><span class="line">p2 = p2 - p1;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, pll&gt; cal;</span><br><span class="line">cal[<span class="string">'U'</span>] = mp(<span class="number">0L</span>L, <span class="number">1L</span>L);</span><br><span class="line">cal[<span class="string">'D'</span>] = mp(<span class="number">0L</span>L, <span class="number">-1L</span>L);</span><br><span class="line">cal[<span class="string">'L'</span>] = mp(<span class="number">-1L</span>L, <span class="number">0L</span>L);</span><br><span class="line">cal[<span class="string">'R'</span>] = mp(<span class="number">1L</span>L, <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">wind[i] = wind[i - <span class="number">1</span>] + cal[ch];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid)) right = mid;</span><br><span class="line"><span class="keyword">else</span> left = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (right ^ INF ? right : <span class="number">-1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Magic-Gems"><a href="#D-Magic-Gems" class="headerlink" title="D. Magic Gems"></a>D. Magic Gems</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>观察样例可知题目等价于询问有多少长度为$~N~$的$~01~$序列使得每段连续的$~0~$的长度都是$~M~$的倍数。<br>数据范围$~1\leq N\leq10^{18},~2\leq M\leq100~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然有答案序列的转移式$~res_N=res_{N-1}+res_{N-M}~$。那么转化为矩阵快速幂问题可以在$~O(M^3\log N)~$的时间复杂内解决。当然也存在$~O(M^2\log N)~$与$~O(M\log M\log N)~$的算法。</p><h3 id="代码（-O-M-3-log-N-）"><a href="#代码（-O-M-3-log-N-）" class="headerlink" title="代码（$~O(M^3\log N)~$）"></a><strong>代码（$~O(M^3\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], mat[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>], m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ m; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = base[<span class="number">0</span>][m - <span class="number">1</span>] = mat[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ m; ++i) base[i][i - <span class="number">1</span>] = mat[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, mat, base);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mat[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-M-2-log-N-）"><a href="#代码（-O-M-2-log-N-）" class="headerlink" title="代码（$~O(M^2\log N)~$）"></a><strong>代码（$~O(M^2\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function">vi <span class="title">linear_calc</span><span class="params">(vi&amp; c, <span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = c.size();</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = c.front(); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vi(<span class="number">1</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;vi&gt; base(size &lt;&lt; <span class="number">1</span>, vi(size, <span class="number">0</span>)), <span class="built_in">pow</span>(<span class="number">64</span>, vi(size, <span class="number">0</span>));</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">base[i][j] = add(mul(base[i - <span class="number">1</span>].back(), c[j]), j ? base[i - <span class="number">1</span>][j - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (n &lt; (size &lt;&lt; <span class="number">1</span>)) <span class="keyword">return</span> base[n];</span><br><span class="line"><span class="built_in">pow</span>[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) &#123;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line">tmp[j + k] = add(tmp[j + k], mul(<span class="built_in">pow</span>[i - <span class="number">1</span>][j], <span class="built_in">pow</span>[i - <span class="number">1</span>][k]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size &lt;&lt; <span class="number">1</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line"><span class="built_in">pow</span>[i][k] = add(<span class="built_in">pow</span>[i][k], mul(tmp[j], base[j][k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">vi ret = <span class="built_in">pow</span>[index];</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">tmp[i + j] = add(tmp[i + j], mul(ret[i], <span class="built_in">pow</span>[index][j]));</span><br><span class="line">fill(ret.begin(), ret.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">ret[j] = add(ret[j], mul(tmp[i], base[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vi <span class="title">base</span><span class="params">(m, <span class="number">0</span>)</span></span>;</span><br><span class="line">base.front() = base.back() = <span class="number">1</span>;</span><br><span class="line">base = linear_calc(base, n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : base) res = add(res, x);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Decypher-the-String"><a href="#E-Decypher-the-String" class="headerlink" title="E. Decypher the String"></a>E. Decypher the String</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。现有一个确定但不给出的字符串重排置换，然后给定一个某字符串经过该置换得到的新串。你可以询问任意一个同样长度的字符串，然后返回经过该置换得到的新串。要求在$~3~$次询问以内找出给定串的原串。所有字符串均为小写字母串。<br>数据范围$~1\leq n\leq10^4~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>字符集大小为$~26~$。那么考虑这样的一个询问：字符串开头从$~\text{a}~$开始，每隔$~26^k~$个字符切换到下一个字母。那么就可以得到逆置换下，每个位置所指向的新位置模$~26^{k+1}~$的余数$~x~$再除以$~26^k~$的下取整$~\lfloor\frac{x}{26^k}\rfloor~$的值是多少。所以当$~n\leq10^4\leq26^3~$时，做$~3~$次询问就能确定置换。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str, ask[<span class="number">3</span>], ans[<span class="number">3</span>], res(<span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span>, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> j = <span class="string">'a'</span>; j &lt;= <span class="string">'z'</span>; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> k = <span class="string">'a'</span>; k &lt;= <span class="string">'z'</span>; ++k) &#123;</span><br><span class="line">ask[<span class="number">0</span>].append(<span class="number">1</span>, i);</span><br><span class="line">ask[<span class="number">1</span>].append(<span class="number">1</span>, j);</span><br><span class="line">ask[<span class="number">2</span>].append(<span class="number">1</span>, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = str.size();</span><br><span class="line">str.append(<span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span> - n, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; ask[i].substr(<span class="number">0</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ans[i];</span><br><span class="line">ans[i].append(ask[i], n, <span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span> - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">26</span> * <span class="number">26</span> * <span class="number">26</span>; ++i)</span><br><span class="line">res[<span class="number">26</span> * <span class="number">26</span> * (ans[<span class="number">0</span>][i] - <span class="string">'a'</span>) + <span class="number">26</span> * (ans[<span class="number">1</span>][i] - <span class="string">'a'</span>) + (ans[<span class="number">2</span>][i] - <span class="string">'a'</span>)] = str[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; res.substr(<span class="number">0</span>, n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Crisp-String"><a href="#F-Crisp-String" class="headerlink" title="F. Crisp String"></a>F. Crisp String</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$由前$~p~$个小写字母组成的字符串，以及一个$~p\times p~$的$~01~$对称矩阵。定义一个字符串是$~\text{crisp}~$的，当且仅当字符串中所有相邻的字符对在矩阵中对应的值是$~1~$，保证给定字符串是$~\text{crisp}~$的。每一步操作可以选择一个还有的字母，将字符串中所有该字母删除。在保证每一步操作后字符串依然是$~\text{crisp}~$的条件下，问字符串最短长度。<br>数据范围$~1\leq n\leq10^5,~1\leq p\leq17~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\text{DP}~$。按位储存当前状态下还有那些字母存在，那么只需要考虑每个状态的合法性即可。对于每对字母$~(i,~j)~$，可以线性对字符串扫描一遍，算出恰好使得$~i~$与$~j~$相邻所需要删除的状态。然后再对所有状态$~\text{DP}~$，得出在每个状态下$~i~$与$~j~$是否相邻。总时间复杂度为$~O(np^2+p^32^p)~$。代码所写的常数比较大，也存在$~O(np+p^32^p)~$的做法。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, A[<span class="number">17</span>][<span class="number">17</span>], cnt[<span class="number">17</span>], cal[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], res = maxn, a[maxn];</span><br><span class="line"><span class="keyword">bool</span> check[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], adj[<span class="number">17</span>][<span class="number">17</span>][<span class="number">1</span> &lt;&lt; <span class="number">17</span>], vis[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> mask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (vis[mask]) <span class="keyword">return</span>;</span><br><span class="line">vis[mask] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j)</span><br><span class="line"><span class="keyword">if</span> (mask &amp; <span class="number">1</span> &lt;&lt; i &amp;&amp; mask &amp; <span class="number">1</span> &lt;&lt; j &amp;&amp; !A[i][j] &amp;&amp; adj[i][j][((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>) ^ mask]) <span class="keyword">return</span>;</span><br><span class="line">res = min(res, cal[mask]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">if</span> (mask &amp; <span class="number">1</span> &lt;&lt; i) dfs(mask ^ <span class="number">1</span> &lt;&lt; i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; p &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j) <span class="built_in">cin</span> &gt;&gt; A[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) ++cnt[a[i] = str[i] - <span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; p); ++i) cal[i] = cal[i ^ (i &amp; -i)] + cnt[__builtin_ctz(i)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j) &#123;</span><br><span class="line"><span class="keyword">bool</span> check = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>, l; k != n; ++k) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[k] == j) &#123;</span><br><span class="line"><span class="keyword">if</span> (check) adj[i][j][l] = adj[j][i][l] = <span class="literal">true</span>;</span><br><span class="line">check = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[k] == i) &#123;</span><br><span class="line">check = <span class="literal">true</span>;</span><br><span class="line">l = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[k] != i &amp;&amp; a[k] != j) l |= <span class="number">1</span> &lt;&lt; a[k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != p; ++j)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != (<span class="number">1</span> &lt;&lt; p); ++k) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l != p; ++l)</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span> &lt;&lt; l) adj[i][j][k] |= adj[i][j][k ^ <span class="number">1</span> &lt;&lt; l];</span><br><span class="line">dfs((<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Recursive-Queries"><a href="#G-Recursive-Queries" class="headerlink" title="G. Recursive Queries"></a>G. Recursive Queries</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个全排列$~p_1,~p_2,~\dots,~p_n~$，定义</p><script type="math/tex; mode=display">f(l,~r)=\begin{cases}(r-l+1)+f(l,~m_{lr}-1)+f(m_{lr}+1,~r)   &\text{$l\leq r$}   \\0                                       &\text{$l>r$}\end{cases}</script><p>其中$~m_{lr}~$表示$~p_l,~\dots,~p_r~$中最大值的角标。一共问$~q~$组$~f(l,~r)~$。<br>数据范围$~1\leq n\leq10^6,~1\leq q\leq10^6~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>定义</p><script type="math/tex; mode=display">fl(l,~r)=(m_{lr}-l)+fl(l,~m_{lr}-1)+fl(m_{lr}+1,~r) \\fr(l,~r)=(r-m_{lr})+fr(l,~m_{lr}-1)+fr(m_{lr}+1,~r)</script><p>则有</p><script type="math/tex; mode=display">f(l,~r)=(r-l+1)+fl(l,~r)+fr(l,~r)</script><p>先计算$~fl(l,~r)~$。令</p><script type="math/tex; mode=display">g(i)=\min\{j\mid p_k\leq p_i,~\forall~k\in[j,~i]\}</script><p>这一步可以通过<strong>单调栈</strong>线性处理。此时$~[l,~r]~$中每个点$~i~$作为计算过程中的$~m_{lr}~$时对于$~fl(l,~r)~$的贡献为$~i-\max(l,~g(i))~$。即</p><script type="math/tex; mode=display">fl(l,~r)=\sum_{i=l}^{r}i-\max(l,~g(i))</script><p>在固定$~r~$的条件下，$~fl(l,~r)~$可以视为关于$~l~$的分段线性函数。将询问离线，然后对右端点$~r~$从小到大扫一遍，每次对当前的分段线性函数增加$~r-\max(l,~g(r))~$。如何维护分段线性函数？考虑分段线性函数中的斜率$~k~$和截距$~b~$。当$~l&lt; g(r)~$时，可视为$~b~$增加$~r-g(r)~$。反之$~b~$增加$~r~$，而$~k~$减少$~1~$。于是需要一个支持<strong>区间修改</strong>和<strong>单点查询</strong>的数据结构，用<strong>差分树状数组</strong>即可。对于$~fr(l,~r)~$的计算，将所有数据翻转后等价于计算$~fl(l,~r)~$，总时间复杂度为$~O((n+q)\log n)~$。<strong>不推荐使用递归线段树</strong>，大常数加上递归复杂度基本会$~\text{TLE}~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], l[maxn], r[maxn], sta[maxn], sta_size, cal[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res[maxn], bit1[maxn], bit2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> bit[], <span class="keyword">const</span> <span class="keyword">int</span>&amp; p, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt; maxn; i += lowbit(i)) bit[i] += a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pre_sum</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> bit[], <span class="keyword">const</span> <span class="keyword">int</span>&amp; p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i ^= lowbit(i)) ret += bit[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cin</span> &gt;&gt; l[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="built_in">cin</span> &gt;&gt; r[i], query[r[i]].push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (sta_size &amp;&amp; p[sta[sta_size]] &lt; p[i]) --sta_size;</span><br><span class="line">cal[i] = sta[sta_size] + <span class="number">1</span>;</span><br><span class="line">sta[++sta_size] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">modify(bit1, <span class="number">1</span>, i - cal[i]);</span><br><span class="line">modify(bit1, i + <span class="number">1</span>, -i);</span><br><span class="line">modify(bit1, cal[i], cal[i]);</span><br><span class="line">modify(bit2, cal[i], <span class="number">1</span>);</span><br><span class="line">modify(bit2, i + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : query[i]) res[x] += pre_sum(bit1, l[x]) - pre_sum(bit2, l[x]) * l[x];</span><br><span class="line">&#125;</span><br><span class="line">reverse(p + <span class="number">1</span>, p + n + <span class="number">1</span>);</span><br><span class="line">sta_size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (sta_size &amp;&amp; p[sta[sta_size]] &lt; p[i]) --sta_size;</span><br><span class="line">cal[i] = sta[sta_size] + <span class="number">1</span>;</span><br><span class="line">sta[++sta_size] = i;</span><br><span class="line">query[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">r[i] = n + <span class="number">1</span> - r[i];</span><br><span class="line">query[n + <span class="number">1</span> - l[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(bit1, <span class="number">0</span>, <span class="keyword">sizeof</span> (bit1));</span><br><span class="line"><span class="built_in">memset</span>(bit2, <span class="number">0</span>, <span class="keyword">sizeof</span> (bit2));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">modify(bit1, <span class="number">1</span>, i - cal[i]);</span><br><span class="line">modify(bit1, i + <span class="number">1</span>, -i);</span><br><span class="line">modify(bit1, cal[i], cal[i]);</span><br><span class="line">modify(bit2, cal[i], <span class="number">1</span>);</span><br><span class="line">modify(bit2, i + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : query[i]) res[x] += pre_sum(bit1, r[x]) - pre_sum(bit2, r[x]) * r[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ m; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] - l[i] - r[i] + n + <span class="number">2</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[m] - l[m] - r[m] + n + <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 539 (Div. 2) (TBC)</title>
      <link href="/2019/02/19/Codeforces%20Round%20539%20(Div.%202)%20(TBC)/"/>
      <url>/2019/02/19/Codeforces%20Round%20539%20(Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1113" target="_blank" rel="noopener">Codeforces Round #539 (Div. 2)</a></p><h2 id="A-Sasha-and-His-Trip"><a href="#A-Sasha-and-His-Trip" class="headerlink" title="A. Sasha and His Trip"></a>A. Sasha and His Trip</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n &gt; v ? (n - v + <span class="number">1</span>) * (n - v) / <span class="number">2</span> + v - <span class="number">1</span> : n - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Sasha-and-Magnetic-Machines"><a href="#B-Sasha-and-Magnetic-Machines" class="headerlink" title="B. Sasha and Magnetic Machines"></a>B. Sasha and Magnetic Machines</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a.back(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j; --j)</span><br><span class="line"><span class="keyword">if</span> (a[j] % i == <span class="number">0</span>)</span><br><span class="line">cal = min(cal, (i - <span class="number">1</span>) * (a.front() - a[j] / i));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(a.begin(), a.end(), <span class="number">0</span>) + cal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Sasha-and-a-Bit-of-Relax"><a href="#C-Sasha-and-a-Bit-of-Relax" class="headerlink" title="C. Sasha and a Bit of Relax"></a>C. Sasha and a Bit of Relax</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的序列，问有多少个偶数长度的连续子序列满足前一半的$~\text{xor}~$和等于后一半的$~\text{xor}~$和。<br>数据范围$~2\leq n\leq3\cdot10^5,~0\leq a&lt; 2^{20}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>条件其实等价于这个区间的$~\text{xor}~$和为$~0~$。注意到数据范围，只需要开一个$~cnt~$数组记录前缀$~\text{xor}~$和，然从前往后扫的过程中更新答案和$~cnt~$即可。时间复杂度为$~O(n)~$，空间复杂度$~O(a)~$。当然用$~\text{map}~$来储存$~cnt~$也可以，这样的时间复杂度为$~O(n\log n)~$，空间复杂度为$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[<span class="number">1</span> &lt;&lt; <span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], ++cnt[a[i] ^= a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">res += cnt[a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span> ^ <span class="number">1</span>];</span><br><span class="line">--cnt[a[i]][i &amp; <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sasha-and-One-More-Name"><a href="#D-Sasha-and-One-More-Name" class="headerlink" title="D. Sasha and One More Name"></a>D. Sasha and One More Name</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个回文串，需要切$~k~$刀将其拆成$~k+1~$个连续字串，使得存在一种重新组合是个不同于原串的回文串。输出$~k~$的最小值或不存在。<br>数据范围$~1\leq{\mid s\mid}\leq5000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然如果前$~\frac{\mid s\mid}{2}~$个字符一样，则$~k~$不存在。否则存在一个前缀和后缀，将它们交换后可以得到一个新的回文串，于是$~1\leq k\leq2~$。暴力枚举判断即可，时间复杂度为$~O(n^2)~$。但是这题可以进一步优化，如果$~k=1~$，由对称性，不妨设在切在前半段，则所切的那一刀必然得到一个偶数长度的回文前缀的前一半，且剩下的后缀也是回文串（或空串）。运用$~\text{Manacher}~$算法可以在线性时间内处理出每个中心所对应的最长回文串。那怎么判断这样的做法得到的新串是否和原串不一样呢？最朴素的方式是运用$~\text{ex-KMP}~$算法。另一种只需要判断切的这一刀的左边，也就是这个回文前缀的的前一半，是否也是个回文串。如果是，则得到的新串必然和原串一样，这个可以自行证明。不论是否运用$~\text{ex-KMP}~$算法，总时间复杂度均为$~O(n)~$。</p><h3 id="代码（-O-n-2-）"><a href="#代码（-O-n-2-）" class="headerlink" title="代码（$~O(n^2)~$）"></a><strong>代码（$~O(n^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(o) o.begin(), o.end()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.size() &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (*max_element(all(sub)) == *min_element(all(sub)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!sub.empty()) &#123;</span><br><span class="line"><span class="built_in">string</span> tmp = str.substr(sub.size()) + sub;</span><br><span class="line"><span class="built_in">string</span> pmt = tmp;</span><br><span class="line">reverse(all(pmt));</span><br><span class="line"><span class="keyword">if</span> (tmp == pmt &amp;&amp; str != tmp) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">sub.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn], tmp[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> n, <span class="keyword">char</span> tmp[], <span class="keyword">int</span> len[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = n + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, ret = <span class="number">1</span>;</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="string">'$'</span>, tmp[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] = str[i], tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, mid = <span class="number">1</span>, right = <span class="number">1</span>; i ^ l; ++i)</span><br><span class="line"><span class="keyword">if</span> ((i &gt; right) | (i + (len[i] = len[(mid &lt;&lt; <span class="number">1</span>) - i]) &gt; right)) &#123;</span><br><span class="line"><span class="keyword">for</span> (len[mid = i] = <span class="number">1</span>; tmp[i - len[i]] == tmp[i + len[i]]; ++len[i]);</span><br><span class="line">ret = max(ret, len[i] - <span class="number">1</span>);</span><br><span class="line">right = i + len[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;<span class="keyword">return</span> right - left + <span class="number">2</span> == len[left + right + <span class="number">2</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">if</span> (*max_element(str, str + (n &gt;&gt; <span class="number">1</span>)) == *min_element(str, str + (n &gt;&gt; <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">manacher(str, n, tmp, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (!is_palindrome(<span class="number">0</span>, i) &amp;&amp; is_palindrome(<span class="number">0</span>, i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>) &amp;&amp; is_palindrome(i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Sasha-and-Interesting-Fact-from-Graph-Theory"><a href="#F-Sasha-and-Interesting-Fact-from-Graph-Theory" class="headerlink" title="F. Sasha and Interesting Fact from Graph Theory"></a>F. Sasha and Interesting Fact from Graph Theory</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多少棵节点编号为$~1,~2,~\dots,~n~$，边权范围为$~[1,~m]~$的树，满足连接$~a~$与$~b~$的简单路径的边权之和为$~m~$。<br>数据范围$~2\leq n\leq10^6,~1\leq m\leq10^6~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>有编号生成树计数问题离不开<a href="https://en.wikipedia.org/wiki/Pr%C3%BCfer_sequence" target="_blank" rel="noopener">$~\text{Pru2fer}~$序列</a>。一棵大小为$~n~$的无根树的$~\text{Pru2fer}~$序列定义为：每次删去编号最小的叶节点并记录唯一与之相邻的编号，直到还剩$~2~$个点所构成的长度为$~n-2~$的序列。容易证明不同无根树的$~\text{Pru2fer}~$序列一定不同。相反的对于每个长度为$~n-2~$数据范围为$~[1,~n]~$的序列，可以唯一构造出一无根棵树，过程自行思考。于是得到了一个$~n~$阶完全图的无根生成树与$~\text{Pru2fer}~$序列的双射。所以$~n~$阶完全图的无根生成树个数为$~n^{n-2}~$，这也就是<a href="https://en.wikipedia.org/wiki/Cayley&#39;s_formula" target="_blank" rel="noopener">$~\text{Cayley}~$公式</a>。<br>显然$~a~$和$~b~$的值并不影响答案。暴力枚举连接$~a~$与$~b~$的简单路径上的点的个数$~x\in[2,~\min(n,~m+1)]~$。先考虑边权部分，对于路径上$~x-1~$条边的边权，这是个很普通的组合数学问题，答案为$~\binom{m-1}{x-1}~$。对于路径外$~n-x~$条边的边权，没有任何限制，答案为$~m^{n-x}~$。对于路径上的点的组合，答案为$~A_{n-2}^{x-2}=\frac{(n-2)!}{(n-x)!}~$。现在问题剩下的部分等价于给定一条$~x~$点的路径的生成树计数问题。<br>不妨设这些点为$~n,~n-1,~\dots,~n-x+1~$。那么这棵树的的$~\text{Pru2fer}~$序列的后$~x-2~$项必为$~n-x+2,~n-x+3,~\dots,~n~$，且倒数第$~x-1~$项必然在$~[n-x+1,~n]~$之中。有了这些限制，合法的$~\text{Pru2fer}~$序列数量为$~x\cdot n^{n-x-1}~$，也就是对应生成树的数量。最终答案公式为</p><script type="math/tex; mode=display">\sum_{x=2}^{\min(n,~m+1)}\frac{x\cdot(n-2)!}{n\cdot(n-x)!}(nm)^{n-x}\binom{m-1}{x-1}</script><p>如果线性预处理完所有数组，时间复杂度可优化至$~O(n+m)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], pownm[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), mul(c, d));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(fact[a], finv[b], finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">pownm[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">pownm[<span class="number">1</span>] = mul(n, m);</span><br><span class="line"><span class="keyword">int</span> nm = mul(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) pownm[i] = mul(pownm[i - <span class="number">1</span>], nm);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= min(n, m + <span class="number">1</span>); ++x)</span><br><span class="line">res = add(res, mul(mul(pownm[n - x], x, inv[n], bino(m - <span class="number">1</span>, x - <span class="number">2</span>)), fact[n - <span class="number">2</span>], finv[n - x]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 539 (Div. 1) (TBC)</title>
      <link href="/2019/02/18/Codeforces%20Round%20539%20(Div.%201)%20(TBC)/"/>
      <url>/2019/02/18/Codeforces%20Round%20539%20(Div.%201)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1109" target="_blank" rel="noopener">Codeforces Round #539 (Div. 1)</a></p><h2 id="A-Sasha-and-a-Bit-of-Relax"><a href="#A-Sasha-and-a-Bit-of-Relax" class="headerlink" title="A. Sasha and a Bit of Relax"></a>A. Sasha and a Bit of Relax</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的序列，问有多少个偶数长度的连续子序列满足前一半的$~\text{xor}~$和等于后一半的$~\text{xor}~$和。<br>数据范围$~2\leq n\leq3\cdot10^5,~0\leq a&lt; 2^{20}~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>条件其实等价于这个区间的$~\text{xor}~$和为$~0~$。注意到数据范围，只需要开一个$~cnt~$数组记录前缀$~\text{xor}~$和，然从前往后扫的过程中更新答案和$~cnt~$即可。时间复杂度为$~O(n)~$，空间复杂度$~O(a)~$。当然用$~\text{map}~$来储存$~cnt~$也可以，这样的时间复杂度为$~O(n\log n)~$，空间复杂度为$~O(n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[<span class="number">1</span> &lt;&lt; <span class="number">20</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], ++cnt[a[i] ^= a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">res += cnt[a[i - <span class="number">1</span>]][i &amp; <span class="number">1</span> ^ <span class="number">1</span>];</span><br><span class="line">--cnt[a[i]][i &amp; <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Sasha-and-One-More-Name"><a href="#B-Sasha-and-One-More-Name" class="headerlink" title="B. Sasha and One More Name"></a>B. Sasha and One More Name</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个回文串，需要切$~k~$刀将其拆成$~k+1~$个连续字串，使得存在一种重新组合是个不同于原串的回文串。输出$~k~$的最小值或不存在。<br>数据范围$~1\leq{\mid s\mid}\leq5000~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然如果前$~\frac{\mid s\mid}{2}~$个字符一样，则$~k~$不存在。否则存在一个前缀和后缀，将它们交换后可以得到一个新的回文串，于是$~1\leq k\leq2~$。暴力枚举判断即可，时间复杂度为$~O(n^2)~$。但是这题可以进一步优化，如果$~k=1~$，由对称性，不妨设在切在前半段，则所切的那一刀必然得到一个偶数长度的回文前缀的前一半，且剩下的后缀也是回文串（或空串）。运用$~\text{Manacher}~$算法可以在线性时间内处理出每个中心所对应的最长回文串。那怎么判断这样的做法得到的新串是否和原串不一样呢？最朴素的方式是运用$~\text{ex-KMP}~$算法。另一种只需要判断切的这一刀的左边，也就是这个回文前缀的的前一半，是否也是个回文串。如果是，则得到的新串必然和原串一样，这个可以自行证明。不论是否运用$~\text{ex-KMP}~$算法，总时间复杂度均为$~O(n)~$。</p><h3 id="代码（-O-n-2-）"><a href="#代码（-O-n-2-）" class="headerlink" title="代码（$~O(n^2)~$）"></a><strong>代码（$~O(n^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(o) o.begin(), o.end()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">string</span> sub = str.substr(<span class="number">0</span>, str.size() &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (*max_element(all(sub)) == *min_element(all(sub)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (!sub.empty()) &#123;</span><br><span class="line"><span class="built_in">string</span> tmp = str.substr(sub.size()) + sub;</span><br><span class="line"><span class="built_in">string</span> pmt = tmp;</span><br><span class="line">reverse(all(pmt));</span><br><span class="line"><span class="keyword">if</span> (tmp == pmt &amp;&amp; str != tmp) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">sub.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn], tmp[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> len[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> str[], <span class="keyword">int</span> n, <span class="keyword">char</span> tmp[], <span class="keyword">int</span> len[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = n + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, ret = <span class="number">1</span>;</span><br><span class="line">tmp[<span class="number">0</span>] = <span class="string">'$'</span>, tmp[<span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>] = str[i], tmp[i + <span class="number">1</span> &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">len[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, mid = <span class="number">1</span>, right = <span class="number">1</span>; i ^ l; ++i)</span><br><span class="line"><span class="keyword">if</span> ((i &gt; right) | (i + (len[i] = len[(mid &lt;&lt; <span class="number">1</span>) - i]) &gt; right)) &#123;</span><br><span class="line"><span class="keyword">for</span> (len[mid = i] = <span class="number">1</span>; tmp[i - len[i]] == tmp[i + len[i]]; ++len[i]);</span><br><span class="line">ret = max(ret, len[i] - <span class="number">1</span>);</span><br><span class="line">right = i + len[i] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_palindrome</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;<span class="keyword">return</span> right - left + <span class="number">2</span> == len[left + right + <span class="number">2</span>];&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">if</span> (*max_element(str, str + (n &gt;&gt; <span class="number">1</span>)) == *min_element(str, str + (n &gt;&gt; <span class="number">1</span>)))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">manacher(str, n, tmp, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i)</span><br><span class="line"><span class="keyword">if</span> (!is_palindrome(<span class="number">0</span>, i) &amp;&amp; is_palindrome(<span class="number">0</span>, i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>) &amp;&amp; is_palindrome(i + <span class="number">1</span> &lt;&lt; <span class="number">1</span>, n - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sasha-and-Interesting-Fact-from-Graph-Theory"><a href="#D-Sasha-and-Interesting-Fact-from-Graph-Theory" class="headerlink" title="D. Sasha and Interesting Fact from Graph Theory"></a>D. Sasha and Interesting Fact from Graph Theory</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多少棵节点编号为$~1,~2,~\dots,~n~$，边权范围为$~[1,~m]~$的树，满足连接$~a~$与$~b~$的简单路径的边权之和为$~m~$。<br>数据范围$~2\leq n\leq10^6,~1\leq m\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>有编号生成树计数问题离不开<a href="https://en.wikipedia.org/wiki/Pr%C3%BCfer_sequence" target="_blank" rel="noopener">$~\text{Pru2fer}~$序列</a>。一棵大小为$~n~$的无根树的$~\text{Pru2fer}~$序列定义为：每次删去编号最小的叶节点并记录唯一与之相邻的编号，直到还剩$~2~$个点所构成的长度为$~n-2~$的序列。容易证明不同无根树的$~\text{Pru2fer}~$序列一定不同。相反的对于每个长度为$~n-2~$数据范围为$~[1,~n]~$的序列，可以唯一构造出一无根棵树，过程自行思考。于是得到了一个$~n~$阶完全图的无根生成树与$~\text{Pru2fer}~$序列的双射。所以$~n~$阶完全图的无根生成树个数为$~n^{n-2}~$，这也就是<a href="https://en.wikipedia.org/wiki/Cayley&#39;s_formula" target="_blank" rel="noopener">$~\text{Cayley}~$公式</a>。<br>显然$~a~$和$~b~$的值并不影响答案。暴力枚举连接$~a~$与$~b~$的简单路径上的点的个数$~x\in[2,~\min(n,~m+1)]~$。先考虑边权部分，对于路径上$~x-1~$条边的边权，这是个很普通的组合数学问题，答案为$~\binom{m-1}{x-1}~$。对于路径外$~n-x~$条边的边权，没有任何限制，答案为$~m^{n-x}~$。对于路径上的点的组合，答案为$~A_{n-2}^{x-2}=\frac{(n-2)!}{(n-x)!}~$。现在问题剩下的部分等价于给定一条$~x~$点的路径的生成树计数问题。<br>不妨设这些点为$~n,~n-1,~\dots,~n-x+1~$。那么这棵树的的$~\text{Pru2fer}~$序列的后$~x-2~$项必为$~n-x+2,~n-x+3,~\dots,~n~$，且倒数第$~x-1~$项必然在$~[n-x+1,~n]~$之中。有了这些限制，合法的$~\text{Pru2fer}~$序列数量为$~x\cdot n^{n-x-1}~$，也就是对应生成树的数量。最终答案公式为</p><script type="math/tex; mode=display">\sum_{x=2}^{\min(n,~m+1)}\frac{x\cdot(n-2)!}{n\cdot(n-x)!}(nm)^{n-x}\binom{m-1}{x-1}</script><p>如果线性预处理完所有数组，时间复杂度可优化至$~O(n+m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], pownm[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), c);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; c, <span class="keyword">const</span> <span class="keyword">int</span>&amp; d)</span> </span>&#123;<span class="keyword">return</span> mul(mul(a, b), mul(c, d));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(fact[a], finv[b], finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">pownm[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">pownm[<span class="number">1</span>] = mul(n, m);</span><br><span class="line"><span class="keyword">int</span> nm = mul(n, m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) pownm[i] = mul(pownm[i - <span class="number">1</span>], nm);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= min(n, m + <span class="number">1</span>); ++x)</span><br><span class="line">res = add(res, mul(mul(pownm[n - x], x, inv[n], bino(m - <span class="number">1</span>, x - <span class="number">2</span>)), fact[n - <span class="number">2</span>], finv[n - x]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 533 (Div. 2)</title>
      <link href="/2019/02/17/Codeforces%20Round%20533%20(Div.%202)/"/>
      <url>/2019/02/17/Codeforces%20Round%20533%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1105" target="_blank" rel="noopener">Codeforces Round #533 (Div. 2)</a></p><h2 id="A-Salem-and-Sticks"><a href="#A-Salem-and-Sticks" class="headerlink" title="A. Salem and Sticks"></a>A. Salem and Sticks</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>, cost = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> aa : a) now += max(<span class="built_in">abs</span>(aa - i) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (now &lt; cost) t = i, cost = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="string">' '</span> &lt;&lt; cost &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Zuhair-and-Strings"><a href="#B-Zuhair-and-Strings" class="headerlink" title="B. Zuhair and Strings"></a>B. Zuhair and Strings</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">128</span>, <span class="number">0</span>), cal(<span class="number">128</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (++cnt[str.front()] == k) ++cal[str.front()], --cnt[str.front()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[i - <span class="number">1</span>]) cnt[str[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ++cnt[str[i]];</span><br><span class="line"><span class="keyword">if</span> (cnt[str[i]] == k) ++cal[str[i]], cnt[str[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="string">'a'</span>; i &lt;= <span class="string">'z'</span>; ++i) res = max(res, cal[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Ayoub-and-Lost-Array"><a href="#C-Ayoub-and-Lost-Array" class="headerlink" title="C. Ayoub and Lost Array"></a>C. Ayoub and Lost Array</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问有多少个长度为$~n~$且取值为$~[l,~r]~$的序列满足总和是$~3~$的倍数。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq l\leq r\leq10^9~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。递推出到每一位上满足总和模$~3~$的余数为$~0,~1,~2~$的序列分别由多少个。这个过程可以用矩阵快速幂优化，总时间复杂度为$~O(\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">3</span>], <span class="keyword">int</span> A[][<span class="number">3</span>], <span class="keyword">int</span> B[][<span class="number">3</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">3</span>; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">3</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> n, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) dp[i] = (r - i + <span class="number">3</span>) / <span class="number">3</span> - (l - i + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">3</span>][<span class="number">3</span>] = &#123;&#123;dp[<span class="number">0</span>], dp[<span class="number">2</span>], dp[<span class="number">1</span>]&#125;, &#123;dp[<span class="number">1</span>], dp[<span class="number">0</span>], dp[<span class="number">2</span>]&#125;, &#123;dp[<span class="number">2</span>], dp[<span class="number">1</span>], dp[<span class="number">0</span>]&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;, tmp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">3</span>; ++i) mat[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, mat, base);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mat[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Kilani-and-the-Game"><a href="#D-Kilani-and-the-Game" class="headerlink" title="D. Kilani and the Game"></a>D. Kilani and the Game</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times m~$的网格图和$~p~$种颜色的初始位置以及扩散速度$~s~$。每回合每种颜色可以按曼哈顿距离扩散至空白处。问最终每种颜色的大小。<br>数据范围$~1\leq m\leq1000,~1\leq m\leq1000,~1\leq p\leq9,~1\leq s\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸$~\text{BFS}~$，具体实现见代码。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; speed(p), res(p, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;pii&gt;&gt; que(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : speed) <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;&gt; vis(n, <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt;(m, <span class="literal">false</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch ^ <span class="string">'.'</span>) &#123;</span><br><span class="line">vis[i][j] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (ch ^ <span class="string">'#'</span>) &#123;</span><br><span class="line">++res[ch - <span class="string">'1'</span>];</span><br><span class="line">que[ch - <span class="string">'1'</span>].push(mp(i, j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; v(<span class="number">4</span>);</span><br><span class="line">v[<span class="number">0</span>] = mp(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">v[<span class="number">1</span>] = mp(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">v[<span class="number">2</span>] = mp(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">v[<span class="number">3</span>] = mp(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ p; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ speed[i]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (que[i].empty()) <span class="keyword">break</span>;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pii&gt; tmp;</span><br><span class="line"><span class="keyword">while</span> (!que[i].empty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> d : v) &#123;</span><br><span class="line"><span class="keyword">int</span> x = que[i].front().ff + d.ff;</span><br><span class="line"><span class="keyword">int</span> y = que[i].front().ss + d.ss;</span><br><span class="line"><span class="keyword">if</span> (!~x || !~y || x == n || y == m || vis[x][y]) <span class="keyword">continue</span>;</span><br><span class="line">vis[x][y] = <span class="literal">true</span>;</span><br><span class="line">++res[i];</span><br><span class="line">tmp.push(mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line">que[i].pop();</span><br><span class="line">&#125;</span><br><span class="line">que[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ p - <span class="number">1</span>; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Helping-Hiasat"><a href="#E-Helping-Hiasat" class="headerlink" title="E. Helping Hiasat"></a>E. Helping Hiasat</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~m~$个字符串，现给出若干个字符串集合，要求选出最多的字符串使得每个集合里至多选一个。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq40,~1\leq{\mid s\mid}\leq40~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然可以通过$~\text{map}~$之类的手段化为一个图上<strong>最大独立集</strong>的问题。而它的<strong>补图</strong>是个<strong>最大团</strong>问题。用$~\text{Bron-Kerbosch}~$算法可以在$~O(3^\frac{m}{3})~$的时间复杂度内解决。总时间复杂度为$~O(n\log\mid s\mid+3^\frac{m}{3})~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> count1_64 __builtin_popcountll</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> low0_64 __builtin_ctzll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">40</span>;</span><br><span class="line">ull adj[maxn];</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bk</span><span class="params">(ull cur, ull allow, ull forbid)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!allow) &#123;</span><br><span class="line"><span class="keyword">if</span> (!forbid) res = max(res, count1_64(cur));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">ull tmp = allow &amp; ~adj[low0_64(allow | forbid)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (<span class="number">1U</span>LL &lt;&lt; i &amp; tmp) &#123;</span><br><span class="line">bk(cur ^ <span class="number">1U</span>LL &lt;&lt; i, allow &amp; adj[i], forbid &amp; adj[i]);</span><br><span class="line">allow ^= <span class="number">1U</span>LL &lt;&lt; i;</span><br><span class="line">forbid ^= <span class="number">1U</span>LL &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line">ull now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> id_ = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (now &amp; <span class="number">1U</span>LL &lt;&lt; i) adj[i] |= now;</span><br><span class="line">now = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (id.find(str) == id.end()) id[str] = id_++;</span><br><span class="line">now |= <span class="number">1U</span>LL &lt;&lt; id[str];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now &amp; <span class="number">1U</span>LL &lt;&lt; i) adj[i] |= now;</span><br><span class="line">adj[i] ^= (<span class="number">1U</span>LL &lt;&lt; m) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">bk(<span class="number">0</span>, (<span class="number">1U</span>LL &lt;&lt; maxn) - <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019 Wannafly Winter Camp Day1 Div1</title>
      <link href="/2019/02/16/2019%20Wannafly%20Winter%20Camp%20Day1%20Div1/"/>
      <url>/2019/02/16/2019%20Wannafly%20Winter%20Camp%20Day1%20Div1/</url>
      
        <content type="html"><![CDATA[<h2 id="A-机器人"><a href="#A-机器人" class="headerlink" title="A. 机器人"></a>A. 机器人</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。注意特殊情况讨论。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, r, m, k, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r &gt;&gt; m &gt;&gt; k &gt;&gt; s;</span><br><span class="line"><span class="keyword">int</span> left[<span class="number">2</span>] = &#123;n, n&#125;, right[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">while</span> (r--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">left[y] = min(left[y], x);</span><br><span class="line">right[y] = max(right[y], x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">flag[<span class="number">1</span>] = flag[n] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos;</span><br><span class="line">flag[pos] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ll = min(left[<span class="number">0</span>], left[<span class="number">1</span>]), rr = max(right[<span class="number">0</span>], right[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> lll = ll, rrr = rr;</span><br><span class="line"><span class="keyword">while</span> (!flag[lll]) --lll;</span><br><span class="line"><span class="keyword">while</span> (!flag[rrr]) ++rrr;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">if</span> (right[<span class="number">1</span>]) &#123;</span><br><span class="line">res = k;</span><br><span class="line"><span class="keyword">if</span> (s &lt; ll) &#123;</span><br><span class="line">lll = left[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (!flag[lll]) --lll;</span><br><span class="line">res += rrr - min(s, lll);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s &gt; rr) &#123;</span><br><span class="line">rrr = right[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span> (!flag[rrr]) ++rrr;</span><br><span class="line">res += max(s, rrr) - lll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">res += rrr - lll;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s &lt; ll) res = rrr - s;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (s &gt; rr) res = s - lll;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ll == rr) res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> res = rrr - lll;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (res &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-吃豆豆"><a href="#B-吃豆豆" class="headerlink" title="B. 吃豆豆"></a>B. 吃豆豆</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~n\times m~$的网格图上，对于格子$~(i,~j)~$，在$~T[i][j]~$的整数倍秒时会由糖果在上面。现给定起点和终点，每秒可以选择上下左右或者不动，然后可以取走当前格子上的糖果，如果存在的话。问要获得$~C~$个糖果的最短时间。<br>数据范围$~1\leq n\leq10,~1\leq m\le10,~1\leq T\leq10,~1\leq C\leq10^{18}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划，记录$~dp[i][j][k]~$表示第$~0~$秒在$~j~$点，第$~i~$秒在$~k~$点最多能得到多少颗糖果，这里$~j~$和$~k~$的范围是$~[0,~nm)~$。枚举$~i~$到$~\gcd(1,~2,~\dots,~10)=2520~$即可，因为第$~2520x~$秒在$~j~$点$~2520x+i~$秒在$~k~$点最多能得到的糖果数也为$~dp[i][j][k]~$。这里我们可以将$~dp[i]~$看作一个$~nm\times nm~$的矩阵，将正常的矩阵乘法中的数值乘法变为加法，数值乘法变为取$~\max~$。于是对于从$~0~$秒到第$~2520x~$秒的最多糖果矩阵，即为$~dp[2520]^x~$。由于可以原地不动，所以从$~(xs,~ys)~$到$~(xt,~yt)~$经过$~t~$秒所能得到的最多糖果数是单调递增的。用带余除法分解$~t=2520x+y~$，于是通过倍增可以求出$~x~$，然后二分$~y~$可以算出最小的$~t~$值。<br>总时间复杂度为$~O(12600n^4+n^6\log C)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> STEP = <span class="number">2520</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mat_size = <span class="number">10000</span> * <span class="keyword">sizeof</span> (__int128);</span><br><span class="line"><span class="keyword">int</span> T[<span class="number">100</span>];</span><br><span class="line">__int128 dp0[<span class="number">100</span>][<span class="number">100</span>], dp1[<span class="number">100</span>][<span class="number">100</span>], dp[STEP + <span class="number">1</span>][<span class="number">100</span>], mat[<span class="number">64</span>][<span class="number">100</span>][<span class="number">100</span>], now[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>], cal[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(__int128&amp; x, <span class="keyword">const</span> __int128&amp; y)</span> </span>&#123;x &lt; y ? (x = y) : <span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(__int128 C[][<span class="number">100</span>], __int128 A[][<span class="number">100</span>], __int128 B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) <span class="keyword">if</span> (~A[i][k] &amp;&amp; ~B[k][j]) update(C[i][j], A[i][k] + B[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(__int128 C[], __int128 A[][<span class="number">100</span>], __int128 B[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">C[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">if</span> (~A[i][j] &amp;&amp; ~B[j]) update(C[i], A[i][j] + B[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cout128</span><span class="params">(__int128 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">9</span>) cout128(x / <span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">int</span>(x % <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; C;</span><br><span class="line"><span class="keyword">int</span> size = n * m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="built_in">cin</span> &gt;&gt; T[i];</span><br><span class="line"><span class="keyword">int</span> xss, yss, xtt, ytt;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; xss &gt;&gt; yss &gt;&gt; xtt &gt;&gt; ytt;</span><br><span class="line"><span class="keyword">int</span> ss = xss * m + yss - m - <span class="number">1</span>, tt = xtt * m + ytt - m - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">100</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">100</span>; ++j) <span class="keyword">if</span> (i ^ j) dp0[i][j] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> step = <span class="number">1</span>; step &lt;= STEP; ++step) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> xs = <span class="number">0</span>; xs ^ n; ++xs) <span class="keyword">for</span> (<span class="keyword">int</span> ys = <span class="number">0</span>; ys ^ m; ++ys) &#123;</span><br><span class="line"><span class="keyword">int</span> s = xs * m + ys;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> xt = <span class="number">0</span>; xt ^ n; ++xt) <span class="keyword">for</span> (<span class="keyword">int</span> yt = <span class="number">0</span>; yt ^ m; ++yt) &#123;</span><br><span class="line"><span class="keyword">int</span> t = xt * m + yt;</span><br><span class="line">dp1[s][t] = dp0[s][t];</span><br><span class="line"><span class="keyword">if</span> (xt) update(dp1[s][t], dp0[s][t - m]);</span><br><span class="line"><span class="keyword">if</span> (yt) update(dp1[s][t], dp0[s][t - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (xt ^ n - <span class="number">1</span>) update(dp1[s][t], dp0[s][t + m]);</span><br><span class="line"><span class="keyword">if</span> (yt ^ m - <span class="number">1</span>) update(dp1[s][t], dp0[s][t + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (~dp1[s][t]) dp1[s][t] += !(step % T[t]);</span><br><span class="line">&#125;</span><br><span class="line">dp[step][s] = dp1[s][tt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memcpy</span>(dp0, dp1, <span class="keyword">sizeof</span> (dp0));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= STEP; ++i) <span class="keyword">if</span> (dp[i][ss] &gt;= C) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(mat[<span class="number">0</span>], dp0, mat_size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) mul(mat[i], mat[i - <span class="number">1</span>], mat[i - <span class="number">1</span>], size);</span><br><span class="line"><span class="keyword">int</span> up = <span class="number">63</span>;</span><br><span class="line"><span class="keyword">while</span> (mat[up][ss][tt] &gt;= C) --up;</span><br><span class="line"><span class="built_in">memcpy</span>(now, mat[up], mat_size);</span><br><span class="line">__int128 X = <span class="number">1L</span>L &lt;&lt; up;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = up - <span class="number">1</span>; ~k; --k) &#123;</span><br><span class="line">mul(tmp, now, mat[k], size);</span><br><span class="line"><span class="keyword">if</span> (tmp[ss][tt] &lt; C) &#123;</span><br><span class="line">X ^= <span class="number">1L</span>L &lt;&lt; k;</span><br><span class="line"><span class="built_in">memcpy</span>(now, tmp, mat_size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = STEP;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">mul(cal, now, dp[mid], size);</span><br><span class="line"><span class="keyword">if</span> (cal[ss] &lt; C) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line">cout128(STEP * X + r);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-拆拆拆数"><a href="#C-拆拆拆数" class="headerlink" title="C. 拆拆拆数"></a>C. 拆拆拆数</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>将$~A~$和$~B~$分别拆成尽量小的$~n~$组，然后组成$~n~$对，使得每对互质。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先猜想$~n\leq 2~$，下面通过奇偶性对于$~\gcd(A,~B)&gt;1~$的情况考虑构造。如果$~2\nmid A,~2\nmid B~$，则拆成$~(2,~A-2),~(B-2,~2)~$是显然满足题意的。剩下的情况不妨设$~2\mid A~$，则$~(3,~A-3),~(B-2,~2)~$和$~(3,~A-3),~(B-4,~4)~$中必有一组是全部互质的。此时只有$~B=5~$的时候会产生非法情况。此时拆成$~(5,~A-5),~(3,~2)~$即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A, B;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line"><span class="keyword">if</span> (__gcd(A, B) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A &lt;&lt; <span class="string">' '</span> &lt;&lt; B &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">if</span> (A &amp; B &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (A == <span class="number">5</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">5</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (A % <span class="number">3</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">2</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; A - <span class="number">4</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (B == <span class="number">5</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">5</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">5</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (B % <span class="number">3</span> != <span class="number">2</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A - <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; <span class="number">4</span> &lt;&lt; <span class="string">'\n'</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; B - <span class="number">4</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-超难的数学题"><a href="#D-超难的数学题" class="headerlink" title="D. 超难的数学题"></a>D. 超难的数学题</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个十进制数是好的，当且仅当它的十进制表示下存在$~3~$个连续的数字满足中间的严格大于两边的。现要求求出最小的$~n~$满足$~1,~2,~\dots,~n~$中好数的比例不小于给定的比例$~p~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设$~f(n)~$为$~[1,~n]~$中好数的个数，则下面想办法构造一个序列$~a~$逼近正确答案。先令$~a_0=122~$为满足$~f=0~$的最大正整数,于是必有$~\frac{f(a_0)}{a_0}&lt; p~$。若$~\frac{f(a_i)}{a_i}&lt; p~$，那么考虑如何将$~a_i~$放大为$~a_{i+1}~$来逼近正确答案。为了不超过正确答案，假设$~(a_i,~a_{i+1}]~$内全是好数，那么必有$~\frac{f(a_i)+a_{i+1}-a_i-1}{a_{i+1}-1}&lt; p~$。同时为了更快的逼近正确答案，有$~\frac{f(a_i)+a_{i+1}-a_i}{a_{i+1}}\geq p~$，于是有</p><script type="math/tex; mode=display">a_{i+1}=\left\lceil\frac{a_i-f(a_i)}{1-p}\right\rceil</script><p>若$~\frac{f(a_i)}{a_i}\geq p~$，则代表此时已经求出答案$~a_i~$。由于$~a~$是严格单增的，在确保有界的情况下，一定存在$~a_i~$为正解。这个序列的逼近速度取决于$~f~$的分布密度和$~p~$的大小，但是过程是类似于牛顿迭代的思想，所以复杂度可以视为大常数$~C~$。<br>下面计算$~f~$，数位$~\text{DP}~$即可。记录$~dp[i][j][0/1]~$表示考虑到第$~i~$位还没有达成好数条件且当前是$~j~$左边有$~0/1~$个数字比$~j~$小的情况数量。这里要用到大整数高精度，在$~100~$位以内就能得出答案。总时间复杂度为$~O(100\cdot10^2\cdot C\cdot\text{BigInteger})~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> BigInteger[] pow10 = <span class="keyword">new</span> BigInteger[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">static</span> BigInteger[][][] dp = <span class="keyword">new</span> BigInteger[<span class="number">100</span>][<span class="number">10</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">double</span> p = in.nextDouble();</span><br><span class="line">BigInteger hunredThousand = <span class="keyword">new</span> BigInteger(<span class="string">"100000"</span>);</span><br><span class="line"><span class="keyword">int</span> pp = (<span class="keyword">int</span>)(p * <span class="number">100000</span> + <span class="number">0.1</span>);</span><br><span class="line">BigInteger ppp = <span class="keyword">new</span> BigInteger(Integer.toString(pp));</span><br><span class="line">BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"122"</span>);</span><br><span class="line">initDP();</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">BigInteger f = func(a);</span><br><span class="line"><span class="keyword">if</span> (f.multiply(hunredThousand).compareTo(a.multiply(ppp)) != -<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">a = a.subtract(f).multiply(hunredThousand).subtract(BigInteger.ONE).divide(hunredThousand.subtract(ppp)).add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(a.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pow10[<span class="number">0</span>] = BigInteger.ONE;</span><br><span class="line">pow10[<span class="number">1</span>] = <span class="keyword">new</span> BigInteger(<span class="string">"10"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="number">100</span>; ++i) &#123;</span><br><span class="line">pow10[i] = pow10[i - <span class="number">1</span>].multiply(pow10[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> BigInteger <span class="title">func</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line">String str = n.toString();</span><br><span class="line"><span class="keyword">int</span> size = str.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != <span class="number">2</span>; ++k) &#123;</span><br><span class="line">dp[i][j][k] = BigInteger.ZERO;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">BigInteger ret = BigInteger.ZERO;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last = (<span class="keyword">int</span>)(str.charAt(<span class="number">0</span>) - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != last; ++i) &#123;</span><br><span class="line">dp[<span class="number">0</span>][i][<span class="number">0</span>] = dp[<span class="number">0</span>][i][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> now = (<span class="keyword">int</span>)(str.charAt(i) - <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != now; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; last) &#123;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i][j][<span class="number">1</span>].add(BigInteger.ONE);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ret = ret.add(pow10[size - i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (now &gt; last) &#123;</span><br><span class="line">++count;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">3</span>) &#123;</span><br><span class="line">ret = ret.add(BigInteger.ONE);</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> != size) &#123;</span><br><span class="line">ret = ret.add(<span class="keyword">new</span> BigInteger(str.substring(i + <span class="number">1</span>, size)));</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">10</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">0</span>) &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(BigInteger.ONE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != j; ++k) &#123;</span><br><span class="line">dp[i][j][<span class="number">1</span>] = dp[i][j][<span class="number">1</span>].add(dp[i - <span class="number">1</span>][k][<span class="number">0</span>]);</span><br><span class="line">ret = ret.add(dp[i - <span class="number">1</span>][k][<span class="number">1</span>].multiply(pow10[size - i - <span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k != <span class="number">10</span>; ++k) &#123;</span><br><span class="line">dp[i][j][<span class="number">0</span>] = dp[i][j][<span class="number">0</span>].add(dp[i - <span class="number">1</span>][k][<span class="number">0</span>]).add(dp[i - <span class="number">1</span>][k][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-流流流动"><a href="#E-流流流动" class="headerlink" title="E. 流流流动"></a>E. 流流流动</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>当$~i\not=1~$且是奇数时，与$~3i+1~$连一条边。偶数时与$~\frac{i}{2}~$连一条边。取点可以得到$~f[i]~$的收益，但是如果一条边的两个端点$~x~$和$~y~$都取了，则会失去$~d[\min(x,~y)]~$。问最大收益。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>根据角谷猜想，图一定是一个森林，于是树形$~01\text{DP}~$即可。时间复杂度为$~O(n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; adj[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v, <span class="keyword">const</span> <span class="keyword">int</span>&amp; w)</span> </span>&#123;adj[u].push_back(make_pair(v, w));&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">biadd</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v, <span class="keyword">const</span> <span class="keyword">int</span>&amp; w)</span> </span>&#123;add(u, v, w); add(v, u, w);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">101</span>], d[<span class="number">101</span>], dp[<span class="number">101</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line">dp[u][<span class="number">1</span>] = f[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!vis[v.first]) &#123;</span><br><span class="line">dfs(v.first);</span><br><span class="line">dp[u][<span class="number">0</span>] += max(dp[v.first][<span class="number">0</span>], dp[v.first][<span class="number">1</span>]);</span><br><span class="line">dp[u][<span class="number">1</span>] += max(dp[v.first][<span class="number">0</span>], dp[v.first][<span class="number">1</span>] - v.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; f[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &amp; <span class="number">1</span> &amp;&amp; i * <span class="number">3</span> + <span class="number">1</span> &lt;= n) biadd(i, i * <span class="number">3</span> + <span class="number">1</span>, d[i]);</span><br><span class="line"><span class="keyword">if</span> (!(i &amp; <span class="number">1</span>)) biadd(i, i &gt;&gt; <span class="number">1</span>, d[i &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">dfs(i);</span><br><span class="line">res += max(dp[i][<span class="number">0</span>], dp[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-爬爬爬山"><a href="#F-爬爬爬山" class="headerlink" title="F.爬爬爬山"></a>F.爬爬爬山</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问带点权边权的单源最短路。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>堆优化的带点权的$~\text{Dijkstra}~$单源最短路，时间复杂度为$~O(m\log m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, h;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; h;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; cost(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">k += h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line"><span class="keyword">if</span> (h &gt; k) cost[i] = (h - k) * (h - k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; adj(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">adj[x].push_back(make_pair(y, z));</span><br><span class="line">adj[y].push_back(make_pair(x, z));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res(n + <span class="number">1</span>);</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;&gt; que;</span><br><span class="line">que.push(make_pair(cost[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[now.second]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.second] = <span class="literal">true</span>;</span><br><span class="line">res[now.second] = now.first;</span><br><span class="line"><span class="keyword">if</span> (now.second == n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : adj[now.second]) que.push(make_pair(now.first + next.second + cost[next.first], next.first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-双重矩阵"><a href="#G-双重矩阵" class="headerlink" title="G. 双重矩阵"></a>G. 双重矩阵</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times m~$的矩阵，以它位子矩阵单位构造一个$x\times y$个该矩阵的大矩阵，问大矩阵最大的子矩阵满足不互质。<br>数据范围$~1\leq n\leq100,~1\leq m\leq100,~1\leq x\leq1000000,~1\leq y\leq1000000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul sz = <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">ul data;</span><br><span class="line">ul vtrees[<span class="number">201</span>][sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ul htree[sz &lt;&lt; <span class="number">1</span>];</span><br><span class="line">ull n, m, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">gcd</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (a) &#123;</span><br><span class="line">a ^= b ^= a ^= b %= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ul tree[], ul pos, ul v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (tree[pos |= sz] = v, pos &gt;&gt;= <span class="number">1</span>; pos; pos &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">tree[pos] = gcd(tree[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tree[pos &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">get</span><span class="params">(<span class="keyword">const</span> ul tree[], ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ul ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (l = l - <span class="number">1</span> | sz, r = r + <span class="number">1</span> | sz; l ^ r ^ <span class="number">1</span>; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (~l &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = gcd(ret, tree[l ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = gcd(ret, tree[r ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">fn</span><span class="params">(ull t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t == n ? x * n : t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">fm</span><span class="params">(ull t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> t == m ? y * m : t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">change(vtrees[j], i, data);</span><br><span class="line">change(vtrees[j], i + n, data);</span><br><span class="line">change(vtrees[j + m], i, data);</span><br><span class="line">change(vtrees[j + m], i + n, data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ull ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul up = <span class="number">1</span>; up &lt;= n; ++up) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul low = up; low &lt;= up + n - <span class="number">1</span>; ++low) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= m + m; ++i) &#123;</span><br><span class="line">change(htree, i, get(vtrees[i], up, low));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ul l = <span class="number">1</span>, r = <span class="number">1</span>; l &lt;= m; ++l) &#123;</span><br><span class="line"><span class="keyword">while</span> (r &lt; l) &#123;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (r &lt; l + m - <span class="number">1</span> &amp;&amp; get(htree, l, r + <span class="number">1</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">++r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (get(htree, l, r) != <span class="number">1</span>) &#123;</span><br><span class="line">ans = <span class="built_in">std</span>::max(ans, fn(low - up + <span class="number">1</span>) * fm(r - l + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-我爱割葱"><a href="#H-我爱割葱" class="headerlink" title="H. 我爱割葱"></a>H. 我爱割葱</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$棵葱，第$~i~$棵的高度为$~a_i~$。定义在高度$~h~$割区间$~[l,~r]~$是合法的，如果对于任意$~i\in[l,~r]~$，均满足$~h\leq a_i~$。割完一刀后将获得下面的部分，且上面的部分不会掉落。现在最多割$~k~$刀，问能获得葱的总长度的最大值。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul sz = <span class="number">128</span>;</span><br><span class="line">ul a[<span class="number">102</span>];</span><br><span class="line">ul least[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">ul n, k;</span><br><span class="line">ul tree[<span class="number">256</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;&gt; paras;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; <span class="built_in">stack</span>;</span><br><span class="line">ul segid[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">ul valid[<span class="number">1000001</span>];</span><br><span class="line">ul idval[<span class="number">101</span>];</span><br><span class="line">ul ans[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">bool</span> already[<span class="number">101</span>][<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">segment</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ul l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">segment(ul a, ul b): l(a), r(b) &#123; &#125;</span><br><span class="line">segment()=<span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt; sons[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">segment bigson[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line">segment bro[<span class="number">102</span>][<span class="number">102</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt;&gt; segstack(<span class="number">1</span>);</span><br><span class="line">segment idseg[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getbroandbigson</span><span class="params">(ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!sons[l][r].size()) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">bigson[l][r] = sons[l][r][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != sons[l][r].size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line">bro[sons[l][r][i - <span class="number">1</span>].l][sons[l][r][i - <span class="number">1</span>].r] = sons[l][r][i];</span><br><span class="line">&#125;</span><br><span class="line">getbroandbigson(sons[l][r][i].l, sons[l][r][i].r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">search</span><span class="params">(ul l, ul r, ul c, ul k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!l || !r || !k) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (already[segid[l][r]][valid[c]][k]) &#123;</span><br><span class="line"><span class="keyword">return</span> ans[segid[l][r]][valid[c]][k];</span><br><span class="line">&#125;</span><br><span class="line">already[segid[l][r]][valid[c]][k] = <span class="literal">true</span>;</span><br><span class="line">ul temp1 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul sonk = <span class="number">0</span>; sonk &lt;= k; ++sonk) &#123;</span><br><span class="line">temp1 = <span class="built_in">std</span>::max(temp1, search(bro[l][r].l, bro[l][r].r, c, k - sonk) + search(bigson[l][r].l, bigson[l][r].r, c, sonk));</span><br><span class="line">&#125;</span><br><span class="line">ul temp2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul sonk = <span class="number">0</span>; sonk &lt; k; ++sonk) &#123;</span><br><span class="line">temp2 = <span class="built_in">std</span>::max(temp2, search(bro[l][r].l, bro[l][r].r, c, k - <span class="number">1</span> - sonk) + search(bigson[l][r].l, bigson[l][r].r, least[l][r], sonk));</span><br><span class="line">&#125;</span><br><span class="line">temp2 += (r - l + <span class="number">1</span>) * (least[l][r] - c);</span><br><span class="line"><span class="keyword">return</span> ans[segid[l][r]][valid[c]][k] = <span class="built_in">std</span>::max(temp1, temp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(ul tree[], ul pos, ul val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (tree[pos |= sz] = val, pos &gt;&gt;= <span class="number">1</span>; pos; pos &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line">tree[pos] = <span class="built_in">std</span>::min(tree[pos &lt;&lt; <span class="number">1</span> | <span class="number">1</span>], tree[pos &lt;&lt; <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">get</span><span class="params">(<span class="keyword">const</span> ul tree[], ul l, ul r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ul ret = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (l = l - <span class="number">1</span> | sz, r = r + <span class="number">1</span> | sz; l ^ r ^ <span class="number">1</span>; l &gt;&gt;= <span class="number">1</span>, r &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (~l &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = <span class="built_in">std</span>::min(ret, tree[l ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r &amp; <span class="number">1</span>) &#123;</span><br><span class="line">ret = <span class="built_in">std</span>::min(ret, tree[r ^ <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">   change(tree, i, a[i]); </span><br><span class="line">&#125;</span><br><span class="line">ul cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ul l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul r = l; r &lt;= n; ++r) &#123;</span><br><span class="line">least[l][r] = get(tree, l, r);</span><br><span class="line"><span class="keyword">if</span> (least[l][r] &gt; a[l - <span class="number">1</span>] &amp;&amp; least[l][r] &gt; a[r + <span class="number">1</span>]) &#123;</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(l, <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(r, <span class="literal">true</span>));</span><br><span class="line">segid[l][r] = cnt;</span><br><span class="line">valid[least[l][r]] = cnt;</span><br><span class="line">idseg[cnt] = segment(l, r);</span><br><span class="line">idval[cnt] = least[l][r];</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(paras.begin(), paras.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; para : paras) &#123;</span><br><span class="line"><span class="keyword">if</span> (para.second) &#123;</span><br><span class="line">ul l = <span class="built_in">stack</span>.back();</span><br><span class="line">ul r = para.first;</span><br><span class="line"><span class="built_in">stack</span>.pop_back();</span><br><span class="line">sons[l][r] = <span class="built_in">std</span>::move(segstack.back());</span><br><span class="line">segstack.pop_back();</span><br><span class="line">segstack.back().push_back(segment(l, r));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>.push_back(para.first);</span><br><span class="line">segstack.push_back(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;segment&gt;());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getbroandbigson(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; search(<span class="number">1</span>, n, <span class="number">0</span>, k) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-起起落落"><a href="#I-起起落落" class="headerlink" title="I. 起起落落"></a>I. 起起落落</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列$~p~$，定义一个奇数长度且至少为$~3~$的子序列$~p_{a_1},~p_{a_2},~\dots,~p_{a_m}~$是持续下降的，如果对于任意$~i~$为偶数，均满足$~p_{a_{i-1}}&gt;p_{a_{i+1}}&gt;p_{a_i}~$。计算出有多少个持续下降子序列。<br>数据范围$~1\leq n\leq100000~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WJR}~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn],t[maxn],e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pos</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> lower_bound(t+<span class="number">1</span>,t+<span class="number">1</span>+e,x) - t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SEG</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> seg[maxn*<span class="number">5</span>],lazy[maxn*<span class="number">5</span>],g[maxn*<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lson</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rson</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(seg,<span class="number">0</span>,<span class="keyword">sizeof</span> seg);</span><br><span class="line"><span class="built_in">memset</span>(lazy,<span class="number">0</span>,<span class="keyword">sizeof</span> seg);</span><br><span class="line"><span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">lazy[lson(v)] += lazy[v];</span><br><span class="line">lazy[rson(v)] += lazy[v];</span><br><span class="line">lazy[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; qr||r &lt; ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">lazy[v] = <span class="number">0</span>;</span><br><span class="line">g[v] = val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">change(l,mid,ql,qr,lson(v),val);</span><br><span class="line">change(mid+<span class="number">1</span>,r,ql,qr,rson(v),val);</span><br><span class="line">pushup(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">seg[v] = (seg[lson(v)] +  <span class="number">1l</span>l * g[lson(v)] * lazy[lson(v)] % mod) % mod;</span><br><span class="line">seg[v] += (seg[rson(v)] + <span class="number">1l</span>l * g[rson(v)] * lazy[rson(v)] % mod) % mod;</span><br><span class="line">seg[v] %= mod;</span><br><span class="line">g[v] = (g[lson(v)] + g[rson(v)]) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr &lt; ql) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l&amp;&amp;r &lt;= qr) &#123;</span><br><span class="line">lazy[v] += val;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l &gt; qr||r &lt; ql) <span class="keyword">return</span>;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) update(l,mid,ql,qr,lson(v),val);</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) update(mid+<span class="number">1</span>,r,ql,qr,rson(v),val);</span><br><span class="line">pushup(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(qr &lt; ql) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ql &lt;= l&amp;&amp;r &lt;= qr)&#123;</span><br><span class="line"><span class="keyword">return</span> (seg[v] + <span class="number">1l</span>l * g[v] * lazy[v] % mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r &lt; ql||l &gt; qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">pushdown(v);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>,mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) res += sum(l,mid,ql,qr,lson(v));</span><br><span class="line"><span class="keyword">if</span>(r &gt; mid) res = (res + sum(mid+<span class="number">1</span>,r,ql,qr,rson(v))) % mod;</span><br><span class="line">pushup(v);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;f;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">memcpy</span>(t,a,<span class="keyword">sizeof</span> a);</span><br><span class="line">e = n;</span><br><span class="line">sort(t+<span class="number">1</span>,t+<span class="number">1</span>+e);</span><br><span class="line">e = unique(t+<span class="number">1</span>,t+<span class="number">1</span>+e) - (t+<span class="number">1</span>);</span><br><span class="line">f.init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n;i &gt;= <span class="number">1</span>;i--) &#123;</span><br><span class="line"><span class="keyword">int</span> v = pos(a[i]);</span><br><span class="line"><span class="keyword">int</span> temp = f.sum(<span class="number">1</span>,e,<span class="number">1</span>,v<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">ans = (ans + temp) % mod;</span><br><span class="line">f.update(<span class="number">1</span>,e,v+<span class="number">1</span>,e,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">f.change(<span class="number">1</span>,e,v,v,<span class="number">1</span>,(temp + <span class="number">1</span>) % mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-夺宝奇兵"><a href="#J-夺宝奇兵" class="headerlink" title="J. 夺宝奇兵"></a>J. 夺宝奇兵</h2><p>有$~n~$个人，他们总共有$~m~$个宝物。现已知每个宝物在谁手上和它的售价，问最少花多少钱买可以使得自己的宝物数量严格大于任何人的宝物数量。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对所有人所持有的宝物排序，然后暴力枚举交易结束后其他人宝物数量的最大值。在这个过程中维护一棵权值线段树，这样每次枚举过程中树上二分即可得到相应的最小花费。我的代码是使用二分权值树状数组，复杂度多一层$~O(\log m)~$，但是常数比权值线段树递归写法小很多，也很方便。权值线段树或权值树状数组二分写法的时间复杂度为$~o((n+m)\log m)~$，下面代码的时间复杂度为$~O((n+m)\log^2m)~$。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> num[maxn], bit2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; have[maxn], flr[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn], bit1[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Input</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Input&gt; input(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input[i].a &gt;&gt; input[i].c;</span><br><span class="line">sort(input.begin(), input.end(), [](Input a, Input b) &#123;<span class="keyword">return</span> a.a &lt; b.a;&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">num[i] = input[i].a;</span><br><span class="line">have[input[i].c].push_back(i);</span><br><span class="line">flr[have[input[i].c].size()].push_back(input[i].c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) sort(have[i].begin(), have[i].end(), greater&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;());</span><br><span class="line"><span class="keyword">int</span> up;</span><br><span class="line"><span class="keyword">for</span> (up = <span class="number">1</span>; flr[up].size(); ++up)</span><br><span class="line">cnt[up] = cnt[up - <span class="number">1</span>] + flr[up].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxn; j += lowbit(j))</span><br><span class="line">++bit1[j], bit2[j] += num[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = up; cnt[up - <span class="number">1</span>] - cnt[i - <span class="number">1</span>] &lt;= i &amp;&amp; i; --i) &#123;</span><br><span class="line"><span class="keyword">int</span> rem = i - cnt[up - <span class="number">1</span>] + cnt[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : flr[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = have[j][i - <span class="number">1</span>];</span><br><span class="line">tot += num[idx];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = idx; k &lt; maxn; k += lowbit(k))</span><br><span class="line">--bit1[k], bit2[k] -= num[idx];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> now = tot;</span><br><span class="line"><span class="keyword">if</span> (rem) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = maxn;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = mid; k; k -= lowbit(k)) sum += bit1[k];</span><br><span class="line"><span class="keyword">if</span> (sum &lt; rem) l = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = r; k; k -= lowbit(k)) now += bit2[k];</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-星球大战"><a href="#K-星球大战" class="headerlink" title="K. 星球大战"></a>K. 星球大战</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点$~m~$条边的简单连通图，定义两点间的距离为连接连点的简单路径的最小值。现给定邪恶势力的起点位置，需要找到一个正义势力的起点位置，使得势力扩散后最终邪恶势力的数量最少。对于每个点，如果它离邪恶势力的距离严格小于离正义势力的距离，则最终会变为邪恶势力，否则变为正义势力或者保持中立。输出邪恶势力最终数量的最小值。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>问$~\text{WSY}~$。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> llf = <span class="keyword">long</span> <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> lf = <span class="keyword">double</span>;</span><br><span class="line"><span class="keyword">using</span> vul = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt;;</span><br><span class="line"></span><br><span class="line">vul edges[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul father[ul(<span class="number">1e5</span> + <span class="number">1</span>)][<span class="number">18</span>];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; sons[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul n, m;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;ul&gt; <span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">bool</span> already[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;ul&gt; special;</span><br><span class="line">ul disspecial[<span class="number">202</span>][ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul dis1[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul left[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line">ul right[ul(<span class="number">1e5</span> + <span class="number">1</span>)];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;&gt; paras;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">calcfather</span><span class="params">(ul x, ul lg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (~father[x][lg]) &#123;</span><br><span class="line"><span class="keyword">return</span> father[x][lg];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> father[x][lg] = calcfather(calcfather(x, lg - <span class="number">1</span>), lg - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">getfather</span><span class="params">(ul x, ul step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (ul lg = <span class="number">0</span>; step; step &gt;&gt;= <span class="number">1</span>, ++lg) &#123;</span><br><span class="line"><span class="keyword">if</span> (step &amp; <span class="number">1</span>) &#123;</span><br><span class="line">x = calcfather(x, lg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">search</span><span class="params">(ul x, ul cnt)</span> </span>&#123;</span><br><span class="line">left[x] = cnt;</span><br><span class="line"><span class="keyword">for</span> (ul son : sons[x]) &#123;</span><br><span class="line">cnt = search(son, cnt + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">right[x] = cnt;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">0</span>; j != <span class="number">18</span>; ++j) &#123;</span><br><span class="line">father[i][j] = ~ul(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line">ul u, v;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;u, &amp;v);</span><br><span class="line">edges[u].push_back(v);</span><br><span class="line">edges[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>.push(<span class="number">1</span>);</span><br><span class="line">already[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">father[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">queue</span>.size()) &#123;</span><br><span class="line">ul curr = <span class="built_in">queue</span>.front();</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br><span class="line"><span class="keyword">for</span> (ul nex : edges[curr]) &#123;</span><br><span class="line"><span class="keyword">if</span> (father[curr][<span class="number">0</span>] == nex) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (already[nex]) &#123;</span><br><span class="line">special.push_back(curr);</span><br><span class="line">special.push_back(nex);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">father[nex][<span class="number">0</span>] = curr;</span><br><span class="line">sons[curr].push_back(nex);</span><br><span class="line"><span class="built_in">queue</span>.push(nex);</span><br><span class="line">already[nex] = <span class="literal">true</span>;</span><br><span class="line">dis1[nex] = dis1[curr] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::sort(special.begin(), special.end());</span><br><span class="line">special.resize(<span class="built_in">std</span>::unique(special.begin(), special.end()) - special.begin());</span><br><span class="line">search(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != special.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">disspecial[i][j] = ~ul(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>.push(special[i]);</span><br><span class="line">disspecial[i][special[i]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">queue</span>.size()) &#123;</span><br><span class="line">ul curr = <span class="built_in">queue</span>.front();</span><br><span class="line"><span class="built_in">queue</span>.pop();</span><br><span class="line"><span class="keyword">for</span> (ul nex : edges[curr]) &#123;</span><br><span class="line"><span class="keyword">if</span> (~disspecial[i][nex]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">disspecial[i][nex] = disspecial[i][curr] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>.push(nex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ul ans = n;</span><br><span class="line"><span class="keyword">for</span> (ul white = <span class="number">2</span>; white &lt;= n; ++white) &#123;</span><br><span class="line">paras.resize(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != special.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis1[special[i]] &lt; disspecial[i][white]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ul temp = getfather(special[i], dis1[special[i]] - disspecial[i][white] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(left[temp], <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(right[temp], <span class="literal">true</span>));</span><br><span class="line">&#125;</span><br><span class="line">ul temp = getfather(white, dis1[white] &gt;&gt; <span class="number">1</span>);</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(left[temp], <span class="literal">false</span>));</span><br><span class="line">paras.push_back(<span class="built_in">std</span>::pair&lt;ul, <span class="keyword">bool</span>&gt;(right[temp], <span class="literal">true</span>));</span><br><span class="line"><span class="built_in">std</span>::sort(paras.begin(), paras.end());</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line">ul st = <span class="number">0</span>;</span><br><span class="line">ul prev = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; para : paras) &#123;</span><br><span class="line"><span class="keyword">if</span> (!st) &#123;</span><br><span class="line">prev = para.first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (para.second) &#123;</span><br><span class="line">--st;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!st) &#123;</span><br><span class="line">temp += para.first - prev + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="built_in">std</span>::min(ans, n - temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 训练笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RMQ与LCA与ST表 (TBC)</title>
      <link href="/2019/02/15/RMQ%E4%B8%8ELCA%E4%B8%8EST%E8%A1%A8%20(TBC)/"/>
      <url>/2019/02/15/RMQ%E4%B8%8ELCA%E4%B8%8EST%E8%A1%A8%20(TBC)/</url>
      
        <content type="html"><![CDATA[<h2 id="RMQ"><a href="#RMQ" class="headerlink" title="RMQ"></a>RMQ</h2><p>区间最值查询$~\text{Range Minimun/Maximun Query}~$，简称$~\text{RMQ}~$。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a><strong>线段树</strong></h3><p>线段树是解决$~\text{RMQ}~$问题最普通的办法，时间复杂度为预处理$~O(n)~$，单次询问$~O(\log n)~$。支持在线。同时也支持$~O(\log n)~$的区间修改的动态$~\text{RMQ}~$问题。下面模板的区间均为左开右闭，角标从$~0~$开始。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index] = min(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index] = a[begin];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line"><span class="keyword">if</span> (index &lt; maxn)) &#123;</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">&#125;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">seg[index] = min(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">return</span> min(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表"><a href="#ST表" class="headerlink" title="ST表"></a><strong>ST表</strong></h3><p>如果只有静态查询，那么考虑这样一个数组：记$~st[i][j]~$为$~[i,~i+2^j)~$的最值。那么需要$~O(n\log n)~$的空间。显然$~st[i][0]=a[i]~$。且对于其它项，可以将区间$~[i,~i+2^j)~$二分为$~[i,~i+2^{j-1})~$和$~[i+2^{j-1},~i+2^j)~$，也就是通过$~st[i][j-1]~$和$~st[i+2^{j-1}][j-1]~$来$~O(1)~$地转移。那么对于任意的询问区间$~[l,~r)~$，记$~k=\lfloor\log(r-l)\rfloor~$，均可划分为$~[l,~l+2^k)~$和$~[r-2^k,~r)~$这两个子问题来解决。时间复杂度为预处理$~O(n\log n)~$，单次询问$~O(1)~$。支持在线。下面模板的角标从$~0~$开始。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="keyword">int</span> a[maxn], st[maxn][pow2 + <span class="number">1</span>], log2_floor[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">st_init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">log2_floor[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) log2_floor[i] = log2_floor[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) st[i][<span class="number">0</span>] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2_floor[n]; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + (<span class="number">1</span> &lt;&lt; i) ^ n; ++j)</span><br><span class="line">st[j][i] = min(st[j][i - <span class="number">1</span>], st[j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rmq</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; l, <span class="keyword">const</span> <span class="keyword">int</span>&amp; r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = log2_floor[r - l];</span><br><span class="line"><span class="keyword">return</span> min(st[l][k], st[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LCA"><a href="#LCA" class="headerlink" title="LCA"></a>LCA</h2><p>最近公共祖先$~\text{Lowest Common Ancestors}~$，简称$~\text{LCA}~$。</p><h3 id="倍增"><a href="#倍增" class="headerlink" title="倍增"></a><strong>倍增</strong></h3><p>类似于$~\text{ST}~$表的$~\text{DP}~$思想，记$~pa[i][j]~$为节点$~i~$的第$~2^j~$级祖先。为防止溢出，根节点的父亲依然是根节点。现在$~\text{DFS}~$过程中处理出$~pa[i][0]~$，对于其它项，有$~O(1)~$的转移式</p><script type="math/tex; mode=display">pa[i][j]=pa[pa[i][j-1]][j-1]</script><p>这里的时间复杂度和空间复杂度均为$~O(\log n)~$。那么可以用类似快速幂的方式，可以在$~O(\log n)~$的时间内查询任意点的任意级祖先。查询$~\text{LCA}~$时，先将较深的点上升到与另一点等高，然后在保持两点不一样的条件下，将两个点上升至$~\text{LCA}~$的两个儿子处。时间复杂度为预处理$~O(n\log n)~$，单次查询$~O(\log n)~$。支持在线。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> pa[maxn][pow2], dep[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">1</span>, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">dep[u] = d;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ pow2; ++i) pa[u][i] = pa[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) dfs(v, u, d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &gt; dep[u]) swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = dep[v] - dep[u], i = <span class="number">0</span>; k; k &gt;&gt;= <span class="number">1</span>, ++i) <span class="keyword">if</span> (k &amp; <span class="number">1</span>) u = pa[u][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pow2 - <span class="number">1</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] ^ pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ST表-1"><a href="#ST表-1" class="headerlink" title="ST表"></a><strong>ST表</strong></h3><p>首先引入一个叫<strong>欧拉序</strong>的概念，在$~\text{DFS}~$序的基础上，将回溯过程中经过的点也加入到序列之中，则构成了欧拉序。容易证明，序列的长度为$~2n-1~$，且一个节点是叶节点当且仅当它只在欧拉序中出现一次。那么对于非叶节点$~u~$，它在欧拉序中出现至少$~2~$次，那么节点$~v~$是$~u~$的后代，当且仅当$~v~$在欧拉序中，被$~2~$个$~u~$包含。于是对于欧拉序上两个点的$~\text{LCA}~$问题，可以等价于这两个节点构成的闭区间的$~\text{LCA}~$问题，且$~\text{LCA}~$必出现在这个闭区间之中。和$~\text{RMQ}~$问题一样，这类问题是保偏序的。所以可以用$~\text{ST}~$表来支持$~O(n\log n)~$的预处理和$~O(1)~$的单次在线查询。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pow2 = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; pow2;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn &lt;&lt; <span class="number">1</span>][pow2 + <span class="number">1</span>], dep[maxn], euler[maxn], log2_floor[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> euler_clock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">st[++euler_clock][<span class="number">0</span>] = u;</span><br><span class="line">euler[u] = euler_clock;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) &#123;</span><br><span class="line">dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">dfs(v, u);</span><br><span class="line">st[++euler_clock][<span class="number">0</span>] = u;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> dep[x] &lt; dep[y];&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">upper</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;<span class="keyword">return</span> cmp(x, y) ? x : y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lca_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log2_floor[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= euler_clock; ++i) log2_floor[i] = log2_floor[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= log2_floor[euler_clock]; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + (<span class="number">1</span> &lt;&lt; i) ^ euler_clock + <span class="number">1</span>; ++j)</span><br><span class="line">st[j][i] = upper(st[j][i - <span class="number">1</span>], st[j + (<span class="number">1</span> &lt;&lt; i - <span class="number">1</span>)][i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line">u = euler[u];</span><br><span class="line">v = euler[v];</span><br><span class="line"><span class="keyword">if</span> (u &gt; v) swap(u, v);</span><br><span class="line"><span class="keyword">int</span> temp = log2_floor[++v - u];</span><br><span class="line"><span class="keyword">return</span> upper(st[u][temp], st[v - (<span class="number">1</span> &lt;&lt; temp)][temp]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> RMQ </tag>
            
            <tag> LCA </tag>
            
            <tag> ST表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Global Round 1 (TBC)</title>
      <link href="/2019/02/15/Codeforces%20Global%20Round%201%20(TBC)/"/>
      <url>/2019/02/15/Codeforces%20Global%20Round%201%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1110" target="_blank" rel="noopener">Codeforces Global Round 1</a></p><h2 id="A-Parity"><a href="#A-Parity" class="headerlink" title="A. Parity"></a>A. Parity</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问一个$~k~$位$~b~$进制数的奇偶性。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, k, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; k;</span><br><span class="line">b &amp;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (--k) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">res ^= a &amp; <span class="number">1</span> &amp; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">res ^= a &amp; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (res) <span class="built_in">cout</span> &lt;&lt; <span class="string">"odd"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"even"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Tape"><a href="#B-Tape" class="headerlink" title="B. Tape"></a>B. Tape</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要求使用$~k~$个区间覆盖$~n~$个点，输出区间长度总和的最小值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。贪心。差分序列排序即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(n), d(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : b) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) d[i] = b[i] - b[i - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">sort(d.begin(), d.end());</span><br><span class="line"><span class="keyword">int</span> res = b.back() - b.front() + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i ^ n; ++i) res -= d[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Meaningless-Operations"><a href="#C-Meaningless-Operations" class="headerlink" title="C. Meaningless Operations"></a>C. Meaningless Operations</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义$~f(a)=\max{\gcd(a\oplus b,~a\odot b)\mid0&lt; b&lt; a}~$其中$~\oplus~$和$~\odot~$分别是位运算中的异或$~\text{xor}~$和与$~\text{and}~$。一共$~q~$次询问，输出对应的$~f(a)~$。<br>数据范围$~1\leq q\leq10^3,~2\leq a\leq2^{25}-1~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>可以发现将$~a~$二进制表示后，如果不全为$~1~$，则$~f(a)~$即为全为$~1~$的数值（取$~b~$为$~a~$的补位）。否则$~f(a)~$为$~a~$的最大非$~a~$因子。具体证明过程可自行考虑。那么只需要预处理所有$~2^n-1~$即可。用$~\text{map}~$储存预处理数值并用$~\text{__builtin}~$优化位运算，总时间复杂度为$~O(\sqrt{a}+q\log a)~$。当然也可以打表后用数组储存答案，时间复杂度可以优化至$~O(q)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">25</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="number">1</span> &lt;&lt; i) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>, k = <span class="built_in">sqrt</span>(x + <span class="number">0.1</span>); j &lt;= k; ++j) <span class="keyword">if</span> (!(x % j)) &#123;</span><br><span class="line">res[x] = x / j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.find(x) == res.end()) res[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span> x = (<span class="number">1</span> &lt;&lt; <span class="number">32</span> - __builtin_clz(a)) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x ^ a) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; res[x] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Jongmah"><a href="#D-Jongmah" class="headerlink" title="D. Jongmah"></a>D. Jongmah</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>麻将模拟，问最多能凑出多少副顺子或者刻子。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。每个数字如果作为顺子计算，那么只有$~3~$种位置供选择。而若某一位置上这个数字作为顺子出现的次数大于$~2~$，那么对于$~3k~$个一样的顺子，可以化为$~3k~$个刻子。那么对于每一个数字，它前$~2~$个数字的状态总数则是$~3\times3=9~$种，每次转移要计算$~3~$次，这样总时间复杂度为$~O(3^3m)~$。可以用滚动数组优化空间。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(m, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++cnt[--a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">3</span>][<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) &#123;</span><br><span class="line"><span class="built_in">memset</span>(dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>], <span class="number">0</span>, <span class="number">9</span> * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">3</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">3</span>; ++k) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l ^ <span class="number">3</span>; ++l) </span><br><span class="line"><span class="keyword">if</span> (j + k + l &lt;= cnt[i])</span><br><span class="line">dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][k][l] = max(dp[i &amp; <span class="number">1</span> ^ <span class="number">1</span>][k][l], dp[i &amp; <span class="number">1</span>][j][k] + l + (cnt[i] - j - k - l) / <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[m &amp; <span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Magic-Stones"><a href="#E-Magic-Stones" class="headerlink" title="E. Magic Stones"></a>E. Magic Stones</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于一个长度为$~n~$的序列，可以对非端点元素如下操作：将$~c_i~$变为$~c_{i+1}+c_{i-1}-c_i~$。现给定两个序列$~c~$和$~t~$，问$~c~$能否经过若干次操作变成$~t~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑差分序列，不难发现每次操作则是交换差分序列相邻的两个元素。只需要将差分序列排序比较即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : b) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) a[i] -= a[i - <span class="number">1</span>], b[i] -= b[i - <span class="number">1</span>];</span><br><span class="line">sort(a.begin() + <span class="number">1</span>, a.end());</span><br><span class="line">sort(b.begin() + <span class="number">1</span>, b.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (a == b ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Nearest-Leaf"><a href="#F-Nearest-Leaf" class="headerlink" title="F. Nearest Leaf"></a>F. Nearest Leaf</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>编号按照$~\text{DFS}~$序给出一棵边权树，两点之间的距离定义为简单路径的权值和。每次询问编号$~[l,~r]~$内与$~v~$最近的叶子的距离。<br>数据范围$~3\leq n\leq500000,~1\leq q\leq500000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将问题离线，对于$~v=1~$的询问，叶节点的距离保留，其余距离设为$~\inf~$，这样可以用一棵最值线段树来询问最短距离。由$~\text{DFS}~$序的性质，每个节点的子树的编号均为序列上的一个闭区间，那么在$~\text{DFS}~$的过程中，区间修改，就能对所有的节点进行询问。总时间复杂度为$~O((n+q)\log n)~$。注意需要快读。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; son[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; ask[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[maxn], res[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> check[maxn];</span><br><span class="line"><span class="keyword">int</span> n, now, index[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">now = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : son[u]) &#123;</span><br><span class="line">dis[e.first] = dis[u] + e.second;</span><br><span class="line">dfs1(e.first);</span><br><span class="line">&#125;</span><br><span class="line">index[u] = now;</span><br><span class="line">check[u] = son[u].empty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index] =  min(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index] = check[end] ? dis[end] : <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">return</span> min(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">seg[index] = min(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> q : ask[u]) res[q.second] = query(<span class="number">0</span>, n, <span class="number">1</span>, q.first.first - <span class="number">1</span>, q.first.second);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : son[u]) &#123;</span><br><span class="line">tag[<span class="number">1</span>] += e.second;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, e.first - <span class="number">1</span>, index[e.first], -(e.second &lt;&lt; <span class="number">1</span>));</span><br><span class="line">dfs2(e.first);</span><br><span class="line">tag[<span class="number">1</span>] -= e.second;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, e.first - <span class="number">1</span>, index[e.first], e.second &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; w;</span><br><span class="line">son[p].push_back(make_pair(i, w));</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>);</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> v, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v &gt;&gt; l &gt;&gt; r;</span><br><span class="line">ask[v].push_back(make_pair(make_pair(l, r), i));</span><br><span class="line">&#125;</span><br><span class="line">dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 59 (Rated for Div. 2) (TBC)</title>
      <link href="/2019/02/14/Educational%20Codeforces%20Round%2059%20(Rated%20for%20Div.%202)%20(TBC)/"/>
      <url>/2019/02/14/Educational%20Codeforces%20Round%2059%20(Rated%20for%20Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1107" target="_blank" rel="noopener">Educational Codeforces Round 59 (Rated for Div. 2)</a></p><h2 id="A-Digits-Sequence-Dividing"><a href="#A-Digits-Sequence-Dividing" class="headerlink" title="A. Digits Sequence Dividing"></a>A. Digits Sequence Dividing</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.size() == <span class="number">2</span> &amp;&amp; str.front() &gt;= str.back())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; str.front() &lt;&lt; <span class="string">' '</span> &lt;&lt; str.substr(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Digital-root"><a href="#B-Digital-root" class="headerlink" title="B. Digital root"></a>B. Digital root</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于任意正整数$~x~$，将其十进制表示下的所有位的数字相加得到新的数字$~\bar{x}~$，不断操作下去，最终会得到一个个位数，记为$~S(x)~$。问第$~k~$大的满足$~S=x~$的数是多少。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。不难发现每次操作均满足$~x=\bar{x}\mod9~$。于是答案即为$~9(k-1)+x~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> k, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (k - <span class="number">1</span>) * <span class="number">9</span> + x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Brutality"><a href="#C-Brutality" class="headerlink" title="C. Brutality"></a>C. Brutality</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串和同样长度的数值序列，字符串中每段连续的同字母字串所对应的数值序列中，最多取$~k~$个数，问最大的取值之和。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。直接模拟，用$~\text{mulitset}~$或者$~\text{priority_queue}~$维护均可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'#'</span>);</span><br><span class="line">a.push_back(<span class="number">0</span>);</span><br><span class="line">++n;</span><br><span class="line">priority_queue&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; heap;</span><br><span class="line">heap.push(a.front());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[i - <span class="number">1</span>]) &#123;</span><br><span class="line">cnt = k;</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) &#123;</span><br><span class="line">res += heap.top();</span><br><span class="line"><span class="keyword">if</span> (!--cnt) <span class="keyword">break</span>;</span><br><span class="line">heap.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) heap.pop();</span><br><span class="line">&#125;</span><br><span class="line">heap.push(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Compression"><a href="#D-Compression" class="headerlink" title="D. Compression"></a>D. Compression</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n\times n~$的$~01~$矩阵，问$~n~$的最大因子$~x~$，满足把大矩阵划分为$~\frac{n}{x}\times\frac{n}{x}~$个$~x\times x~$的小矩阵之后，所有的小矩阵均只有一个值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p><del>水题？</del>直接对每行每列取$~\gcd~$即可。没看标解也看不懂标解。<del>所以这场比赛有$~4~$个签到题？</del></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5200</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; row[maxn], column[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="built_in">bitset</span>&lt;maxn&gt;&amp; bit, <span class="keyword">const</span> <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> last = !bit[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (last ^ bit[i]) &#123;</span><br><span class="line">ret = __gcd(ret, cnt);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">++cnt;</span><br><span class="line">last = bit[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> __gcd(ret, cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n &gt;&gt; <span class="number">2</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="built_in">isdigit</span>(str[j]) ? str[j] - <span class="string">'0'</span> : str[j] - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">4</span>; ++k) <span class="keyword">if</span> (x &amp; <span class="number">1</span> &lt;&lt; <span class="number">3</span> - k) row[i].flip(j &lt;&lt; <span class="number">2</span> ^ k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n; ++j) <span class="keyword">if</span> (row[i][j]) column[j].flip(i);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) res = __gcd(res, __gcd(calc(row[i], n), calc(column[i], n)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Vasya-and-Maximum-Profit"><a href="#G-Vasya-and-Maximum-Profit" class="headerlink" title="G. Vasya and Maximum Profit"></a>G. Vasya and Maximum Profit</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两序列$~d_1,~d_2,~\dots,~d_n~$和$~c_1,~c_2,~\dots,~c_n~$，其中$~d~$严格单增。并定义</p><script type="math/tex; mode=display">gap(l,~r)=\begin{cases}\max_{l\leq i< r}(d_{i+1}-d_i)^2    &\text{$l< r$}  \\0                                   &\text{$l=r$}\end{cases}</script><p>对于区间$~[l,~r]~$的价值，计算公式为</p><script type="math/tex; mode=display">(r-l+1)a-\sum_{i=l}^{r}c_i-gap(l,~r)</script><p>问最大价值。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先预处理$~(d_{i+1}-d_i)^2~$数组。考虑每个区间所对应的$~gap~$在该数组中的位置。用<strong>单调栈</strong>可以线性预处理出$~(d_{i+1}-d_i)^2~$在该数组中，左右边第一个比它大的位置。那么对于取到$~gap(l,~r)=(d_{i+1}-d_i)^2~$的区间$~[l,~r]~$。可以$~O(1)~$地确认区间的左右边界。暴力枚举每个$~(d_{i+1}-d_i)^2~$，接下来就是一个<strong>线段树维护区间求和的最大值</strong>问题了，在普通区间求和线段树的基础上，每个节点还需要维护包含左端点的最大区间和和包含右端点的最大区间和。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d[maxn], c[maxn], del[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum, left, right;</span><br><span class="line">&#125; tree[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line"><span class="keyword">if</span> ((tree[index].sum = c[begin]) &gt; <span class="number">0</span>) tree[index].left = tree[index].right = c[begin];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid + <span class="number">1</span>, end, rson);</span><br><span class="line">tree[index].sum = tree[lson].sum + tree[rson].sum;</span><br><span class="line">tree[index].left = max(tree[lson].left, tree[lson].sum + tree[rson].left);</span><br><span class="line">tree[index].right = max(tree[rson].right, tree[rson].sum + tree[lson].right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_sum</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].sum;</span><br><span class="line"><span class="keyword">return</span> query_sum(left, right, begin, mid, lson) + query_sum(left, right, mid + <span class="number">1</span>, end, rson);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_left</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0xc0c0c0c0c0c0c0c0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].left;</span><br><span class="line"><span class="keyword">return</span> max(query_left(left, right, begin, mid, lson), query_sum(left, right, begin, mid, lson) + query_left(left, right, mid + <span class="number">1</span>, end, rson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query_right</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; end || right &lt; begin) <span class="keyword">return</span> <span class="number">0xc0c0c0c0c0c0c0c0</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) <span class="keyword">return</span> tree[index].right;</span><br><span class="line"><span class="keyword">return</span> max(query_right(left, right, mid + <span class="number">1</span>, end, rson), query_sum(left, right, mid + <span class="number">1</span>, end, rson) + query_right(left, right, begin, mid, lson));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; d[i] &gt;&gt; c[i], c[i] = a - c[i];</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) del[i] = (d[i + <span class="number">1</span>] - d[i]) * (d[i + <span class="number">1</span>] - d[i]);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty() &amp;&amp; del[tmp.top()] &lt; del[i]) &#123;</span><br><span class="line">seg[tmp.top()].second = i;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line">tmp.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty()) &#123;</span><br><span class="line">seg[tmp.top()].second = n;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty() &amp;&amp; del[tmp.top()] &lt; del[i]) &#123;</span><br><span class="line">seg[tmp.top()].first = i + <span class="number">1</span>;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line">tmp.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty()) &#123;</span><br><span class="line">seg[tmp.top()].first = <span class="number">1</span>;</span><br><span class="line">tmp.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = max(res, c[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i)</span><br><span class="line">res = max(res, query_right(seg[i].first, i, <span class="number">1</span>, n, <span class="number">1</span>) + query_left(i + <span class="number">1</span>, seg[i].second, <span class="number">1</span>, n, <span class="number">1</span>) - del[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JOISC 2014 Day3 电压</title>
      <link href="/2019/02/14/JOISC%202014%20Day3%20%E7%94%B5%E5%8E%8B/"/>
      <url>/2019/02/14/JOISC%202014%20Day3%20%E7%94%B5%E5%8E%8B/</url>
      
        <content type="html"><![CDATA[<p><a href="https://loj.ac/problem/2881" target="_blank" rel="noopener">LOJ2881</a></p><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~N~$个点$~M~$条边的无自环但可能有重边不连通的图，问有多少条边满足：存在一种点的二染色，使得其余其它$~M-1~$条边的端点均被二染色，但该边为单染色。<br>数据范围$~2\leq N\leq10^5,~1\leq M\leq2\times10^5~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>一条边满足题意当且仅当图中的所有奇环均包含该边且所有偶环均不包含该边。考虑$~\text{DFS}~$生成树，记<strong>链</strong>为以树上某点和它某祖先的简单路劲。那么途中的所有环均由这棵$~\text{DFS}~$树上的一条链和不在树上的一条边组成。这样树上满足题意的边为奇环链的交减去偶环链的并，树外若也有边满足题意当且仅当改图只有一个奇环链。链交和链并可以用两个树上差分解决。在$~\text{DFS}~$过程中点$~u~$的相邻点$~v~$已经遍历过，且不是通过$~u~$的父亲遍历到$~u~$的那条边，那么$~v~$必为$~u~$的祖先或后代。若为祖先，则确定了一个环，通过$~u~$和$~v~$的深度可以确定环的奇偶性。如果是奇环，则在点$~u~$的链交差分数组上加$~1~$，在点$~v~$的链并差分数组上减$~1~$。那么最后在自下往上的遍历过程中展开差分，对于权值等于奇环链数量的点，它连向它父亲的边必在链交之中。同理对链并的差分数组同样操作，判断时对于正权值的点，它连向它父亲的边必在链并之中。这样最后的总复杂度为$~O(N+M)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], check[maxn], use[maxn], flag;</span><br><span class="line"><span class="keyword">int</span> dep[maxn], even[maxn], odd[maxn], cnt, tot, cal;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line"><span class="keyword">if</span> (vis[v]) &#123;</span><br><span class="line"><span class="keyword">if</span> (v == p &amp;&amp; !check[u]) &#123;</span><br><span class="line">check[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> ((dep[u] ^ dep[v]) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">++even[u];</span><br><span class="line">--even[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>));</span><br><span class="line">++cnt;</span><br><span class="line">++odd[u];</span><br><span class="line">--odd[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">++tot;</span><br><span class="line">dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">dfs1(v, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">use[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!use[v]) &#123;</span><br><span class="line">dfs2(v);</span><br><span class="line">even[u] += even[v];</span><br><span class="line">odd[u] += odd[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (even[u]) --tot;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (odd[u] == cnt) ++cal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">cnt = cal = <span class="number">0</span>;</span><br><span class="line">dfs1(i, <span class="number">0</span>);</span><br><span class="line">dfs2(i);</span><br><span class="line"><span class="keyword">if</span> (cnt) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">res = cal;</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">1</span>) ++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) res = tot;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> DFS树 </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 536 (Div. 2)</title>
      <link href="/2019/02/14/Codeforces%20Round%20536%20(Div.%202)/"/>
      <url>/2019/02/14/Codeforces%20Round%20536%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1106" target="_blank" rel="noopener">Codeforces Round #536 (Div. 2)</a></p><h2 id="A-Lunar-New-Year-and-Cross-Counting"><a href="#A-Lunar-New-Year-and-Cross-Counting" class="headerlink" title="A. Lunar New Year and Cross Counting"></a>A. Lunar New Year and Cross Counting</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> mat[<span class="number">1</span> &lt;&lt; <span class="number">9</span>][<span class="number">1</span> &lt;&lt; <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(mat, <span class="string">'.'</span>, <span class="keyword">sizeof</span> (mat));</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line"><span class="keyword">if</span> (mat[i][j] == <span class="string">'X'</span> &amp;&amp; mat[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i - <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i + <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">'X'</span> &amp;&amp; mat[i + <span class="number">1</span>][j + <span class="number">1</span>] == <span class="string">'X'</span>) ++res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Lunar-New-Year-and-Food-Ordering"><a href="#B-Lunar-New-Year-and-Food-Ordering" class="headerlink" title="B. Lunar New Year and Food Ordering"></a>B. Lunar New Year and Food Ordering</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>餐厅有$~n~$种菜，库存为$~a_1,~a_2,~\dots,~a_n~$，价格为$~c_1,~c_2,~\dots,~c_n~$。依次来$~m~$个客人，第$~i~$个人会点$~d_i~$个$~t_i~$菜。一份份上菜，如果库存没有了$~t_i~$菜，则选择库存里最便宜的菜继续一份份上，即使最终无法上满$~d_i~$份也要继续上，上不满则客人不付钱。输出每个客人要付多少钱。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对价格排序以后双指针模拟即可。时间复杂度$~O(n\log n+m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; c(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), p(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : c) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line">sort(p.begin(), p.end(), [&amp;c] (<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;<span class="keyword">return</span> c[x] &lt; c[y];&#125;);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a[--t] &lt; d) &#123;</span><br><span class="line">res += c[t] * a[t];</span><br><span class="line">d -= a[t];</span><br><span class="line">a[t] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (index ^ n &amp;&amp; a[p[index]] &lt; d) &#123;</span><br><span class="line">res += c[p[index]] * a[p[index]];</span><br><span class="line">d -= a[p[index]];</span><br><span class="line">a[p[index++]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (index ^ n) &#123;</span><br><span class="line">res += c[p[index]] * d;</span><br><span class="line">a[p[index]] -= d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">res = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">a[t] -= d;</span><br><span class="line">res = c[t] * d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Lunar-New-Year-and-Number-Division"><a href="#C-Lunar-New-Year-and-Number-Division" class="headerlink" title="C. Lunar New Year and Number Division"></a>C. Lunar New Year and Number Division</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定偶数个数字，要求划分为若干组，每组至少$~2~$个。记$~s~$为一组的总和，输出最小的$~\sum s^2~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。每组$~2~$个共$~\frac{n}{2}~$组。其中最大值和最小值一组，次大值和次小值一组，以此类推。正确性可用$~\text{Jensen}~$不等书证明。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &gt;&gt; <span class="number">1</span>; ++i) res += (a[i] + a[n - <span class="number">1</span> - i]) * (a[i] + a[n - <span class="number">1</span> - i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Lunar-New-Year-and-a-Wander"><a href="#D-Lunar-New-Year-and-a-Wander" class="headerlink" title="D. Lunar New Year and a Wander"></a>D. Lunar New Year and a Wander</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点简单连通通图。从$~1~$开始遍历所有的点，根据每个点第一次经过的顺序，可以得到一个$~1,~2,~\dots,~n~$的全排列。输出字典序最小的全排列。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>类似$~\text{Dijstra}~$或$~\text{Prim}~$的思想，每次取与当前联通快相邻的编号最小的点即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.insert(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> now = *que.begin();</span><br><span class="line">vis[now] = <span class="literal">true</span>;</span><br><span class="line">res.push_back(now);</span><br><span class="line">que.erase(now);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : adj[now]) <span class="keyword">if</span> (!vis[next]) que.insert(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ res.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Lunar-New-Year-and-Red-Envelopes"><a href="#E-Lunar-New-Year-and-Red-Envelopes" class="headerlink" title="E. Lunar New Year and Red Envelopes"></a>E. Lunar New Year and Red Envelopes</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>再$~[1,~n]~$时间段内有$~k~$个红包，每个红包的出现时间段为$~[s,~t]~$，大小为$~w~$。且如果抢了它，则在$~[s,~d]~$以内无法再抢红包，其中$~s\leq t\leq d~$。现在$~\text{Bob}~$抢红包的策略是如果当前时刻可以抢则会去抢$~w~$最大的那个，如果有多个则去抢$~d~$最大的那个<del>（这个操作没看懂）</del>。然后$~\text{Alice}~$可以令$~\text{Bob}~$在最多$~m~$个时刻无法抢红包，问$~\text{Bob}~$的最小收益。<br>数据范围$~1\leq n\leq10^5,~1\leq k\leq10^5,~1\leq m\leq200~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先处理$~\text{Bob}~$在每个时刻如果能抢红包，他抢的红包所对应的$~w~$和$~d~$是多少。这一步扫描线可以完成，用$~\text{multiset}~$维护当前时刻所有的红包，然后每个红包在$~s~$秒加入$~t+1~$秒移除。接下来就是个动态规划问题，记$~dp[i][j]~$表示$~\text{Alice}~$已经打断了$~i~$次在$~j~$时刻的最小收益，具体转移见代码。其中$~[i]~$维度可以滚动优化，总时间复杂度为$~O((n+k)\log k+mn)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;, <span class="keyword">bool</span>&gt;&gt; sweep[maxn];</span><br><span class="line">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt; red[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp0[maxn], dp1[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t, d;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; d &gt;&gt; w;</span><br><span class="line">sweep[s].push_back(make_pair(make_pair(w, d), <span class="literal">true</span>));</span><br><span class="line">sweep[t + <span class="number">1</span>].push_back(make_pair(make_pair(w, d), <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">multiset</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; line;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; now : sweep[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (now.second) line.insert(now.first);</span><br><span class="line"><span class="keyword">else</span> line.erase(line.find(now.first));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (line.empty()) red[i] = make_pair(<span class="number">0</span>, i);</span><br><span class="line"><span class="keyword">else</span> red[i] = *line.rbegin();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line">++m;</span><br><span class="line"><span class="built_in">memset</span>(dp1, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp1));</span><br><span class="line">dp1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(dp0, dp1, <span class="keyword">sizeof</span> (dp0));</span><br><span class="line"><span class="built_in">memset</span>(dp1, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp1));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dp0[red[i].second + <span class="number">1</span>] = min(dp0[red[i].second + <span class="number">1</span>], dp0[i] + red[i].first);</span><br><span class="line">dp1[i + <span class="number">1</span>] = min(dp1[i + <span class="number">1</span>], dp0[i]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, dp0[n + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Lunar-New-Year-and-a-Recursive-Sequence"><a href="#F-Lunar-New-Year-and-a-Recursive-Sequence" class="headerlink" title="F. Lunar New Year and a Recursive Sequence"></a>F. Lunar New Year and a Recursive Sequence</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>已知一个序列$~f~$的递推公式是</p><script type="math/tex; mode=display">f_i=\left(\prod_{j=1}^{k}f_{i-j}^{b_j}\right)\mod(p=998244353)</script><p>现给出$~b_1,~b_2,~\dots,~b_k~$且$~f_1=f_2=\dots=f_{k-1}=1,~f_n=m~$，求$~f_k~$。<br>数据范围$~1\leq k\leq100,~k&lt; n\leq10^9,~1\leq m&lt; p=998244353~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>赤裸裸的线性递推套$~N~$次剩余。在不考虑序列$~f~$的前$~k~$项时，对于任意$~f_i~$，存在唯一的一组$~\beta_i=(b_{i1},~b_{i2},~\dots,~b_{ik})~$满足$~f_i=\prod_{j=1}^{k}f_j^{b_j}\mod p~$。于是得到了一个$~k~$维线性空间内的一个线性序列$~\beta~$。由费马小定理，可以对$~\beta~$每个维度都取模$~p-1~$意义下的值。于是有$~N~$次剩余方程$~f_k^{b_{nk}}=m\mod p~$。用$~\text{BSGS}~$算法可在$~O(\sqrt{p}\log p)~$内解出。线性递推部分用矩阵快速幂即可打到要求，总时间复杂度为$~O(k^3\log n+\sqrt{p}\log p)~$。或者用$~O(k^2\log n)~$的线性递推倍增算法优化，总时间复杂度为$~O(k^2\log n+\sqrt{p}\log p)~$。注意线性递推部分是取模$~p-1~$。<del>倍增算法部分还可以用模非质数的$~\text{NTT}~$优化，总时间复杂度为$~O(k\log k\log n+\sqrt{p}\log p)~$。</del></p><h3 id="代码（-O-k-3-log-n-sqrt-p-log-p-）"><a href="#代码（-O-k-3-log-n-sqrt-p-log-p-）" class="headerlink" title="代码（$~O(k^3\log n+\sqrt{p}\log p)~$）"></a><strong>代码（$~O(k^3\log n+\sqrt{p}\log p)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], power[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + p : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> sub(a, p - b, p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(mod + <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = fpow(n, mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; baby;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ sqr; ++i) &#123;</span><br><span class="line">baby[m] = i;</span><br><span class="line">m = mul(m, inv);</span><br><span class="line">&#125;</span><br><span class="line">n = fpow(n, sqr);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sqr + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = baby.find(now);</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end()) <span class="keyword">return</span> i * sqr + ite-&gt;second;</span><br><span class="line">now = mul(now, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x = p - <span class="number">1</span>; <span class="literal">true</span>; ++i)  &#123;</span><br><span class="line"><span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">factors.push_back(i);</span><br><span class="line"><span class="keyword">while</span> (!(x % i)) x /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * i * i &gt; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (x ^ <span class="number">1</span>) factors.push_back(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ret = <span class="number">1</span>; <span class="literal">true</span>; ++ret) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) <span class="keyword">if</span> (fpow(ret, (p - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> <span class="keyword">long</span>&amp; x, <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a ? (x = <span class="number">1</span>, y = <span class="number">0</span>, a) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = get_root(p);</span><br><span class="line"><span class="keyword">int</span> y = bsgs(root, m);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(n, p - <span class="number">1</span>, s, t);</span><br><span class="line"><span class="keyword">if</span> (y % d) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>) s = s * y / d % (p - <span class="number">1</span>) * (<span class="number">2</span> - p) % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> s = s * y / d % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fpow(root, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j], mod - <span class="number">1</span>), mod - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; base[<span class="number">0</span>][i], power[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) base[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> t = n - k; t; t &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (t &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(tmp, power, base, k);</span><br><span class="line"><span class="built_in">memcpy</span>(power, tmp, <span class="keyword">sizeof</span> (power));</span><br><span class="line">&#125;</span><br><span class="line">mul(tmp, base, base, k);</span><br><span class="line"><span class="built_in">memcpy</span>(base, tmp, <span class="keyword">sizeof</span> (base));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; power_mod(power[<span class="number">0</span>][<span class="number">0</span>], m, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-k-2-log-n-sqrt-p-log-p-）"><a href="#代码（-O-k-2-log-n-sqrt-p-log-p-）" class="headerlink" title="代码（$~O(k^2\log n+\sqrt{p}\log p)~$）"></a><strong>代码（$~O(k^2\log n+\sqrt{p}\log p)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244352</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function">vi <span class="title">bm</span><span class="params">(vi&amp; c, <span class="keyword">long</span> <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = c.size();</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = c.front(); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> vi(<span class="number">1</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;vi&gt; base(size &lt;&lt; <span class="number">1</span>, vi(size, <span class="number">0</span>)), <span class="built_in">pow</span>(<span class="number">64</span>, vi(size, <span class="number">0</span>));</span><br><span class="line">base[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">base[i][j] = add(mul(base[i - <span class="number">1</span>].back(), c[j]), j ? base[i - <span class="number">1</span>][j - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (n &lt; (size &lt;&lt; <span class="number">1</span>)) <span class="keyword">return</span> base[n];</span><br><span class="line"><span class="built_in">pow</span>[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">64</span>; ++i) &#123;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line">tmp[j + k] = add(tmp[j + k], mul(<span class="built_in">pow</span>[i - <span class="number">1</span>][j], <span class="built_in">pow</span>[i - <span class="number">1</span>][k]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size &lt;&lt; <span class="number">1</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k)</span><br><span class="line"><span class="built_in">pow</span>[i][k] = add(<span class="built_in">pow</span>[i][k], mul(tmp[j], base[j][k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">62</span>;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">vi ret = <span class="built_in">pow</span>[index];</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">while</span> ((<span class="number">1L</span>L &lt;&lt; index) &gt; n) --index;</span><br><span class="line">n ^= <span class="number">1L</span>L &lt;&lt; index;</span><br><span class="line"><span class="function">vi <span class="title">tmp</span><span class="params">(size &lt;&lt; <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">tmp[i + j] = add(tmp[i + j], mul(ret[i], <span class="built_in">pow</span>[index][j]));</span><br><span class="line">fill(ret.begin(), ret.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size &lt;&lt; <span class="number">1</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j)</span><br><span class="line">ret[j] = add(ret[j], mul(tmp[i], base[i][j]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> base[<span class="number">100</span>][<span class="number">100</span>], power[<span class="number">100</span>][<span class="number">100</span>], tmp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + p : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> sub(a, p - b, p);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b, <span class="keyword">const</span> <span class="keyword">int</span>&amp; p = mod)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % p;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsgs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(mod + <span class="number">0.1</span>);</span><br><span class="line"><span class="keyword">int</span> inv = fpow(n, mod - <span class="number">2</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; baby;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ sqr; ++i) &#123;</span><br><span class="line">baby[m] = i;</span><br><span class="line">m = mul(m, inv);</span><br><span class="line">&#125;</span><br><span class="line">n = fpow(n, sqr);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sqr + <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = baby.find(now);</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end()) <span class="keyword">return</span> i * sqr + ite-&gt;second;</span><br><span class="line">now = mul(now, n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_root</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, x = p - <span class="number">1</span>; <span class="literal">true</span>; ++i)  &#123;</span><br><span class="line"><span class="keyword">if</span> (!(x % i)) &#123;</span><br><span class="line">factors.push_back(i);</span><br><span class="line"><span class="keyword">while</span> (!(x % i)) x /= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * i * i &gt; x) &#123;</span><br><span class="line"><span class="keyword">if</span> (x ^ <span class="number">1</span>) factors.push_back(x);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ret = <span class="number">1</span>; <span class="literal">true</span>; ++ret) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) <span class="keyword">if</span> (fpow(ret, (p - <span class="number">1</span>) / f) == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">long</span> <span class="keyword">long</span>&amp; x, <span class="keyword">long</span> <span class="keyword">long</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a ? (x = <span class="number">1</span>, y = <span class="number">0</span>, a) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">power_mod</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root = get_root(p);</span><br><span class="line"><span class="keyword">int</span> y = bsgs(root, m);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> d = exgcd(n, p - <span class="number">1</span>, s, t);</span><br><span class="line"><span class="keyword">if</span> (y % d) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (s &lt; <span class="number">0</span>) s = s * y / d % (p - <span class="number">1</span>) * (<span class="number">2</span> - p) % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> s = s * y / d % (p - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> fpow(root, s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> C[][<span class="number">100</span>], <span class="keyword">int</span> A[][<span class="number">100</span>], <span class="keyword">int</span> B[][<span class="number">100</span>], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ size; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j], mod - <span class="number">1</span>), mod - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; base[<span class="number">0</span>][i], power[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; ~i; --i) vec.push_back(base[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) base[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">vec = BM::bm(vec, n - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; power_mod(vec.back(), m, mod) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 534 (Div. 2)</title>
      <link href="/2019/02/13/Codeforces%20Round%20534%20(Div.%202)/"/>
      <url>/2019/02/13/Codeforces%20Round%20534%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1104" target="_blank" rel="noopener">Codeforces Round #534 (Div. 2)</a></p><h2 id="A-Splitting-into-digits"><a href="#A-Splitting-into-digits" class="headerlink" title="A. Splitting into digits"></a>A. Splitting into digits</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (--n) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Game-with-string"><a href="#B-Game-with-string" class="headerlink" title="B. Game with string"></a>B. Game with string</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>类似祖玛，两人轮流选择两个一样的相邻字符从字符串中消除，不能操作则失败。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟。一个字符串的可操作次数是固定的且与操作顺序无关。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; chs;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (!chs.empty() &amp;&amp; chs.back() == ch) &#123;</span><br><span class="line">++cnt;</span><br><span class="line">chs.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">chs.push_back(ch);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt &amp; <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Grid-game"><a href="#C-Grid-game" class="headerlink" title="C. Grid game"></a>C. Grid game</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~4\times4~$的大正方形内要放入若干$~1\times2~$和$~2\times1~$的小长方形，不能重叠，但是如果某行或者某列被占满则改行或者该列被清空。现给出小长方形的出现顺序，输出一种可行的放置方案。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>前$~2~$排专门放竖的，第$~3~$排专门放横的即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a++ &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">5</span>) a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">1</span>) b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Game-with-modulo"><a href="#D-Game-with-modulo" class="headerlink" title="D. Game with modulo"></a>D. Game with modulo</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。有个未知数$~a~$，每次只能询问一对数$~(x,~y)~$，如果在模$~a~$意义下满足$~x\geq y~$，则返回$~x~$，否则返回$~y~$。在至多$~60~$次查询内确定$~a~$的大小。<br>数据范围$~1\leq a\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>倍增。如果有$~a&gt;x~$，则通过询问$~(x,~2x)~$得到$~a~$与$~2x~$的大小关系。所以在$~30~$次询问内，可以确认$~a=1~$或者$~a\in(2^i,~2^{i+1}],~i\in[0,~30)~$。对于$~a\in(x,~y]~$，运用同样的思想，询问$~(x,~\frac{x+y}{2})~$，可以确认$~a~$与$~\frac{x+y}{2}~$的关系。于是再用至多$~30~$次询问即可得出答案。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">game</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">return</span> str == <span class="string">"start"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">return</span> ch == <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; res)</span> </span>&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (game()) &#123;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (query(now, now &lt;&lt; <span class="number">1</span>)) now &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (now == <span class="number">1</span>) &#123;</span><br><span class="line">solve(query(<span class="number">2</span>, <span class="number">3</span>) ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> left = now, right = now &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(left, mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">solve(right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Johnny-Solving"><a href="#E-Johnny-Solving" class="headerlink" title="E. Johnny Solving"></a>E. Johnny Solving</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点的简单连通图，且每个点的度数至少为$~3~$。再给出一个不大于$~n~$的正整数$~k~$。要求输出一条长度不小于$~\frac{n}{k}~$的简单路径或者$~k~$个长度不是$~3~$的倍数的环，且每个环有个代表点，代表点不能再其他环内。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~\text{DFS}~$生成树。如果有点的深度不小于$~\frac{n}{k}~$，那么可以直接构造出简单路径。否则这棵树必有至少$~k~$个叶节点。考虑每个叶节点，由于每个点的度数至少为$~3~$且根据$~\text{DFS}~$生成树的性质，这个叶节点必有至少$~2~$条边连向不同的非父亲祖先。这样每个叶节点可以找到$~3~$个环，可以自行证明必存在长度不是$~3~$的倍数的环。此时该叶节点也满足代表元性质，构造完毕。所有过程均为线性，不过我的代码不知道为什么不加剪枝会$~\text{TLE}~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> fa[maxn], dep[maxn], n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; cycles;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> ((dep[u] = d) &gt; (n - <span class="number">1</span>) / k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"PATH\n"</span> &lt;&lt; d &lt;&lt; <span class="string">'\n'</span> &lt;&lt; u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = fa[u]; i; i = fa[i]) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">fa[v] = u;</span><br><span class="line">dfs(v, d + <span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (adj[u][index] == fa[u]) ++index;</span><br><span class="line"><span class="keyword">int</span> x = adj[u][index++];</span><br><span class="line"><span class="keyword">if</span> (adj[u][index] == fa[u]) ++index;</span><br><span class="line"><span class="keyword">int</span> y = adj[u][index];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; loop(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ x) loop.push_back(fa[loop.back()]);</span><br><span class="line"><span class="keyword">if</span> (loop.size() % <span class="number">3</span>) &#123;</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">loop = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ y) loop.push_back(fa[loop.back()]);</span><br><span class="line"><span class="keyword">if</span> (loop.size() % <span class="number">3</span>) &#123;</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">loop = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">if</span> (dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line">loop.push_back(x);</span><br><span class="line"><span class="keyword">while</span> (loop.back() ^ y) loop.push_back(fa[loop.back()]);</span><br><span class="line">cycles.push_back(loop);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cycles.size() == k) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"CYCLES\n"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; loop : cycles) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; loop.size() &lt;&lt; <span class="string">'\n'</span> &lt;&lt; loop.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ loop.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; loop[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CodeCraft-19 and Codeforces Round 537 (Div. 2)</title>
      <link href="/2019/02/11/CodeCraft-19%20and%20Codeforces%20Round%20537%20(Div.%202)/"/>
      <url>/2019/02/11/CodeCraft-19%20and%20Codeforces%20Round%20537%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1111" target="_blank" rel="noopener">CodeCraft-19 and Codeforces Round #537 (Div. 2)</a></p><h2 id="A-Superhero-Transformation"><a href="#A-Superhero-Transformation" class="headerlink" title="A. Superhero Transformation"></a>A. Superhero Transformation</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> check[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">check[<span class="string">'a'</span>] = check[<span class="string">'e'</span>] = check[<span class="string">'i'</span>] = check[<span class="string">'o'</span>] = check[<span class="string">'u'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> s1, s2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line"><span class="keyword">if</span> (s1.size() ^ s2.size()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ s1.size(); ++i)</span><br><span class="line"><span class="keyword">if</span> (check[s1[i]] ^ check[s2[i]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Average-Superhero-Gang-Power"><a href="#B-Average-Superhero-Gang-Power" class="headerlink" title="B. Average Superhero Gang Power"></a>B. Average Superhero Gang Power</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给顶一个序列，最多可以操作$~k~$次，或者移除一个元素，或者是一个元素加$~1~$，且每个元素至多操作$~m~$次。输出该序列最后平均数的最大值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。排序后暴力枚举移除操作的次数即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a + i);</span><br><span class="line">sort(a, a + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = pre[i - <span class="number">1</span>] + a[i];</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ min(n, m + <span class="number">1</span>); ++i)</span><br><span class="line">res = max(res, <span class="number">1.0</span> * (pre[n] - pre[i] + min(<span class="number">1L</span>L * (n - i) * k, <span class="number">1L</span>L * (m - i))) / (n - i));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f\n"</span>, res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Creative-Snap"><a href="#C-Creative-Snap" class="headerlink" title="C. Creative Snap"></a>C. Creative Snap</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要处理一整段长度为$~2^n~$的数轴，数轴上有$~k~$个物品。对于每个区间可以选择二等分后分别处理或者直接处理。处理区间时，如果区间上有物品，则需要花费$~B\cdot n_a\cdot l$，其中$~n_a~$和$~l~$分别是该区间物品数量和长度。否则处理空区间的花费为$~A~$。问最小总花费。<br>数据范围$~1\leq n\leq30,~1\leq k\leq10^5~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接根据题意递归处理即可。考虑一棵完整的线段树，它有$~2^{n+1}~$个节点。但是注意到对于空区间的节点，其子树是不需要考虑的。且最后一层只有$~k~$个非空节点，所以所有需要经过的节点是$~O(nk)~$级别的。对于区间内的数量，可以用$~\text{lower_bound}~$或$~\text{upper_bound}~$来计算，总时间复杂度为$~O(nk\log k)~$。<del>当然你想写线段树动态开点也不是不可以。</del></p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A, B;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = upper_bound(a.begin(), a.end(), end) - upper_bound(a.begin(), a.end(), begin);</span><br><span class="line"><span class="keyword">if</span> (!size) <span class="keyword">return</span> A;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret = B * size * (end - begin);</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> ^ end) ret = min(ret, solve(begin, begin + end &gt;&gt; <span class="number">1</span>) + solve(begin + end &gt;&gt; <span class="number">1</span>, end));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; A &gt;&gt; B;</span><br><span class="line">a.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; solve(<span class="number">0</span>, <span class="number">1</span> &lt;&lt; n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Destroy-the-Colony"><a href="#D-Destroy-the-Colony" class="headerlink" title="D. Destroy the Colony"></a>D. Destroy the Colony</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个偶数长度的大小写字符串和$~q~$次询问。每次询问输出有多少种字符串的重排列满足所有一样的字母在同侧且$~x~$和$~y~$位置上的字母也在同侧。<br>数据范围$~1\leq n\leq10^5,~1\leq q\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑存在性，则存在一种字母的二划分使得每个划分下的数量总和均为$~\frac{n}{2}~$。设划分为</p><script type="math/tex; mode=display">\{a_1,~a_2,~\dots,~a_k\}=\{b_1,~b_2,~\dots,~b_s,~c_1,~c_2,~\dots,~c_t\} \\\sum_{i=1}^{s}b_i=\sum_{i=1}^{t}c_i={\frac{n}{2}}</script><p>那么这种满足这种划分的重排列数量为</p><script type="math/tex; mode=display">\frac{(\frac{n}{2})!}{\prod_{i=1}^{s}(b_i)!}\cdot\frac{(\frac{n}{2})!}{\prod_{i=1}^{t}(c_i)!}=\frac{((\frac{n}{2})!)^2}{\prod_{i=1}^{k}(a_i)!}</script><p>那么只需要考虑有多少种合法的划分方案。注意到最多只有$~52~$种不一样的字母，即$~k\leq52~$。那么可以用一个$~O(nk)~$的动态规划来算出对于任意$~0\leq i\leq n~$，有多少种子集的和为$~i~$。最后考虑询问，这相当于把某对$~a_i~$和$~a_j~$合并后计算，共$~\binom{k}{2}~$种组合如果每种情况分别动态规划，预处理的时间复杂度为$~O(nk^3)~$，显然会$~\text{TLE}~$。注意到每次动态规划的元素大部分是相同的，于是可以考虑<del>可持久化动态规划</del>的做法，在基于$~{a_1,~a_2,~\dots,~a_k}~$的基础上删除$~a_i~$和$~a_j~$。这样每种组合的动态规划时间复杂度为$~O(n)~$，总时间复杂度为$~O(nk^2+q)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n = maxn)</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> size = str.size();</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) ++cnt[ch];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, p(<span class="number">128</span>, <span class="number">-1</span>), dp(size + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> now : cnt) &#123;</span><br><span class="line">p[now.first] = a.size();</span><br><span class="line">a.push_back(now.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> base = mul(fact[size &gt;&gt; <span class="number">1</span>], fact[size &gt;&gt; <span class="number">1</span>]);</span><br><span class="line">dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">base = mul(base, finv[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt;= x; --i) dp[i] = add(dp[i], dp[i - x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = mul(dp[size &gt;&gt; <span class="number">1</span>], base);</span><br><span class="line"><span class="keyword">int</span> cal[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ a.size(); ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j ^ a.size(); ++j) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = a[i]; k &lt;= size; ++k) dp[k] = sub(dp[k], dp[k - a[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = a[j]; k &lt;= size; ++k) dp[k] = sub(dp[k], dp[k - a[j]]);</span><br><span class="line">cal[i][j] = mul(add(dp[size &gt;&gt; <span class="number">1</span>], dp[size &gt;&gt; <span class="number">1</span>]), base);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = size; k &gt;= a[i]; --k) dp[k] = add(dp[k], dp[k - a[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = size; k &gt;= a[j]; --k) dp[k] = add(dp[k], dp[k - a[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x = p[str[x - <span class="number">1</span>]];</span><br><span class="line">y = p[str[y - <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line"><span class="keyword">if</span> (x == y) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; cal[x][y] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 538 (Div. 2)</title>
      <link href="/2019/02/11/Codeforces%20Round%20538%20(Div.%202)/"/>
      <url>/2019/02/11/Codeforces%20Round%20538%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1114" target="_blank" rel="noopener">Codeforces Round #538 (Div. 2)</a></p><h2 id="A-Got-Any-Grapes"><a href="#A-Got-Any-Grapes" class="headerlink" title="A. Got Any Grapes?"></a>A. Got Any Grapes?</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z, a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (a &lt; x || a + b &lt; x + y || a + b + c &lt; x + y + z) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Yet-Another-Array-Partitioning-Task"><a href="#B-Yet-Another-Array-Partitioning-Task" class="headerlink" title="B. Yet Another Array Partitioning Task"></a>B. Yet Another Array Partitioning Task</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个序列的$~\text{beauty}~$值为前$~m~$大的数值之和。现给定一个大序列，要求划分成$~k~$个连续的序列使得这$~k~$个序列的$~\text{beauty}~$值总和最大，并输出划分的方案。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。原序列前$~mk~$大的数值之和就是最大值。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; a(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; use(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i].first, a[i].second = i;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - m * k; i ^ n; ++i) res += a[i].first, use[a[i].second] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">if</span> (use[i] &amp;&amp; ++cnt == m) &#123;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (++tot == k) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Trailing-Loves-or-L’oeufs"><a href="#C-Trailing-Loves-or-L’oeufs" class="headerlink" title="C. Trailing Loves (or L’oeufs?)"></a>C. Trailing Loves (or L’oeufs?)</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问数字$~n!~$在$~b~$进制下有多少个末尾$~0~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>因式分解$~b~$后对所有质数计算$~n!~$中的幂指数。公式</p><script type="math/tex; mode=display">f(n,~p)=\sum_{i=1}^{\infty}\left\lfloor\frac{n}{p^i}\right\rfloor</script><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; b;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; factors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">2</span>; <span class="literal">true</span>; ++p) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(b % p)) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">for</span> (cnt = <span class="number">0</span>; !(b % p); ++cnt) b /= p;</span><br><span class="line">factors.push_back(make_pair(p, cnt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p * p &gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b ^ <span class="number">1</span>) factors.push_back(make_pair(b, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0x7fffffffffffffff</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> f : factors) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> x = n; x; x /= f.first) temp += x / f.first;</span><br><span class="line">res = min(res, temp / f.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Flood-Fill"><a href="#D-Flood-Fill" class="headerlink" title="D. Flood Fill"></a>D. Flood Fill</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列，选择一个起点，每次操作可以将包含起点的等值联通块全部改变为另一数值。问最少操作次数使得序列全部一样。<br>数据范围$~1\leq n\leq5000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先对相邻等值的元素去重，于是每次操作可以使得包含起点的等值联通块大小增加$~1~$或者$~2~$。如果能增加$~2~$，说明存在$~2~$个一样的元素在起点的左右。于是只要找到<strong>最长回文子序列</strong>即可，这是一个区间$~\text{DP}~$问题，具体实现见代码。时间复杂度为$~O(n^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; str;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (str.empty() || str.back() ^ c) str.push_back(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = str.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp(size, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(size, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">2</span>; d &lt; size; ++d)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l + d ^ size; ++l) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[l] ^ str[l + d]) dp[l][l + d] = max(dp[l][l + d - <span class="number">1</span>], dp[l + <span class="number">1</span>][l + d]);</span><br><span class="line"><span class="keyword">else</span> dp[l][l + d] = dp[l + <span class="number">1</span>][l + d - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; size - <span class="number">1</span> - (dp[<span class="number">0</span>][size - <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Arithmetic-Progression"><a href="#E-Arithmetic-Progression" class="headerlink" title="E. Arithmetic Progression"></a>E. Arithmetic Progression</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。现有一个乱序的等差数列，可以有两种询问：问是否存在一个数严格大于$~x~$，或者问第$~i~$个数的值。询问次数不超过$~60~$次，然后输出首项和公差。<br>数据范围$~2\leq n\leq10^6~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过二分可以在$~30~$次询问内找出最大值也就是末项。然后随机询问$~30~$个数值后与末项的差取$~\gcd~$。算出的答案为真实的公差的概率等于$~n~$以内随机$~30~$个数互质的概率。<strong>注意代码实现尽量接近真正的随机</strong>，详见<a href="https://codeforces.com/blog/entry/61587" target="_blank" rel="noopener">博客链接</a>。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rand_fuck</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">1e9</span>, rem = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left ^ <span class="number">1</span>) &#123;</span><br><span class="line">--rem;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt; "</span> &lt;&lt; mid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">if</span> (in) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">1</span>);</span><br><span class="line">shuffle(p.begin(), p.end(), rand_fuck);</span><br><span class="line">rem = min(rem, n);</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ rem; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; p[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">d = __gcd(d, right - in);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; right - (n - <span class="number">1</span>) * d &lt;&lt; <span class="string">' '</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Please-another-Queries-on-Array"><a href="#F-Please-another-Queries-on-Array" class="headerlink" title="F. Please, another Queries on Array?"></a>F. Please, another Queries on Array?</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对序列区间乘以$~x~$或查询区间乘积的欧拉函数值。<br>数据范围$~1\leq n\leq4\cdot10^5,~1\leq q\leq2\cdot10^5,~1\leq a\leq300,~1\leq x\leq300~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>欧拉函数$~\varphi(n)~$的定义为小于$~n~$且与$~n~$互质的正整数的数量，是个<strong>积性函数</strong>。对于$~n~$的所有质因子$~p~$，有如下公式</p><script type="math/tex; mode=display">\varphi(n)=n\prod_{p\mid n}\frac{p-1}{p}</script><p>对于乘积的操作可以用一棵区间乘法线段树完成，建树的时间复杂度为$~O(n)~$，单次修改操作或查询的时间复杂度为$~O(\log^2n)~$。注意到$~x~$和$~a~$的数据范围，可以先预处理出所有可能的质数，事实上只有至多$~62~$个质数。那么对于线段树上的每一个节点，可以用一个$~64~$位的数据类型来储存状态压缩过后的质因子表。总时间复杂度为$~O(n+q\cdot(\log^2n+62))~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], euler[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> prime[<span class="number">301</span>], mask;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> cal, cal_;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mask, mask_;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tage</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; p)</span> </span>&#123;</span><br><span class="line">cal_ = mul(cal_, x);</span><br><span class="line">mask_ |= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n)</span> </span>&#123;</span><br><span class="line">cal = mul(cal, fpow(cal_, n));</span><br><span class="line">mask |= mask_;</span><br><span class="line">cal_ = <span class="number">1</span>;</span><br><span class="line">mask_ = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid (begin + end &gt;&gt; 1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">build(begin, mid, lson);</span><br><span class="line">build(mid, end, rson);</span><br><span class="line">seg[index].cal = mul(seg[lson].cal, seg[rson].cal);</span><br><span class="line">seg[index].mask = seg[lson].mask | seg[rson].mask;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index].mask = prime[seg[index].cal = a[end]];</span><br><span class="line">&#125;</span><br><span class="line">seg[index].cal_ = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">seg[index].tage(x, prime[x]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[index].cal = mul(seg[index].cal, fpow(x, min(end, right) - max(begin, left)));</span><br><span class="line">seg[index].mask |= prime[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(begin, mid, lson, left, right, x);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(mid, end, rson, left, right, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (seg[index].mask_) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin ^ mid) &#123;</span><br><span class="line">seg[lson].tage(seg[index].cal_, seg[index].mask_);</span><br><span class="line">seg[rson].tage(seg[index].cal_, seg[index].mask_);</span><br><span class="line">&#125;</span><br><span class="line">seg[index].calc(end - begin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> mask |= seg[index].mask, seg[index].cal;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= left || begin &gt;= right) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> mul(query(begin, mid, lson, left, right), query(mid, end, rson, left, right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, cnt = <span class="number">0</span>; i &lt;= <span class="number">300</span>; ++i) <span class="keyword">if</span> (!prime[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= <span class="number">300</span>; j += i) prime[j] ^= <span class="number">1L</span>L &lt;&lt; cnt;</span><br><span class="line">euler[cnt++] = mul(i - <span class="number">1</span>, fpow(i, mod - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'M'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">mask = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = query(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">62</span>; ++i) <span class="keyword">if</span> (mask &amp; <span class="number">1L</span>L &lt;&lt; i) res = mul(res, euler[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最长单调子序列</title>
      <link href="/2019/01/18/%E6%9C%80%E9%95%BF%E5%8D%95%E8%B0%83%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2019/01/18/%E6%9C%80%E9%95%BF%E5%8D%95%E8%B0%83%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="最长上升子序列-text-LIS"><a href="#最长上升子序列-text-LIS" class="headerlink" title="最长上升子序列$~\text{LIS}~$"></a>最长上升子序列$~\text{LIS}~$</h2><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a><strong>朴素算法</strong></h3><p>动态规划，令$~dp_i~$表示以$~a_i~$结尾的$~\text{LIS}~$的长度，则有状态转移式</p><script type="math/tex; mode=display">dp_i=\max\lbrace~dp_j:~j< i,~a_j< a_i~\rbrace+1</script><p>这样的时间复杂度显然是$~O(n^2)~$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">size_t</span> lis(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; a) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; dp(a.size());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != i; ++j) <span class="keyword">if</span> (a[i] &gt;= a[j]) dp[i] = max(dp[i], dp[j]);</span><br><span class="line">++dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *max_element(dp.begin(), dp.end());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化算法"><a href="#优化算法" class="headerlink" title="优化算法"></a><strong>优化算法</strong></h3><p>考虑集合$~S_k=\lbrace~i:~dp_i=k~\rbrace~$，它有这样的性质：对任意$~i\neq j\in S_k~$，如果$~i&lt; j~$，则必有$~a_i\geq a_j~$。这是因为如果$~a_i&lt; a_j~$，那么$~dp_j\geq dp_i+1~$，得出$~j\not\in S_k~$矛盾。<br>设$~p_k=\max S_k~$，这里规定如果$~S_k=\varnothing~$，则$~p_k~$不存在。这样的序列$~p~$也有性质：对任意$~p_i,p_j~$存在，如果$~i&lt; j~$，则必有$~a_{p_i}&lt; a_{p_j}~$。考虑$~p_j\in S_j~$，于是有前缀$~a_1,a_2,\dots,a_{p_j}~$以$~a_{p_j}~$结尾的$~\text{LIS}~$的长度为$~j~$。设这个$~\text{LIS}~$的第$~i~$项的角标为$~q~$，显然$~q\in S_i~$。于是$~p_i=\max S_i\geq q~$，结合之前的性质有$~a_{p_i}\leq a_q&lt; a_{p_j}~$。<br>考虑动态规划同时维护序列$~p~$，于是在状态转移的过程中，由前面第一个性质，只需要考虑$~dp_i~$从$~dp_{p_1},dp_{p_2},\dots,dp_{p_k}~$转移。注意到第二个性质的单调性，可以通过二分找到$~p_j~$，满足$~a_{p_j}&lt; a_i~$，且$~j=k~$或$~a_{p_{j+1}}\geq a_i~$。然后用$~i~$更新$~p_{j+1}~$。可以发现根本不需要维护$~dp~$，只需要维护$~p~$即可，最后序列$~p~$的长度就是$~\text{LIS}~$的长度。因为二分，时间复杂度为$~O(n\log n)~$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">lis</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> cmp = [&amp;a] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; x, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; y) &#123; <span class="keyword">return</span> a[x] &lt; a[y]; &#125;;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(p.begin(), p.end(), i, cmp);</span><br><span class="line"><span class="keyword">if</span> (ite == p.end()) p.emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> *ite = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对每次转移记忆化，可以得到一个$~\text{LIS}~$的角标。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">lis</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; p, from(a.size()), ret;</span><br><span class="line"><span class="keyword">if</span> (a.empty()) <span class="keyword">return</span> ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> cmp = [&amp;a] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; x, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; y) &#123; <span class="keyword">return</span> a[x] &lt; a[y]; &#125;;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(p.begin(), p.end(), i, cmp);</span><br><span class="line"><span class="keyword">if</span> (ite == p.begin()) from[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> from[i] = *prev(ite);</span><br><span class="line"><span class="keyword">if</span> (ite == p.end()) p.emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> *ite = i;</span><br><span class="line">&#125;</span><br><span class="line">ret.emplace_back(p.back());</span><br><span class="line"><span class="keyword">while</span> (~from[ret.back()]) ret.emplace_back(from[ret.back()]);</span><br><span class="line">reverse(ret.begin(), ret.end());</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dilworth定理"><a href="#Dilworth定理" class="headerlink" title="Dilworth定理"></a>Dilworth定理</h2><p>序列$~a_1,a_2,\dots,a_n~$的不增子序列最小划分数等于最长上升子序列长度。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a><strong>证明</strong></h3><p>设序列$~a~$的不增子序列最小划分数为$~k~$，最长上升子序列长度为$~m~$。任取一条最长上升子序列$~b_1,~b_2,~\dots,~b_m~$，则它们之中任意两个必然不在同一不增子序列划分中，所以必有$~k\geq m~$。<br>下面构造$~a~$的不增子序列$~m~$划分。在计算$~m~$的过程中，序列$~p~$的每一次更新都必然满足$~p_j~$不存在或者$~a_{p_j}\geq a_i~$，那么$~p_j~$的更新链恰好构成$~a~$的一条不增子序列。而$~{\mid p\mid}=m~$，也就是说$~p~$有$~m~$条不交的更新链，它们恰好构成$~a~$的一个不增子序列$~m~$划分。于是$~k=m~$。</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>用角标记录，返回最长严格单增子序列和非严格单减子序列划分。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">exlis</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; from(a.size()), lis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; snisp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> cmp = [&amp;a] (<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&amp; x, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&amp; y) &#123;</span><br><span class="line"><span class="keyword">return</span> a[x.back()] &lt; a[y.back()];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(snisp.begin(), snisp.end(), <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;(<span class="number">1</span>, i), cmp);</span><br><span class="line"><span class="keyword">if</span> (ite == snisp.begin()) from[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> from[i] = prev(ite)-&gt;back();</span><br><span class="line"><span class="keyword">if</span> (ite == snisp.end()) snisp.emplace_back(<span class="number">1</span>, i);</span><br><span class="line"><span class="keyword">else</span> ite-&gt;emplace_back(i);</span><br><span class="line">&#125;</span><br><span class="line">lis.emplace_back(snisp.back().back());</span><br><span class="line"><span class="keyword">while</span> (~from[lis.back()]) lis.emplace_back(from[lis.back()]);</span><br><span class="line">reverse(lis.begin(), lis.end());</span><br><span class="line"><span class="keyword">return</span> make_pair(lis, snisp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鬼畜版本，返回迭代器。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Ite</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">auto</span> <span class="title">exlis</span>(<span class="title">Ite</span> <span class="title">first</span>, <span class="title">Ite</span> <span class="title">last</span>) &#123;</span></span><br><span class="line"><span class="keyword">auto</span> cmp = [] (<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Ite&gt;&amp; v1, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;Ite&gt;&amp; v2) &#123;</span><br><span class="line"><span class="keyword">return</span> *v1.back() &lt; *v2.back();</span><br><span class="line">&#125;; <span class="comment">/// &lt; or &gt; for increasing or decreasing</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Ite&gt;&gt; snisp, from;</span><br><span class="line"><span class="keyword">while</span> (first != last) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Ite&gt; cur(<span class="number">1</span>, first);</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(snisp.begin(), snisp.end(), cur, cmp);</span><br><span class="line"><span class="comment">/// lower_bound or upper_bound for strictly or unstrictly</span></span><br><span class="line"><span class="keyword">auto</span> tmp = ite == snisp.begin() ? last : prev(ite)-&gt;back();</span><br><span class="line"><span class="keyword">if</span> (ite == snisp.end()) &#123;</span><br><span class="line">snisp.emplace_back(cur);</span><br><span class="line">from.emplace_back(<span class="number">1</span>, tmp);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ite-&gt;emplace_back(first);</span><br><span class="line">from.at(ite - snisp.begin()).emplace_back(tmp);</span><br><span class="line">&#125;</span><br><span class="line">++first;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Ite&gt; lis;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">mirr</span><span class="params">(snisp)</span></span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">lis.emplace_back(mirr.back().back());</span><br><span class="line">mirr.pop_back();</span><br><span class="line"><span class="keyword">if</span> (mirr.empty()) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span> (mirr.back().back() != from.back().back()) mirr.back().pop_back();</span><br><span class="line">from.pop_back();</span><br><span class="line"><span class="keyword">while</span> (mirr.back().size() != from.back().size()) from.back().pop_back();</span><br><span class="line">&#125;</span><br><span class="line">reverse(lis.begin(), lis.end());</span><br><span class="line"><span class="keyword">return</span> make_pair(lis, snisp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="CF1097E"><a href="#CF1097E" class="headerlink" title="CF1097E"></a><a href="https://codeforces.com/problemset/problem/1097/E" target="_blank" rel="noopener">CF1097E</a></h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">exlis</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;T&gt;&amp; a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; from(a.size()), lis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; snisp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span> cmp = [&amp;a] (<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&amp; x, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&amp; y) &#123;</span><br><span class="line"><span class="keyword">return</span> a[x.back()] &lt; a[y.back()];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(snisp.begin(), snisp.end(), <span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;(<span class="number">1</span>, i), cmp);</span><br><span class="line"><span class="keyword">if</span> (ite == snisp.begin()) from[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> from[i] = prev(ite)-&gt;back();</span><br><span class="line"><span class="keyword">if</span> (ite == snisp.end()) snisp.emplace_back(<span class="number">1</span>, i);</span><br><span class="line"><span class="keyword">else</span> ite-&gt;emplace_back(i);</span><br><span class="line">&#125;</span><br><span class="line">lis.emplace_back(snisp.back().back());</span><br><span class="line"><span class="keyword">while</span> (~from[lis.back()]) lis.emplace_back(from[lis.back()]);</span><br><span class="line">reverse(lis.begin(), lis.end());</span><br><span class="line"><span class="keyword">return</span> make_pair(lis, snisp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; f;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; f.size() &lt;= maxn; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = i; ~j; --j) f.emplace_back(i);</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; a(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="keyword">while</span> (!a.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = exlis(a);</span><br><span class="line"><span class="keyword">if</span> (tmp.first.size() &gt; f[a.size()]) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; lis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : tmp.first) lis.emplace_back(a[x]);</span><br><span class="line">res.emplace_back(lis);</span><br><span class="line"><span class="keyword">auto</span> ite = tmp.first.begin();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; b;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != a.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (ite != tmp.first.end() &amp;&amp; *ite == i) ++ite;</span><br><span class="line"><span class="keyword">else</span> b.emplace_back(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">swap(a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; vec : tmp.second) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; nis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; i : vec) nis.emplace_back(a[i]);</span><br><span class="line">res.emplace_back(nis);</span><br><span class="line">&#125;</span><br><span class="line">a.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; vec : res) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ans : vec) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; ans;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello 2019 (TBC)</title>
      <link href="/2019/01/17/Hello%202019%20(TBC)/"/>
      <url>/2019/01/17/Hello%202019%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1097" target="_blank" rel="noopener">Hello 2019</a></p><h2 id="A-Gennady-and-a-Card-Game"><a href="#A-Gennady-and-a-Card-Game" class="headerlink" title="A. Gennady and a Card Game"></a>A. Gennady and a Card Game</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~1~$张匹配扑克牌和$~5~$张手牌，判断是否存在$~1~$张手牌的花色或者数值和匹配牌一样。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str, hand;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">5</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; hand;</span><br><span class="line">        <span class="keyword">if</span> (str.front() == hand.front() || str.back() == hand.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Petr-and-a-Combination-Lock"><a href="#B-Petr-and-a-Combination-Lock" class="headerlink" title="B. Petr and a Combination Lock"></a>B. Petr and a Combination Lock</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~360^\circ~$的刻度盘，指针初始在$~0^\circ~$处。给定每次旋转的度数$~a_1,~a_2,~\dots,~a_n~$，但是旋转方向不定，判断是否存在一种旋转方式使得最后指针回到$~0^\circ~$。<br>数据范围$~1\leq n\leq15,~1\leq a\leq180~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>爆搜即可。时间复杂度为$~O(2^n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">1</span> &lt;&lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ n; ++j) sum += i &amp; <span class="number">1</span> &lt;&lt; j ? a[j] : <span class="number">360</span> - a[j];</span><br><span class="line">        <span class="keyword">if</span> (sum % <span class="number">360</span> == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Yuhao-and-a-Parenthesis"><a href="#C-Yuhao-and-a-Parenthesis" class="headerlink" title="C. Yuhao and a Parenthesis"></a>C. Yuhao and a Parenthesis</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~n~$个括号串，问最多多少括号穿有序对连在一起合法，每个串至多使用一次。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>经典合法括号串问题。合法性考虑前缀和即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt1(<span class="number">1</span> &lt;&lt; <span class="number">19</span>, <span class="number">0</span>), cnt2(<span class="number">1</span> &lt;&lt; <span class="number">19</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">            ch == <span class="string">'('</span> ? ++pre : --pre;</span><br><span class="line">            <span class="keyword">if</span> (pre &lt; <span class="number">0</span>) flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pre) ++cnt1[pre];</span><br><span class="line">            <span class="keyword">else</span> ++res;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> suf = -pre;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">            ch == <span class="string">')'</span> ? ++pre : --pre;</span><br><span class="line">            <span class="keyword">if</span> (pre &gt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!pre) ++cnt2[suf];</span><br><span class="line">    &#125;</span><br><span class="line">    res &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">1</span> &lt;&lt; <span class="number">19</span>; ++i) res += min(cnt1[i], cnt2[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Makoto-and-a-Blackboard"><a href="#D-Makoto-and-a-Blackboard" class="headerlink" title="D. Makoto and a Blackboard"></a>D. Makoto and a Blackboard</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一种操作，对任何正整数$~x~$，它会等概率随机变为它的一个因子。现给两个数字$~n~$和$~k~$，问$~n~$经过$~k~$次操作后所得到的期望。<br>数据范围$~1\leq n\leq10^{15},~1\leq k\leq10^4~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>令$~\xi(x,~y)~$表示$~x~$经过$~y~$次操作对应答案的随机变量，则此题的答案可用$~\Bbb{E}(\xi(n,~k))~$。将$~n~$因式分解为$~\prod_{i=1}^{m}p_i^{\alpha_i}~$，于是$~\xi(n,~k)=\prod_{i=1}^{m}\xi(p_i^{\alpha_i},~k)~$，且$~\xi(p_i^{\alpha_i},~k)~$之间相互独立。所以答案可以表示为</p><script type="math/tex; mode=display">\begin{aligned}\Bbb{E}(\xi(n,~k))  &=\Bbb{E}\left(\prod_{i=1}^{m}\xi(p_i^{\alpha_i},~k)\right) \\                    &=\prod_{i=1}^{m}\Bbb{E}\left(\xi(p_i^{\alpha_i},~k)\right) \\\end{aligned}</script><p>接下来计算$~\Bbb{E}\left(\eta_k=\xi(p^\alpha,~k)\right)~$。显然$~\eta~$是个简单随机变量且值域$~\eta(\Omega)={1,~p,~\dots,~p^\alpha}~$。记$~f(x,~y)=P(\eta_y=p^x)~$，不难得出$~y=1~$时，有</p><script type="math/tex; mode=display">f(x,~1)=\frac{1}{\alpha+1},~0\leq x\leq\alpha</script><p>那么对于$~y&gt;1~$，有</p><script type="math/tex; mode=display">f(x,~y)=\sum_{i=x}^{\alpha}\frac{f(i,~y-1)}{i+1}</script><p>直接递推即可。总时间复杂度为$~O(\sqrt{n}+k\log n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">14</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], a[<span class="number">64</span>], b[<span class="number">64</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> pp, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = pp % mod;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) a[i] = inv[n + <span class="number">1</span>];</span><br><span class="line">    b[n + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (--k) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; ~i; --i) b[i] = add(b[i + <span class="number">1</span>], mul(a[i], inv[i + <span class="number">1</span>]));</span><br><span class="line">        <span class="built_in">memcpy</span>(a, b, (n + <span class="number">1</span>) * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, base = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i) base = mul(base, p);</span><br><span class="line">        ret = add(ret, mul(a[i], base));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; factors;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">long</span> <span class="keyword">long</span> p = <span class="number">2</span>; p * p &lt;= n; ++p) <span class="keyword">if</span> (n % p == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n % p == <span class="number">0</span>) n /= p, ++cnt;</span><br><span class="line">        factors.push_back(make_pair(p, cnt));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n ^ <span class="number">1</span>) factors.push_back(make_pair(n, <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> factor : factors) res = mul(res, calc(factor.first, factor.second, k));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Egor-and-an-RPG-game"><a href="#E-Egor-and-an-RPG-game" class="headerlink" title="E. Egor and an RPG game"></a>E. Egor and an RPG game</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于一个全排列$~a_1,~a_2,~\dots,~a_n~$，将其划分为若干个单调子序列，记最少的数量为$~k~$。对于所有长度为$~n~$的全排列，所对应的$~k~$的最大值记为$~f(n)~$。现给出一个全排列$~a_1,~a_2,~\dots,~a_n~$，输出一种不超过$~f(n)~$的单调子序列划分方式。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑全排列$~1,~3,~2,~6,~5,~4,~10,~9,~8,~7~$，显然它至少要划分为$~4~$个单调子序列。所以对于$~\frac{k(k+1)}{2}\leq n~$，必有$~f(n)\geq k~$。那么对于$~\frac{k(k+1)}{2}&gt;n~$，下面证明存在$~k-1~$个单调子序列划分。考虑当前序列的任意一个$~\text{LIS}~$，如果$~{\mid\text{LIS}\mid}\geq k~$，那么将其划分，对于剩余的部分，此时有$~\frac{k(k-1)}{2}&gt;n-{\mid\text{LIS}\mid}~$，可以数学归纳。如果$~{\mid\text{LIS}\mid}&lt; k~$，那么根据$~\text{Dilworth}~$定理，可以将序列划分为$~\mid\text{LIS}\mid~$个$~\text{LDS}~$。这样总时间复杂度为$~O(n\sqrt n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lim;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">500</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; ~j; --j) lim.push_back(i);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now(n), tmp, to(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(n + <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : now) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">while</span> (!now.empty()) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lis;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; rem;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : now) &#123;</span><br><span class="line"><span class="keyword">int</span> idx = lower_bound(lis.begin(), lis.end(), a) - lis.begin();</span><br><span class="line"><span class="keyword">if</span> (idx) to[a] = lis[idx - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">else</span> to[a] = a;</span><br><span class="line"><span class="keyword">if</span> (idx == lis.size()) &#123;</span><br><span class="line">lis.push_back(a);</span><br><span class="line">rem.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span>, a));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">lis[idx] = a;</span><br><span class="line">rem[idx].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (lis.size() &gt; lim[now.size()]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lis.size() - <span class="number">2</span>; ~i; --i) lis[i] = to[lis[i + <span class="number">1</span>]];</span><br><span class="line">res.push_back(lis);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : lis) flag[a] = <span class="literal">false</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : now) <span class="keyword">if</span> (flag[a]) tmp.push_back(a);</span><br><span class="line">swap(now, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ans : rem) res.push_back(ans);</span><br><span class="line">now.clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> arr : res) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> a : arr) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Alex-and-a-TV-Show"><a href="#F-Alex-and-a-TV-Show" class="headerlink" title="F. Alex and a TV Show"></a>F. Alex and a TV Show</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>初始有$~n~$个空的可重集合$~S_1,~S_2,~\dots,~S_n~$。接下有$~q~$次操作或询问：</p><ol><li>把$~S_x~$变为$~{v}~$。</li><li>把$~S_x~$变为$~S_y\bigcup S_z~$。</li><li>把$~S_x~$变为$~{\gcd(a,~b)\mid a\in S_y,~b\in S_z}~$。</li><li>输出$~S_x~$中$~v~$的数量模$~2~$。</li></ol><p>数据范围$~1\leq n\leq10^5,~1\leq q\leq10^6,~1\leq v\leq7000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑这样的计数矩阵$~A_{n\times7000}~$，其中$~a_{xv}~$表示$~S_x~$中$~v~$的数量。那么会发现操作$~3~$的复杂度为$~O(q^2)~$。于是考虑因子矩阵$~B_{n\times7000}~$，其中$~b_{xv}~$表示$~S_x~$中$~v~$的倍数的数量。关于$~B~$能否唯一的表示$~A~$，只要存在可逆矩阵$~T~$，使得$~B=AT~$即可。令</p><script type="math/tex; mode=display">t_{ij}=\begin{cases}1   &\text{$j\mid i$}   \\0   &\text{$j\nmid i$}  \\\end{cases}</script><p>则$~B=AT~$成立（根据$~B~$的定义），且$~T~$是主对角线全为$~1~$的下三角矩阵，必定可逆，于是$~B~$所对应的集族的唯一性得到了保证。事实上$~T^{-1}~$是莫比乌斯函数矩阵</p><script type="math/tex; mode=display">t_{ij}^{-1}=\begin{cases}\mu(ij^{-1})    &\text{$j\mid i$}   \\0               &\text{$j\nmid i$}  \\\end{cases}</script><p>$~T^{-1}~$的构造过程可以利用容斥的思想，那么$~\mu~$则是容斥系数。于是操作$~1~$等价于$~b_{x\small\bullet}=t_{v\small\bullet}~$，操作$~2~$等价于$~b_{x\small\bullet}=b_{y\small\bullet}+b_{z\small\bullet}~$，操作$~3~$等价于$~b_{x\small\bullet}=b_{y\small\bullet}\times b_{z\small\bullet}~$，询问$~4~$等价于计算$~b_{x\small\bullet}\cdot t_{v\small\bullet}^{-1}~$。注意到$~v~$的数据范围以及答案模$~2~$的要求，可以用$~\text{bitset}~$来模拟集合对应的因子矩阵。总时间复杂度为$~O(v\log v+\frac{qv}{\text{bitset}})~$，注意可能需要$~\text{fastIO}~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">7e3</span> + <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime, mu(maxv, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(maxv, <span class="literal">false</span>);</span><br><span class="line">    mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxv; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            prime.push_back(i);</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i * p &gt;= maxv) <span class="keyword">break</span>;</span><br><span class="line">            vis[i * p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % p) mu[i * p] = -mu[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">bitset</span>&lt;maxv&gt;&gt; factor(maxv), inv(maxv), <span class="built_in">set</span>(maxn);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxv; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxv; j += i) &#123;</span><br><span class="line">        factor[j].flip(i);</span><br><span class="line">        <span class="keyword">if</span> (mu[j / i]) inv[i].flip(j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, q;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    <span class="keyword">while</span> (q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> op, x, y, z, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; v;</span><br><span class="line">            <span class="built_in">set</span>[x] = factor[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            <span class="built_in">set</span>[x] = <span class="built_in">set</span>[y] ^ <span class="built_in">set</span>[z];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">            <span class="built_in">set</span>[x] = <span class="built_in">set</span>[y] &amp; <span class="built_in">set</span>[z];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; v;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; ((<span class="built_in">set</span>[x] &amp; inv[v]).count() &amp; <span class="number">1</span> ? <span class="string">'1'</span> : <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 58 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2058%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2058%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1101" target="_blank" rel="noopener">Educational Codeforces Round 58 (Rated for Div. 2)</a></p><h2 id="A-Minimum-Integer"><a href="#A-Minimum-Integer" class="headerlink" title="A. Minimum Integer"></a>A. Minimum Integer</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出不在$~[l,~r]~$内的$~d~$的最小整数倍。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r, d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; d;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((d &lt; l ? <span class="number">0</span> : r / d) + <span class="number">1</span>) * d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Accordion"><a href="#B-Accordion" class="headerlink" title="B. Accordion"></a>B. Accordion</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出给定字符串满足左边为$~\text{[:}~$右边为$~\text{:]}~$中间为任意（可以没有）数量的$~\text{|}~$的子序列最大长度。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">-1</span>, right = <span class="number">-1</span>, size = str.size();</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'['</span>) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">':'</span> &amp;&amp; flag) &#123;</span><br><span class="line">left = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">']'</span>) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">':'</span> &amp;&amp; flag) &#123;</span><br><span class="line">right = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~left || !~ right || left &gt;= right) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">1</span>; i ^ right; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'|'</span>) ++res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Division-and-Union"><a href="#C-Division-and-Union" class="headerlink" title="C. Division and Union"></a>C. Division and Union</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>将$~n~$个给定的闭区间划分到两个集合之中，使得在这两个集合之中分别任选一个闭区间，它们不交。输出任意一种划分或者不存在。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先，如果有合法的划分，当且仅当这两个集合分别并起来得到的两个数集不交。于是合法划分不存在当前仅当所有区间并起来还是一个区间。对所有的区间按左端点升序，先将第$~1~$个区间划分给集合$~1~$，然后按顺序看当前区间与第$~1~$个区间是否有交。如果有交则划分给集合$~1~$同时与第$~1~$个区间并起来。如果没有则后面所有的区间都划分给集合$~2~$，这样所有在集合$~2~$区间里的数都大于在集合$~1~$区间里的数。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt;&gt; seg(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[i].first.first &gt;&gt; seg[i].first.second;</span><br><span class="line">seg[i].second = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(seg.begin(), seg.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, back = seg.front().first.second; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].first.first &lt;= back) &#123;</span><br><span class="line">back = max(back, seg[i].first.second);</span><br><span class="line">res[seg[i].second] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j ^ n; ++j) res[seg[j].second] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j ^ n; ++j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-GCD-Counting"><a href="#D-GCD-Counting" class="headerlink" title="D. GCD Counting"></a>D. GCD Counting</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一颗带点值的树，找出最长的简单路径满足路径上所有点值不互质。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq a\leq2\cdot10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于最长的合法路径，必存在一个质数$~p~$是路径上所有点值的公因数。注意到点值的数据范围，可以先预处理所有数字的所有质因子，这一步的时间复杂度为$~O(a\log a)~$。树形$~\text{DP}~$。任取一个点为根节点，考虑在以节点$~u~$为根的子树上经过$~u~$且有公因数$~p~$的最长路径$~cal[u][p]~$。先计算以$~u~$为一个端点，另一端点在子树中且公因数为$~p~$的最长路径路径$~len[u][p]~$。那么对于$~u~$的所有儿子$~v~$，在$~\text{dfs}~$过程中用$~len[v][p]~$的最大值更新$~len[u][p]~$，最大值和次大值更新$~cal[u][p]~$。为节省空间，注意到$~a~$的不同质因子个数很少，可以用$~\text{map}~$来维护$~len~$，且不用记录$~cal~$直接更新答案即可。总时间复杂度为$~O(a\cdot\log a+n\cdot\log a\cdot\log\log a)~$。<del>事实上可以写成$~O((n+a)\log a)~$，但是没有必要。</del></p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], res, max1[maxn], max2[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], prime[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(maxn);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; len[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pa)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ pa) dfs(v, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) max1[p] = max2[p] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ pa) <span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) &#123;</span><br><span class="line">max2[p] = max(max2[p], len[v][p]);</span><br><span class="line"><span class="keyword">if</span> (max1[p] &lt; max2[p]) swap(max1[p], max2[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[u] == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> p : prime[a[u]]) &#123;</span><br><span class="line">cal = max(cal, max1[p] + max2[p]);</span><br><span class="line">len[u][p] = max1[p] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, ++cal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) <span class="keyword">if</span> (!vis[i])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; maxn; j += i) &#123;</span><br><span class="line">vis[j] = <span class="literal">true</span>;</span><br><span class="line">prime[j].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Polycarp’s-New-Job"><a href="#E-Polycarp’s-New-Job" class="headerlink" title="E. Polycarp’s New Job"></a>E. Polycarp’s New Job</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一共$~n~$次添加或者询问：</p><ol><li>加入一个大小为$~x\times y~$的矩形。</li><li>询问是否所有矩形都能被$~h\times w~$的矩形包含。<br>数据范围$~2\leq n\leq5\cdot10^5,~1\leq x,~y,~h,~w\leq10^9~$。</li></ol><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先离散化。注意到矩形可以翻转，不妨让$~x\geq y,~h\geq w~$。那么题目变成了平面加点和询问平面内所有点是否都在$~[0,~h]\times[0,~w]~$或$~[0,~w]\times[0,~h]~$内。空间范围显然不允许使用二维树状数组，但是可以将询问等价为所有点都在$~[0,~h]\times[0,~h]~$内且不在$~(w,~\infty)\times(w,~\infty)~$内。那么用两个一维树状数组维护即可。总时间复杂度$~O(n\log n)~$。数据范围过大，注意$~\text{IO}~$速度。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; query(n);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; qry : query) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; qry.op &gt;&gt; qry.x &gt;&gt; qry.y;</span><br><span class="line"><span class="keyword">if</span> (qry.x &lt; qry.y) swap(qry.x, qry.y);</span><br><span class="line">num.insert(qry.x);</span><br><span class="line">num.insert(qry.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; to;</span><br><span class="line"><span class="keyword">int</span> maxn = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : num) to[x] = maxn++;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bit1(maxn, <span class="number">0</span>), bit2(maxn, <span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> qry : query) &#123;</span><br><span class="line">qry.x = to[qry.x];</span><br><span class="line">qry.y = to[qry.y];</span><br><span class="line"><span class="keyword">if</span> (qry.op == <span class="string">'+'</span>) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.x; i &lt; maxn; i += lowbit(i)) ++bit1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.y; i; i -= lowbit(i)) ++bit2[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.x; i; i -= lowbit(i)) sum += bit1[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = qry.y + <span class="number">1</span>; i &lt; maxn; i += lowbit(i)) sum -= bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum == cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Trucks-and-Cities"><a href="#F-Trucks-and-Cities" class="headerlink" title="F. Trucks and Cities"></a>F. Trucks and Cities</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>坐标轴上有$~n~$个城市和$~m~$趟卡车。给定城市坐标$~a~$，卡车的起点$~s~$、终点$~f~$、每公里耗油$~c~$和可中途加油次数$~r~$。问油箱的最小容量。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。记$~dp[r][s][f]~$为最优策略下卡车从$~a_s~$到$~a_f~$最多停靠加油$~r~$次的最长的两次停靠城市距离。那么答案则是$~\max(dp[r][s][f]\cdot c)~$。通过枚举最后一次停靠城市$~a_l~$，有状态转移式</p><script type="math/tex; mode=display">dp[r][s][f]=\min_{s< t< f}\max(dp[r-1][s][t],~a[f]-a[t])</script><p>此时总时间复杂度为$~O(n^4)~$显然会$~\text{tle}~$。但是不难发现在固定$~r~$和$~s~$后，最优转移点$~t~$随着$~f~$递增，所以双指针优化后时间复杂度变为$~O(n^3)~$。但是直接开$~O(n^3)~$的三位数组空间复杂度很危险（擦着边其实可以过），那么对于所有的输入$~(s,~f,~c,~r)~$离线操作，按$~r~$升序，这样$~dp~$的$~r~$维度可以滚动数组实现。总时间复杂度为$~O(n^3+m\log m)~$，空间复杂度为$~O(n^2+m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp0(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; dp1(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; ++j)</span><br><span class="line">dp0[i][j] = a[j] - a[i];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span><span class="keyword">int</span> s, f, c, r;&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;Query&gt; query(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; qry : query) <span class="built_in">cin</span> &gt;&gt; qry.s &gt;&gt; qry.f &gt;&gt; qry.c &gt;&gt; qry.r;</span><br><span class="line">sort(query.begin(), query.end(), [](Query a, Query b) &#123;<span class="keyword">return</span> a.r &lt; b.r;&#125;);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> qry : query) &#123;</span><br><span class="line"><span class="keyword">while</span> (now ^ qry.r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = j, l = j; k &lt;= n; ++k) &#123;</span><br><span class="line"><span class="keyword">while</span> (l &lt; k &amp;&amp; max(dp0[j][l], a[k] - a[l]) &gt; max(dp0[j][l + <span class="number">1</span>], a[k] - a[l + <span class="number">1</span>])) ++l;</span><br><span class="line">dp1[j][k] = max(dp0[j][l], a[k] - a[l]);</span><br><span class="line">&#125;</span><br><span class="line">swap(dp0, dp1);</span><br><span class="line">++now;</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, <span class="number">1L</span>L * qry.c * dp0[qry.s][qry.f]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Zero-XOR-Subset-less"><a href="#G-Zero-XOR-Subset-less" class="headerlink" title="G. (Zero XOR Subset)-less"></a>G. (Zero XOR Subset)-less</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定数列$~a_1,~a_2,~\dots,~a_n~$，要划分为若干个连续子序列$~A_1,~A_2,~\dots,~A_k~$。令每个子序列的$~\text{xor}~$和记为$~\alpha_i,~i=1,~2,~\dots,~k~$，集合$~S={\alpha_1,~\alpha_2,~\dots,~\alpha_k}~$。问满足$~S~$的所有非空子集的$~\text{xor}~$和互不相同的最大$~k~$或不存在。<br>数据范围$~1\leq n\leq2\cdot10^5,~0\leq a\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记录$~a_1,~a_2,~\dots,~a_n~$的前缀$~\text{xor}~$和$~pre_1,~pre_2,~\dots,~pre_n~$，显然如果$~pre_n=0~$则答案不存在，反之存在。再考虑合法集合$~S~$，记$~\alpha_1,~\alpha_2,~\dots,~\alpha_k~$的前缀$~\text{xor}~$和为$~\beta_1,~\beta_2,~\dots,~\beta_k~$，则不难发现$~\bar{S}={\beta_1,~\beta_2,~\dots,~\beta_k}~$也是合法集合。且根据定义$~\beta~$也是$~a~$的前缀$~\text{xor}~$和，所以$~\bar{S}\subseteq{pre_1,~pre_2,~\dots,~pre_n}~$。对于所有正整数，考虑二进制表示的$~01~$向量，可以等价于$~\Bbb{Z}_2~$上的某向量空间的向量，合法集合可以看作是这个向量空间上的一个线性无关组。这是一个线性基问题，答案是包含$~pre~$的最小空间的维数。时间复杂度为$~O(n\log a)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), base;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!a.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; base.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 57 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2057%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2057%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1096" target="_blank" rel="noopener">Educational Codeforces Round 57 (Rated for Div. 2)</a></p><h2 id="A-Find-Divisible"><a href="#A-Find-Divisible" class="headerlink" title="A. Find Divisible"></a>A. Find Divisible</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出任意一组$~(x,~y)\in [l,~r]^2~$满足$~x~$整除$~y~$，保证有解。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="string">' '</span> &lt;&lt; l * <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Substring-Removal"><a href="#B-Substring-Removal" class="headerlink" title="B. Substring Removal"></a>B. Substring Removal</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，询问有多少子串那满足删去子串后剩余部分仅有$~1~$种字母，保证输入串至少含$~2~$种字母。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然剩余的串必须为单字母构成前缀或后缀，或者字母一样的前后缀。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span> (l = <span class="number">0</span>; l ^ n &amp;&amp; str[l] == str.front(); ++l);</span><br><span class="line">    <span class="keyword">for</span> (r = n - <span class="number">1</span>; ~r &amp;&amp; str[r] == str.back(); --r);</span><br><span class="line">    <span class="keyword">if</span> (str.front() == str.back()) <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">long</span> <span class="keyword">long</span>)(l + <span class="number">1</span>) * (n - r) % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; l + n - r &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Polygon-for-the-Angle"><a href="#C-Polygon-for-the-Angle" class="headerlink" title="C. Polygon for the Angle"></a>C. Polygon for the Angle</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个在$~1^\circ~$到$~179^\circ~$之间的整数度数，输出最小的$~n~$满足正$~n~$边形上可以取$~3~$个点构成这个角度。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难得出正$~n~$边形可以得到的角度为$~\frac{1}{n}\times180^\circ,~\frac{2}{n}\times180^\circ,~\dots,~\frac{n-2}{n}\times180^\circ~$这一结论。考虑分数$~\frac{ang}{180}~$的最简形式$~\frac{p}{q}~$，答案即为$~q~$或者$~2q~$（如果$~p=q-1~$）。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> ang;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; ang;</span><br><span class="line">        <span class="keyword">int</span> gcd = __gcd(ang, <span class="number">180</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (gcd + ang ^ <span class="number">180</span> ? <span class="number">180</span> : <span class="number">360</span>) / gcd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Easy-Problem"><a href="#D-Easy-Problem" class="headerlink" title="D. Easy Problem"></a>D. Easy Problem</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个字符串以及删除每个字符的花费$~a_i~$，输出使得字符串不包含$~\text{hard}~$这一子序列的最小删除花费。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。记$~dp[i][j]~$表示考虑到第$~i~$位，已经构成了$~\text{hard}~$前$~j~$个字符的最小花费。从左至右模拟即可，时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; arr : a) <span class="built_in">cin</span> &gt;&gt; arr;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(<span class="number">4</span>));</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = dp[<span class="number">0</span>][<span class="number">2</span>] = dp[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        dp[i][<span class="number">1</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">        dp[i][<span class="number">2</span>] = dp[i - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">        dp[i][<span class="number">3</span>] = dp[i - <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'h'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = min(dp[i][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'a'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">1</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">2</span>] = min(dp[i][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'r'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">2</span>] += a[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][<span class="number">3</span>] = min(dp[i][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str[i - <span class="number">1</span>] == <span class="string">'d'</span>) &#123;</span><br><span class="line">            dp[i][<span class="number">3</span>] = dp[i][<span class="number">3</span>] + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; min(min(dp[n][<span class="number">0</span>], dp[n][<span class="number">1</span>]), min(dp[n][<span class="number">2</span>], dp[n][<span class="number">3</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-The-Top-Scorer"><a href="#E-The-Top-Scorer" class="headerlink" title="E. The Top Scorer"></a>E. The Top Scorer</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~p~$个人比赛，每人都有未知的非负得分$~a_i~$，但总和$~\sum_{i=1}^{p}{a_i}=s~$已知。分数最高的一人获胜，如果最高分有多人同分，则他们的获胜概率均等。现已知$~\text{Hason}~$的分数至少为$~r~$，所有不同的结果出现的概率均等，求他获胜的概率。<br>数据范围$~1\leq p\leq 100,~0\leq r\leq s\leq5000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先将$~\text{Hason}~$的分数和总分数减去$~r~$，那么插板法可以算出所有合法的结果数量为</p><script type="math/tex; mode=display">\binom{p+s-r-1}{p-1}</script><p>接下来枚举$~\text{Hason}~$的得分$~i=r,~r+1,~\dots,~s~$，有$~j=1,~2,~\dots,~\lfloor \frac{s}{i}\rfloor~$人与他同分（算上$~\text{Hason}~$他自己），且其余的得分均小于$~i~$的情况。此时$~\text{Hason}~$获胜的结果数量期望为</p><script type="math/tex; mode=display">\frac{1}{j}\binom{p-1}{p-j}f(p-j,~i,~s-ij)</script><p>其中$~f(x,~y,~z)~$表示$~x~$人得分均小于$~y~$且总和为$~z~$的合法结果数量。对于$~f(x,~y,~z)~$的计算，先考虑在没有$~y~$的限制下，用插板法可以得到答案为$~g(x,~z)=\binom{x+z-1}{x-1}~$。那么将条件变为$~x~$人，至少有$~w~$人得分不少于$~y~$，且总和为$~z~$，则它的结果数量等于$~\binom{x}{w}g(x,~z-wy)~$。于是通过容斥，得到$~f(x,~y,~z)~$的计算式</p><script type="math/tex; mode=display">\begin{aligned}f(x,~y,~z)  &=\sum_{i=0}^{\min(x,~\lfloor\frac{z}{y}\rfloor)}{(-1)^i\binom{x}{i}g(x,~z-iy)}               \\            &=\sum_{i=0}^{\min(x,~\lfloor\frac{z}{y}\rfloor)}{(-1)^i\binom{x}{i}\binom{x+z-iy-1}{x-1}}    \\\end{aligned}</script><p>注意特判$~f(x=0,~y,~z)~$的情况。总时间复杂度为$~O(p^2s)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">6e3</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(mul(fact[a], finv[b]), finv[a - b]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">binv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> mul(mul(finv[a], fact[b]), fact[a - b]);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; up, <span class="keyword">const</span> <span class="keyword">int</span>&amp; s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">return</span> s == <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n &amp;&amp; i * up &lt;= s; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = mul(bino(n + s - i * up - <span class="number">1</span>, n - <span class="number">1</span>), bino(n, i));</span><br><span class="line">ret = i &amp; <span class="number">1</span> ? sub(ret, temp) : add(ret, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p, s, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; s &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r; i &lt;= s; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= p &amp;&amp; i * j &lt;= s; ++j)</span><br><span class="line">cnt = add(cnt, mul(mul(calc(p - j, i, s - i * j), inv[j]), bino(p - <span class="number">1</span>, j - <span class="number">1</span>)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(cnt, binv(p - r + s - <span class="number">1</span>, p - <span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Inversion-Expectation"><a href="#F-Inversion-Expectation" class="headerlink" title="F. Inversion Expectation"></a>F. Inversion Expectation</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个不完整的全排列，输出逆序对期望数。<br>数据范围$~1\leq n\leq 2\cdot10^5~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记总共有$~m~$个未知数，分为$~4~$种情况讨论：</p><ol><li>所有已知数与已知数对于逆序对的贡献。即为计算一个序列的逆序对数量，用排序或者树状数组均可实现，时间复杂度为$~O(n\log n)~$。</li><li>所有未知数与未知数对于逆序对的贡献。对于任意一种可能的未知数的排列，将其翻转后原来的逆序对变为顺序对，顺序对变为逆序对。于是任意一对未出现的数字，在所有可能的排列情况种它们一半为顺序对，一半为逆序对。所以$~m~$个未知数相互之间对于逆序对的贡献期望为$~\binom{m}{2}\frac{m!}{2}~$。</li><li>所有已知数与未知数对于逆序对的贡献。先单独考虑一个已知数$~p_i~$与它左边比它大的未知数对于逆序对的贡献。设它左边有$~left_i~$个未知数，所有未知数种有$~lgreater_{p_i}~$个比$~p_i~$大，那么逆序对的期望则是$~left_i\cdot lgreater_{p_i}\cdot m^{-1}~$。同理对于$~p_i~$与它右边比它小的未知数对于逆序对期望则是$~right_j\cdot rsmaller_{p_j}\cdot m^{-1}~$。这些都可以在线性时间里处理完。<br>总时间复杂度为$~(n\log n)~$。</li></ol><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], a[maxn], exist[maxn], blank[maxn], bit[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> (~a[i]) &#123;</span><br><span class="line">blank[i] = blank[i - <span class="number">1</span>];</span><br><span class="line">exist[a[i]] = <span class="number">1</span>;</span><br><span class="line">res = add(res, i - cnt - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j; j -= lowbit(j)) res = sub(res, bit[j]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = a[i]; j &lt; maxn; j += lowbit(j)) ++bit[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">blank[i] = ++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) exist[i] += exist[i - <span class="number">1</span>];</span><br><span class="line">res = add(res, mul(mul(cnt, cnt - <span class="number">1</span>), inv[<span class="number">4</span>]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (~a[i])</span><br><span class="line">res = add(res, mul(add(mul(blank[i], cnt + exist[a[i]] - a[i]), mul(cnt - blank[i], a[i] - exist[a[i]])), inv[cnt]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Lucky-Tickets"><a href="#G-Lucky-Tickets" class="headerlink" title="G. Lucky Tickets"></a>G. Lucky Tickets</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问有多少个可以首零的$~n~$（偶数）位数字满足前一半的各位数数字之和与后一半的各位数数字之和一样。限定这个数只能由$~d_1,~d_2,~\dots,~d_k~$组成。数据范围$~2\leq n\leq2\cdot10^5,~1\leq k\leq10~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有前$~\frac{n}{2}~$位数加起来可以得到的总和$~s~$，令$~calc(s)~$为所有满足各位数数字之和位$~s~$的合法的$~\frac{n}{2}~$位数的数量，则答案为$~\sum_{s=0}^{5n}calc^2(s)~$。考虑这样一个多项式</p><script type="math/tex; mode=display">f(x)=\sum_{i=1}^{k}x^{d_i}</script><p>则$~calc(s)~$即为$~f^\frac{n}{2}(x)~$的$~s~$次系数。于是$~\text{NTT}~$即可得出答案。时间复杂度$~O(n\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> root = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span>) n = (<span class="number">2L</span>L - mod) * n % (mod - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">to_pow2</span><span class="params">(<span class="keyword">int</span>&amp; x)</span> </span>&#123;<span class="keyword">while</span> (x ^ lowbit(x)) x += lowbit(x);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bit_reverse</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = size &gt;&gt; <span class="number">1</span>; i ^ size - <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; j) swap(f[i], f[j]);</span><br><span class="line"><span class="keyword">int</span> k = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= k) &#123;</span><br><span class="line">j -= k;</span><br><span class="line">k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &lt; k) j += k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> f[], <span class="keyword">int</span> size, <span class="keyword">int</span> op = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">bit_reverse(f, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= size; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> wn = fpow(root, op * (<span class="number">1</span> - mod) / i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ size; j += i) &#123;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k ^ j + (i &gt;&gt; <span class="number">1</span>); ++k) &#123;</span><br><span class="line"><span class="keyword">int</span> u = f[k];</span><br><span class="line"><span class="keyword">int</span> v = mul(w, f[k + (i &gt;&gt; <span class="number">1</span>)]);</span><br><span class="line">f[k] = add(u, v);</span><br><span class="line">f[k + (i &gt;&gt; <span class="number">1</span>)] = sub(u, v);</span><br><span class="line">w = mul(w, wn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!~op) &#123;</span><br><span class="line"><span class="keyword">int</span> inv = fpow(size, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) f[i] = mul(f[i], inv);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d;</span><br><span class="line">f[d] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = n * <span class="number">5</span>;</span><br><span class="line">to_pow2(size);</span><br><span class="line">ntt(f, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) f[i] = fpow(f[i], n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">ntt(f, size, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) res = add(res, mul(f[i], f[i]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Educational Codeforces Round 56 (Rated for Div. 2)</title>
      <link href="/2019/01/17/Educational%20Codeforces%20Round%2056%20(Rated%20for%20Div.%202)/"/>
      <url>/2019/01/17/Educational%20Codeforces%20Round%2056%20(Rated%20for%20Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1093" target="_blank" rel="noopener">Educational Codeforces Round 56 (Rated for Div. 2)</a></p><h2 id="A-Dice-Rolling"><a href="#A-Dice-Rolling" class="headerlink" title="A. Dice Rolling"></a>A. Dice Rolling</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个点数为$~2~$至$~7~$的骰子，求任意一种可能的次数使得点数之和为$~x~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Letters-Rearranging"><a href="#B-Letters-Rearranging" class="headerlink" title="B. Letters Rearranging"></a>B. Letters Rearranging</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个小写字母串，输出任意一种不回文重排列。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。排序即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        sort(str.begin(), str.end());</span><br><span class="line">        <span class="keyword">if</span> (str.front() == str.back()) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Mishka-and-the-Last-Exam"><a href="#C-Mishka-and-the-Last-Exam" class="headerlink" title="C. Mishka and the Last Exam"></a>C. Mishka and the Last Exam</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出一个长度为$~n~$的数列${a_n}$满足对称位之差为给定的数列$~{b_\frac{n}{2}}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。从数列边缘向内部贪心，左边尽量小，右边尽量大。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; left(n), right(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">        right[i] = b - (left[i] = (i ? max(left[i - <span class="number">1</span>], b - right[i - <span class="number">1</span>]) : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> res : left) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> last = right.front();</span><br><span class="line">    reverse(right.begin(), right.end());</span><br><span class="line">    right.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> res : right) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; last &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Beautiful-Graph"><a href="#D-Beautiful-Graph" class="headerlink" title="D. Beautiful Graph"></a>D. Beautiful Graph</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个简单图（无重边无自环可能不连通），求点的$~{1,~2,~3}~$染色方案数，使得每条边两边加起来是奇数。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑染色的奇偶性，显然对于每个点，它相邻的点均与它奇偶性不同。所以如果存在奇环，则答案为$~0~$。跑一遍$~\text{DFS}~$然后对于每个联通块的方案数乘起来即是答案。时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> two[maxn], color[maxn], cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> c = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    vis[u] = <span class="literal">true</span>;</span><br><span class="line">    ++cnt[color[u] = c];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vis[v]) flag &amp;= (color[u] ^ color[v]);</span><br><span class="line">        <span class="keyword">else</span> dfs(v, !c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    two[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ maxn; ++i) two[i] = add(two[i - <span class="number">1</span>], two[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) adj[i].clear();</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            adj[u].push_back(v);</span><br><span class="line">            adj[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(vis + <span class="number">1</span>, <span class="number">0</span>, n * <span class="keyword">sizeof</span> (<span class="keyword">bool</span>));</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">            cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">            dfs(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) res = mul(res, add(two[cnt[<span class="number">0</span>]], two[cnt[<span class="number">1</span>]]));</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (flag ? res : <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Intersection-of-Permutations"><a href="#E-Intersection-of-Permutations" class="headerlink" title="E. Intersection of Permutations"></a>E. Intersection of Permutations</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~1,~\dots,~n~$的两个全排列$~a~$和$~b~$，和$~q~$个查询或修改操作。查询操作给出$~l_a,~r_a,~l_b,~r_b~$，输出$~a_{[l_a,~r_a]}~$和$~b_{[l_b,~r_b]}~$之间相同同的数字个数。修改操作给出$~x~$和$~y~$，交换$~b_x~$和$~b_y~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>应为$~a~$不会被修改，那么做置换使得$~a_i=i~$，这样对于询问操作，只要输出$~[l_a,~r_a]~$在$~b_{[l_b,~r_b]}~$中出现的次数。考虑二维坐标系上的$~n~$个点$~(b_i,~i),~i=1,~2,~\dots,~n~$，查询操作等价于输出$~[la,~ra]\times[lb,~rb]~$内的点的个数；修改操作等价于将$~(b_x,~x)~$和$~(b_y,~y)~$变为$~(b_y,~x)~$和$~(b_x,~y)~$。用树状数组维护$~\text{treap}~$即可，时间复杂度为$~O(n\log^2n)~$。由于我不会写$~\text{treap}~$，所以使用了$~\text{pb_ds}~$库，常数比较大。</p><h3 id="代码（使用-text-pb-ds-库）"><a href="#代码（使用-text-pb-ds-库）" class="headerlink" title="代码（使用$~\text{pb_ds}~$库）"></a><strong>代码（使用$~\text{pb_ds}~$库）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line">tree&lt;<span class="keyword">int</span>, null_type, less&lt;<span class="keyword">int</span>&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; bit[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">a[in] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> in;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">b[i] = a[in];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt;= n; j += lowbit(j)) bit[j].insert(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> la, ra, lb, rb;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; la &gt;&gt; ra &gt;&gt; lb &gt;&gt; rb;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = rb; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(ra);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res += bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res += bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = rb; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(la - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res -= bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res -= bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lb - <span class="number">1</span>; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(ra);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res -= bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res -= bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = lb - <span class="number">1</span>; i; i -= lowbit(i)) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = bit[i].upper_bound(la - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ite == bit[i].end()) res += bit[i].size();</span><br><span class="line"><span class="keyword">else</span> res += bit[i].order_of_key(*ite);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) bit[i].erase(b[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= n; i += lowbit(i)) bit[i].erase(b[y]);</span><br><span class="line">swap(b[x], b[y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i)) bit[i].insert(b[x]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= n; i += lowbit(i)) bit[i].insert(b[y]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Vasya-and-Array"><a href="#F-Vasya-and-Array" class="headerlink" title="F. Vasya and Array"></a>F. Vasya and Array</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个长度为$~n~$的数列由$~1,~\dots,~k~$组成，部分位置的值已给定。求有多少个数列满足所有长度为$~len~$的区间内至少由$~2~$种不同的数字。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划，有点复杂。记$~pre[i][j]~$为区间$~[1,~i]~$中至多有多少$~j~$，从而计算$~fuck[i][j]~$，表示区间$~(i-len,~i]~$是否有可能全部为$~j~$。记$~dp[i][j][0/1]~$为区间$~[1,~i]~$上满足$~a[i]=j~$的合法或非法数量，记求和$~sum[i][0/1]=\sum_{j=1}^k{dp[i][j][0/1]}~$以及$~cnt[i]=sum[i][0]+sum[i][1]~$。于是有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j][0] &=sum[i-1][0]+\begin{cases}sum[i-len][1]-dp[i-len][j][1]   &\text{$flag[i][j]$}                \\0                               &\text{$!flag[i][j]$}\end{cases}    \\dp[i][j][1] &=cnt[i-1]-dp[i][j][0]                                  \\\end{aligned}</script><p>所有的状态转移都是$~O(1)~$的，所以时间复杂度与空间复杂度均为$~O(nk)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], pre[maxn][maxk], cnt[maxn], sum[maxn][<span class="number">2</span>], dp[maxn][maxk][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> fuck[maxn][maxk];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, len;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; len;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        <span class="keyword">if</span> (~a[i]) pre[i][a[i]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) pre[i][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">        pre[i][j] += pre[i - <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= len &amp;&amp; pre[i][j] - pre[i - len][j] == len) fuck[i][j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (~a[<span class="number">1</span>]) &#123;</span><br><span class="line">        cnt[<span class="number">1</span>] = sum[<span class="number">1</span>][<span class="number">1</span>] = dp[<span class="number">1</span>][a[<span class="number">1</span>]][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i) dp[<span class="number">1</span>][i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        cnt[<span class="number">1</span>] = sum[<span class="number">1</span>][<span class="number">1</span>] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    sum[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (~a[i]) &#123;</span><br><span class="line">            cnt[i] = cnt[i - <span class="number">1</span>];</span><br><span class="line">            dp[i][a[i]][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (fuck[i][a[i]])</span><br><span class="line">                dp[i][a[i]][<span class="number">0</span>] = add(dp[i][a[i]][<span class="number">0</span>], sub(sum[i - len][<span class="number">1</span>], dp[i - len][a[i]][<span class="number">1</span>]));</span><br><span class="line">            dp[i][a[i]][<span class="number">1</span>] = sum[i][<span class="number">1</span>] = sub(cnt[i], sum[i][<span class="number">0</span>] = dp[i][a[i]][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= k; ++j) &#123;</span><br><span class="line">                dp[i][j][<span class="number">0</span>] = sum[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (fuck[i][j])</span><br><span class="line">                    dp[i][j][<span class="number">0</span>] = add(dp[i][j][<span class="number">0</span>], sub(sum[i - len][<span class="number">1</span>], dp[i - len][j][<span class="number">1</span>]));</span><br><span class="line">                sum[i][<span class="number">0</span>] = add(sum[i][<span class="number">0</span>], dp[i][j][<span class="number">0</span>]);</span><br><span class="line">                dp[i][j][<span class="number">1</span>] = sub(cnt[i - <span class="number">1</span>], dp[i][j][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            sum[i][<span class="number">1</span>] = sub(cnt[i] = mul(cnt[i - <span class="number">1</span>], k), sum[i][<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum[n][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Multidimensional-Queries"><a href="#G-Multidimensional-Queries" class="headerlink" title="G. Multidimensional Queries"></a>G. Multidimensional Queries</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~k~$维空间的$~n~$个点，和$~q~$次修改或查询操作。修改为重新赋值第$~i~$个点，查询为区间$~[l,~r]~$的最大曼哈顿距离。<br>数据范围$~1\leq n\leq2\times10^5,~1\leq k\leq5,~1\leq q\leq2\times10^5,~-10^6\leq a_{ij}\leq10^6,~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑曼哈顿距离公式</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{k}\mid a_{xi}-a_{yi}\mid    &=\max\sum_{i=1}^{k}c_i(a_{xi}-a_{yi})                                                      \\                                        &=\max\left(\sum_{i=1}^{k}c_i a_{xi}-\sum_{i=1}^{k}c_i a_{xi}\right)  \\c_i                                     &=\pm1                                                                                      \\\end{aligned}</script><p>注意到$~k~$的数据范围很小，上式的系数列的取法共$~2^k~$种，那么建立$~2^{k+1}~$棵线段树维护$~\sum_{i=1}^{k}c_i a_{xi}~$的最大最小值即可。时间复杂度为$~O((n+q)2^k\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> size, seg[maxn &lt;&lt; <span class="number">2</span>][<span class="number">32</span>][<span class="number">2</span>], a[maxn][<span class="number">32</span>], b[<span class="number">5</span>], idx[maxn], cal[<span class="number">32</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i)</span><br><span class="line">seg[index][i][<span class="number">0</span>] = seg[index][i][<span class="number">1</span>] = a[begin][i];</span><br><span class="line">idx[begin] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(begin, mid, index &lt;&lt; <span class="number">1</span>);</span><br><span class="line">build(mid + <span class="number">1</span>, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">seg[index][i][<span class="number">0</span>] = min(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">0</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">0</span>]);</span><br><span class="line">seg[index][i][<span class="number">1</span>] = max(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">1</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = idx[pos];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i)</span><br><span class="line">seg[index][i][<span class="number">0</span>] = seg[index][i][<span class="number">1</span>] = a[pos][i];</span><br><span class="line"><span class="keyword">while</span> (index ^ <span class="number">1</span>) &#123;</span><br><span class="line">index &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">seg[index][i][<span class="number">0</span>] = min(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">0</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">0</span>]);</span><br><span class="line">seg[index][i][<span class="number">1</span>] = max(seg[index &lt;&lt; <span class="number">1</span>][i][<span class="number">1</span>], seg[index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) &#123;</span><br><span class="line">cal[i][<span class="number">0</span>] = min(cal[i][<span class="number">0</span>], seg[index][i][<span class="number">0</span>]);</span><br><span class="line">cal[i][<span class="number">1</span>] = max(cal[i][<span class="number">1</span>], seg[index][i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (mid &gt;= l) push_down(begin, mid, index &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">if</span> (mid &lt; r) push_down(mid + <span class="number">1</span>, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, l, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">size = <span class="number">1</span> &lt;&lt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ k; ++j) <span class="built_in">cin</span> &gt;&gt; b[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">1</span> &lt;&lt; k; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l ^ k; ++l)</span><br><span class="line">j &amp; (<span class="number">1</span> &lt;&lt; l) ? a[i][j] += b[l] : a[i][j] -= b[l];</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> pos;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="built_in">memset</span>(a[pos], <span class="number">0</span>, size * <span class="keyword">sizeof</span> (<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ k; ++j)</span><br><span class="line">i &amp; (<span class="number">1</span> &lt;&lt; j) ? a[pos][i] += b[j] : a[pos][i] -= b[j];</span><br><span class="line">push_up(pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) cal[i][<span class="number">0</span>] = ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>), cal[i][<span class="number">1</span>] = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</span><br><span class="line">push_down(<span class="number">1</span>, n, <span class="number">1</span>, l, r);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) res = max(res, cal[i][<span class="number">1</span>] - cal[i][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 532 (Div. 2)</title>
      <link href="/2019/01/17/Codeforces%20Round%20532%20(Div.%202)/"/>
      <url>/2019/01/17/Codeforces%20Round%20532%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1100" target="_blank" rel="noopener">Codeforces Round #532 (Div. 2)</a></p><h2 id="A-Roman-and-Browser"><a href="#A-Roman-and-Browser" class="headerlink" title="A. Roman and Browser"></a>A. Roman and Browser</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~n~$的$~\pm1~$串，在不考虑所有角标模$~k~$结果一样的位置上的值，问剩下的和的绝对值的最大值。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b(k, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line"><span class="keyword">int</span> sum = accumulate(a.begin(), a.end(), <span class="number">0</span>), res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) b[i % k] += a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : b) res = max(res, <span class="built_in">abs</span>(sum - x));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Build-a-Contest"><a href="#B-Build-a-Contest" class="headerlink" title="B. Build a Contest"></a>B. Build a Contest</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在可重集合里加入$~m~$个数字，每次加入时如果集合里$~1,~2,~\dots,~n~$都至少有$~1~$个，则都删去$~1~$个然后输出$~1~$，否则输出$~0~$。<br>数据范围$~1\leq n,~m\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接暴力地维护这个集合时间复杂度为$~O(nm)~$显然会$~\text{TLE}~$。不做删除操作，而是开$~2~$个数组维护集合：数组$~tot[i]~$表示有多少种数字在集合里至少有$~i~$个；数组$~cnt[i]~$表示数字$~i~$在集合里出现的次数。那么每加入一个数字$~a~$则更新$~cnt[a]~$和$~tot[cnt[a]]~$，输出$~1~$当且仅当$~tot[cnt[a]]=n~$。总时间复杂度为$~O(m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot(m, <span class="number">0</span>), cnt(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++tot[cnt[a - <span class="number">1</span>]++];</span><br><span class="line"><span class="keyword">if</span> (tot[now] == n) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">++now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-NN-and-the-Optical-Illusion"><a href="#C-NN-and-the-Optical-Illusion" class="headerlink" title="C. NN and the Optical Illusion"></a>C. NN and the Optical Illusion</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个中心圆和$~n~$个外圆外切，外圆半径一样且外切构成一个环，给出中心圆半径$~r~$，输出外圆半径$~R~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平面几何。答案是$~\frac{r}{\csc\frac{\pi}{n}-1}~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> n, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.7f\n"</span>, r / (<span class="number">1</span> / <span class="built_in">sin</span>(<span class="built_in">acos</span>(<span class="number">-1</span>) / n) - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Dasha-and-Chess"><a href="#D-Dasha-and-Chess" class="headerlink" title="D. Dasha and Chess"></a>D. Dasha and Chess</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。初始在$~999\times999~$的国际象棋棋盘上有$~\text{NN}~$的$~1~$个$~\text{king}~$和$~\text{Dasha}~$的$~666~$个$~\text{rook}~$。由$~\text{NN}~$先走，规则和国际象棋的$~\text{king}~$一样但是不能走到任意一个$~\text{rook}~$所在的位置上（不能不动）。如果$~\text{NN}~$走完后按国际象棋规则被将军，则获胜。这里的$~\text{rook}~$的规则是任意闪现到空的位置上且不能将军（可以不动）。要求不能超过$~2000~$回合，否则$~\text{NN}~$失败。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>别问为什么，先让$~\text{king}~$走到中心点$~(500,~500)~$。根据抽屉原理，四个角落必有一角落的$~\text{rook}~$数量不超过$~166~$，于是在某两个方向上的$~\text{rook}~$数量之和至少是$~500~$，走斜线必然胜利。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1</span> &lt;&lt; <span class="number">10</span>][<span class="number">1</span> &lt;&lt; <span class="number">10</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; chess[<span class="number">667</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">vis[chess-&gt;first][chess-&gt;second] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (vis[chess-&gt;first + x][chess-&gt;second + y])</span><br><span class="line">vis[chess-&gt;first][chess-&gt;second += y] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">vis[chess-&gt;first += x][chess-&gt;second += y] = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; chess-&gt;first &lt;&lt; <span class="string">' '</span> &lt;&lt; chess-&gt;second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">if</span> (!~k) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">vis[chess[k].first][chess[k].second] = <span class="literal">false</span>;</span><br><span class="line">vis[chess[k].first = x][chess[k].second = y] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">667</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; chess[i].first &gt;&gt; chess[i].second;</span><br><span class="line">vis[chess[i].first][chess[i].second] = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;first &lt; <span class="number">500</span>) query(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;first &gt; <span class="number">500</span>) query(<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;second &lt; <span class="number">500</span>) query(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (chess-&gt;second &gt; <span class="number">500</span>) query(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> up_left = <span class="number">0</span>, down_left = <span class="number">0</span>, up_right = <span class="number">0</span>, down_right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ <span class="number">1000</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j ^ <span class="number">1000</span>; ++j) <span class="keyword">if</span> (vis[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">500</span> &amp;&amp; j &lt; <span class="number">500</span>) ++up_left;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">500</span> &amp;&amp; j &lt; <span class="number">500</span>) ++down_left;</span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">500</span> &amp;&amp; j &gt; <span class="number">500</span>) ++up_right;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">500</span> &amp;&amp; j &gt; <span class="number">500</span>) ++down_right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> minn = min(min(up_left, down_left), min(up_right, down_right));</span><br><span class="line"><span class="keyword">if</span> (minn == up_left) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == down_left) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == up_right) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (minn == down_right) <span class="keyword">while</span>(<span class="literal">true</span>) query(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Andrew-and-Taxi"><a href="#E-Andrew-and-Taxi" class="headerlink" title="E. Andrew and Taxi"></a>E. Andrew and Taxi</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个$~n~$个点$~m~$条边的无自环带边权有向图，通过将边的方向翻转使得新图是一个$~\text{DAG}~$。问所有翻转的边的边权的最大值最小是多少。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对答案二分，那么所有当前二分值以下的边都可以选择翻转或者不翻转。这时如果存在一种变为$~\text{DAG}~$的翻转方式，当且仅当将所有二分值以下的边删除之后的图是$~\text{DAG}~$。判断是否有环即可，由于还需要输出翻转的方案，所以用拓扑排序。总时间复杂度为$~O((n+m)\log c)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, deg[maxn], topo[maxn];</span><br><span class="line">pair&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topo_sort</span><span class="params">(<span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(deg, <span class="number">0</span>, <span class="keyword">sizeof</span> (deg));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) adj[i].clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (edge[i].second &gt; lim) &#123;</span><br><span class="line">adj[edge[i].first.first].push_back(edge[i].first.second);</span><br><span class="line">++deg[edge[i].first.second];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) <span class="keyword">if</span> (!deg[i]) que.push(i);</span><br><span class="line"><span class="keyword">int</span> rk = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line">topo[u] = rk++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!--deg[v]) que.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rk == maxn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; edge[i].first.first &gt;&gt; edge[i].first.second &gt;&gt; edge[i].second;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">-1</span>, r = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (topo_sort(m)) r = m;</span><br><span class="line"><span class="keyword">else</span> l = m;</span><br><span class="line">&#125;</span><br><span class="line">topo_sort(r);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line"><span class="keyword">if</span> (topo[edge[i].first.first] &gt; topo[edge[i].first.second])</span><br><span class="line">res.push_back(i);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r &lt;&lt; <span class="string">' '</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> out : res) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; out;</span><br><span class="line">out == res.back() ? <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> : <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Ivan-and-Burgers"><a href="#F-Ivan-and-Burgers" class="headerlink" title="F. Ivan and Burgers"></a>F. Ivan and Burgers</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定数列$~c_1,~c_2,~\dots,~c_n~$和$~q~$次询问，问在$~c_l,~c_{l+1},~\dots,~c_r~$中取若干个数所得到的最大$~\text{xor}~$和。<br>数据范围$~1\leq n,~q\leq5\cdot10^5,~0\leq c\leq10^6~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然是个线性基问题，可以用线段树维护，但是递归写法的线段树常数很大会$~\text{TLE}~$，所以选择常数小的$~\text{CDQ}~$分治写法。总时间复杂度为$~O((n+q)\log n\log c)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; base;</span><br><span class="line">Vec() &#123;base.clear();&#125;</span><br><span class="line">Vec(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec) &#123;base = vec;&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123;<span class="keyword">for</span> (<span class="keyword">auto</span> v : vec.base) push(v);&#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="function">Vec <span class="title">ret</span><span class="params">(base)</span></span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;base.clear();&#125;</span><br><span class="line">&#125;res[maxn], vec[maxn], tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">auto</span>&amp; que,<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) res[i].push(c[l]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &gt;= l; --i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">tmp.push(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : que) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].second &lt;= m)</span><br><span class="line">left.push_back(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (seg[i].first &gt; m)</span><br><span class="line">right.push_back(i);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">res[i] = vec[seg[i].first] + vec[seg[i].second];</span><br><span class="line">&#125;</span><br><span class="line">que.clear();</span><br><span class="line">cdq(left, l, m);</span><br><span class="line">cdq(right, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; que(q);</span><br><span class="line">iota(que.begin(), que.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">cdq(que, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i].max() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 530 (Div. 2)</title>
      <link href="/2019/01/17/Codeforces%20Round%20530%20(Div.%202)/"/>
      <url>/2019/01/17/Codeforces%20Round%20530%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1099" target="_blank" rel="noopener">Codeforces Round #530 (Div. 2)</a></p><h2 id="A-Snowball"><a href="#A-Snowball" class="headerlink" title="A. Snowball"></a>A. Snowball</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>山坡滚雪球，每秒雪球会增加当前高度的质量然后下落$~1~$米。有$~2~$个石头，每撞一次减少对应的质量最小变为$~0~$。输雪球滚到坡底的质量。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w, h, u1, d1, u2, d2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; u1 &gt;&gt; d1 &gt;&gt; u2 &gt;&gt; d2;</span><br><span class="line"><span class="keyword">if</span> (d1 &lt; d2) &#123;</span><br><span class="line">swap(u1, u2);</span><br><span class="line">swap(d1, d2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &gt;= d1; --i) w += i;</span><br><span class="line">w = max(<span class="number">0</span>, w - u1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d1 - <span class="number">1</span>; i &gt;= d2; --i) w += i;</span><br><span class="line">w = max(<span class="number">0</span>, w - u2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d2 - <span class="number">1</span>; i; --i) w += i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; w &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Squares-and-Segments"><a href="#B-Squares-and-Segments" class="headerlink" title="B. Squares and Segments"></a>B. Squares and Segments</h2><p>要画$~n~$个$~1\times1~$的正方形格子，每一笔的长度只能为$~1~$。对于以画出的横（竖）的的线段，可以垂直（水平）地平移复制。问至少要画多少不复制的线段。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>即输出$~\min(a+b),~ab\geq n~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n + <span class="number">0.5</span>);</span><br><span class="line"><span class="keyword">if</span> (sqr * sqr == n) <span class="built_in">cout</span> &lt;&lt; (sqr &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (sqr * sqr + sqr &gt;= n) <span class="built_in">cout</span> &lt;&lt; (sqr &lt;&lt; <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (sqr + <span class="number">1</span> &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Postcard"><a href="#C-Postcard" class="headerlink" title="C. Postcard"></a>C. Postcard</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个小写字母和?*组成的字符串。字符?代表前一个字母可以删除或保留，字符*代表前一个字母可以删除或保留或重复若干次。输出任意由它生成的长度为$~k~$的字符串或不存在。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接模拟。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'?'</span>) ++cnt;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span>) ++tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k &lt; str.size() - (cnt + tot &lt;&lt; <span class="number">1</span>) || !tot &amp;&amp; k &gt; str.size() - cnt)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line"><span class="keyword">int</span> rem = k - str.size() + cnt + tot;</span><br><span class="line"><span class="keyword">if</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) res.push_back(ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'*'</span> &amp;&amp; flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (rem--) res.push_back(res.back());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">isalpha</span>(ch)) &#123;</span><br><span class="line">res.push_back(ch);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (rem) &#123;</span><br><span class="line">res.pop_back();</span><br><span class="line">++rem;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Sum-in-the-tree"><a href="#D-Sum-in-the-tree" class="headerlink" title="D. Sum in the tree"></a>D. Sum in the tree</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一颗非负点权树，根的深度为$~1~$。给出根到所有奇数深度的点的链上的点权值之和$~s_u=\sum_{v\in L(1,~u)}a_v,~2\nmid dep_u~$。输出最小的可能的点权之和$~\sum_{i=1}^{n}a_i~$或不存在。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于偶数度数的点的$~s_u~$值，取所有儿子的最大值，再和它的父亲比较合法性即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; son(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">if</span> (~s[i] &amp;&amp; i ^ <span class="number">1</span> &amp;&amp; s[i] &lt; s[p[p[i]]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) que.push(v);</span><br><span class="line"><span class="keyword">if</span> (!~s[u]) &#123;</span><br><span class="line">s[u] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) s[u] = min(s[u], s[v]);</span><br><span class="line"><span class="keyword">if</span> (s[u] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) s[u] = s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line">res += s[u] - s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Nice-table"><a href="#E-Nice-table" class="headerlink" title="E. Nice table"></a>E. Nice table</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个由$~\text{ATCG}~$组成的字母矩阵，输出一个同样大小的的字母矩阵满足所有$~2\times2~$均由$~\text{ATCG}~$组成，且使的两矩阵尽量相同。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于任意的合法矩阵，若第$~1~$行的字母超过$~2~$个，则不难推断出每列均由$~2~$个字母组成且奇偶性相同的列所用的字母组成一样。于是合法矩阵必满足每行（或列）均由$~2~$个字母组成，且相同的行（或列）所用的字母组成一样。枚举头$~2~$个字母组成的所有情况即可。考验代码能力。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ch&#123;<span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">4</span>);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> res, str, tmp(n * m, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n * m; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">str += ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> same = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(j ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(i ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (next_permutation(p.begin(), p.end()));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="built_in">cout</span> &lt;&lt; res[i * m + j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Cookies"><a href="#F-Cookies" class="headerlink" title="F. Cookies"></a>F. Cookies</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一颗大小为$~n~$的树，根为$~1~$，每个节点上$~i~$有$~x_i~$个饼干，每个饼干要花费$~t_i~$的时间吃掉，经过连接节点$~u\neq1~$和它父亲的边的时间花费为$~l_u~$。游戏开始前$~\text{Mitya}~$在根节点，每一回合$~\text{Mitya}~$走向当前节点的某一儿子，然后$~\text{Vasya}~$剪去$~\text{Mitya}~$所在节点与某一儿子的路径。当$~\text{Mitya}~$选择结束时他必须通过简单路径走回根节点，过程中可以吃路上的饼干。在总时间花费不超过$~T~$的条件下，问$~\text{Mitya}~$最多能吃多少饼干。<br>数据范围$~2\leq n\leq10^5,~1\leq T\leq10^{18},~1\leq x_i\leq10^6,~1\leq t_i\leq10^6,~0\leq l_i\leq10^9~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先不考虑$~\text{Vasya}~$的选择。对于每个节点$~u~$，计算它到根节点的路径上$~\text{Mitya}~$最多能吃到的饼干数量$~cal_u~$。显然为了最大化$~cal_u~$，必须先吃路径上花费时间少的饼干。注意到$~t~$的数据范围，那么可以在$~\text{dfs}~$过程中维护节点$~u~$到根节点的$~L(u,~1)~$这条路径上单位时间花费为$~t~$的饼干数量$~cnt_t~$。于是当前节点的答案就是在$~T-2\sum_v l_v,~v\in L(u,~1)~$的范围内最大化$~cnt~$的前缀和。这个过程可以用二分树状数组，线段树二分，或者树状数组二分来维护。<br>在计算出所有的$~cal_i,~1\leq i\leq n~$之后，考虑终点在节点$~u~$的子树上时的答案$~res_u~$。若$~u~$为叶节点，则$~res_u=cal_u~$。若$~u~$为非根非叶节点，考虑到$~\text{Vasya}~$的存在，则$~res_u=\max(cal_u,~res_v)~$，其中$~res_v~$为$~u~$的所有儿子的次大$~res~$值给根节点$~1~$增加一个$~cal=\inf~$的儿子，则可以$~\text{DFS}~$线性地计算出最终答案$~res_1~$。总时间复杂度为：二分树状数组$~O(n\log^2n)~$，线段树二分$~O(n\log n)~$，树状数组二分$~O(n\log n)~$。据说我的树状数组二分写法就是$~\text{zkw}~$，但是由于$~\text{Codeforces}~$的玄学优化，上面$~3~$种数据结构速度基本一样。。。</p><h3 id="代码（二分树状数组-O-n-log-2n-）"><a href="#代码（二分树状数组-O-n-log-2n-）" class="headerlink" title="代码（二分树状数组$~O(n\log^2n)~$）"></a><strong>代码（二分树状数组$~O(n\log^2n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], cut[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], bit1[maxt], bit2[maxt];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line">rem -= l[u] &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] += x[u], bit2[i] += x[u] * t[u];</span><br><span class="line"><span class="keyword">if</span> (rem &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>, r = maxt - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = r; i; i -= lowbit(i)) cal[u] += bit1[i], sum += bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt; rem) &#123;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid; i; i -= lowbit(i)) sum += bit2[i];</span><br><span class="line"><span class="keyword">if</span> (sum &gt; rem) r = mid;</span><br><span class="line"><span class="keyword">else</span> l = mid;</span><br><span class="line">&#125;</span><br><span class="line">cal[u] = sum =  <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l; i; i -= lowbit(i)) cal[u] += bit1[i], sum += bit2[i];</span><br><span class="line">cal[u] += (rem - sum) / r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] -= x[u], bit2[i] -= x[u] * t[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（线段树二分-O-n-log-n-）"><a href="#代码（线段树二分-O-n-log-n-）" class="headerlink" title="代码（线段树二分$~O(n\log n)~$）"></a><strong>代码（线段树二分$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], seg1[maxt &lt;&lt; <span class="number">2</span>], seg2[maxt &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">long</span> <span class="keyword">long</span> del)</span> </span>&#123;</span><br><span class="line">seg1[index] += del;</span><br><span class="line">seg2[index] += del * pos;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; mid) push_up(mid, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, pos, del);</span><br><span class="line"><span class="keyword">else</span> push_up(begin, mid, index &lt;&lt; <span class="number">1</span>, pos, del);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span> min(rem / end, seg1[index]);</span><br><span class="line"><span class="keyword">int</span> mid = begin + end &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> rem &lt; seg2[index &lt;&lt; <span class="number">1</span>]</span><br><span class="line">? push_down(begin, mid, index &lt;&lt; <span class="number">1</span>, rem)</span><br><span class="line">: seg1[index &lt;&lt; <span class="number">1</span>] + push_down(mid, end, index &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, rem - seg2[index &lt;&lt; <span class="number">1</span>]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line">push_up(<span class="number">0</span>, maxt, <span class="number">1</span>, t[u], x[u]);</span><br><span class="line"><span class="keyword">if</span> ((rem -= l[u] &lt;&lt; <span class="number">1</span>) &gt; <span class="number">0</span>) cal[u] = push_down(<span class="number">0</span>, maxt, <span class="number">1</span>, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line">push_up(<span class="number">0</span>, maxt, <span class="number">1</span>, t[u], -x[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（树状数组二分-O-n-log-n-）"><a href="#代码（树状数组二分-O-n-log-n-）" class="headerlink" title="代码（树状数组二分$~O(n\log n)~$）"></a><strong>代码（树状数组二分$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], t[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn], cut[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x[maxn], l[maxn], cal[maxn], bit1[maxt + <span class="number">1</span>], bit2[maxt + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x &amp; -x)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">long</span> <span class="keyword">long</span> rem)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] += x[u], bit2[i] += x[u] * t[u];</span><br><span class="line"><span class="keyword">int</span> now = maxt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = (rem -= l[u] &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = maxt, j = <span class="number">0</span>; rem &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">cal[u] += j &amp; <span class="number">1</span> ? min(temp / (j + <span class="number">1</span>), bit1[j + <span class="number">1</span>] - bit1[j]) : min(temp / (j ^ <span class="number">1</span>), bit1[j ^ <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &gt; bit2[i &gt;&gt; <span class="number">1</span> ^ j]) &#123;</span><br><span class="line">cal[u] += bit1[i &gt;&gt; <span class="number">1</span> ^ j];</span><br><span class="line">temp -= bit2[i &gt;&gt; <span class="number">1</span> ^ j];</span><br><span class="line">j ^= i &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) dfs1(v, rem);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t[u]; i &lt; maxt; i += lowbit(i)) bit1[i] -= x[u], bit2[i] -= x[u] * t[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> max1 = u ^ <span class="number">1</span> ? <span class="number">0</span> : <span class="number">0x3f3f3f3f3f3f3f3f</span>, max2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = dfs2(v);</span><br><span class="line"><span class="keyword">if</span> (max2 &lt; temp) max2 = temp;</span><br><span class="line"><span class="keyword">if</span> (max1 &lt; max2) swap(max1, max2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max(max2, cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i] &gt;&gt; l[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>, T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs2(<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 530 (Div. 1) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20530%20(Div.%201)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20530%20(Div.%201)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1098" target="_blank" rel="noopener">Codeforces Round #530 (Div. 1)</a></p><h2 id="A-Sum-in-the-tree"><a href="#A-Sum-in-the-tree" class="headerlink" title="A. Sum in the tree"></a>A. Sum in the tree</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一颗非负点权树，根的深度为$~1~$。给出根到所有奇数深度的点的链上的点权值之和$~s_u=\sum_{v\in L(1,~u)}a_v,~2\nmid dep_u~$。输出最小的可能的点权之和$~\sum_{i=1}^{n}a_i~$或不存在。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于偶数度数的点的$~s_u~$值，取所有儿子的最大值，再和它的父亲比较合法性即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; son(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; s(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">son[p[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">if</span> (~s[i] &amp;&amp; i ^ <span class="number">1</span> &amp;&amp; s[i] &lt; s[p[p[i]]])</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) que.push(v);</span><br><span class="line"><span class="keyword">if</span> (!~s[u]) &#123;</span><br><span class="line">s[u] = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : son[u]) s[u] = min(s[u], s[v]);</span><br><span class="line"><span class="keyword">if</span> (s[u] == <span class="number">0x3f3f3f3f3f3f3f3f</span>) s[u] = s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line">res += s[u] - s[p[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nice-table"><a href="#B-Nice-table" class="headerlink" title="B. Nice table"></a>B. Nice table</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个由$~\text{ATCG}~$组成的字母矩阵，输出一个同样大小的的字母矩阵满足所有$~2\times2~$均由$~\text{ATCG}~$组成，且使的两矩阵尽量相同。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于任意的合法矩阵，若第$~1~$行的字母超过$~2~$个，则不难推断出每列均由$~2~$个字母组成且奇偶性相同的列所用的字母组成一样。于是合法矩阵必满足每行（或列）均由$~2~$个字母组成，且相同的行（或列）所用的字母组成一样。枚举头$~2~$个字母组成的所有情况即可。考验代码能力。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; ch&#123;<span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'C'</span>, <span class="string">'G'</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(<span class="number">4</span>);</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">string</span> res, str, tmp(n * m, <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n * m; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">str += ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> same = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>, cnt[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(j ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j)</span><br><span class="line">tmp[i * m + j] = ch[p[(i &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ j &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) &#123;</span><br><span class="line">cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k)</span><br><span class="line"><span class="keyword">if</span> (str[i * m + j] == ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ k]]) ++cnt[(i ^ k) &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[<span class="number">0</span>] &lt; cnt[<span class="number">1</span>]) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span> ^ <span class="number">1</span>]];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i)</span><br><span class="line">tmp[i * m + j] = ch[p[(j &amp; <span class="number">1</span>) &lt;&lt; <span class="number">1</span> ^ i &amp; <span class="number">1</span>]];</span><br><span class="line">tot += max(cnt[<span class="number">0</span>], cnt[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (same &lt; tot) &#123;</span><br><span class="line">same = tot;</span><br><span class="line">res = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (next_permutation(p.begin(), p.end()));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ m; ++j) <span class="built_in">cout</span> &lt;&lt; res[i * m + j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Construct-a-tree"><a href="#C-Construct-a-tree" class="headerlink" title="C. Construct a tree"></a>C. Construct a tree</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个数$~n~$和$~s~$，输出一个大小为$~n~$的树满足所有子树的大小之和为$~s~$或不存在，若存在输出的树必须满足最大分叉$~k~$尽量小。<br>数据范围$~2\leq n\leq10^5,~1\leq s\leq10^{10}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有节点$~u~$对于$~s~$的贡献，当且仅当子树的根$~v~$为$~u~$的祖先时，$~u~$才会对答案贡献$~1~$。所以$~s=\sum_{i=1}^{n}dep_i\in[2n-1,~\frac{n(n+1)}{2}]~$。对于$~k~$叉树，$~s~$值的下限随着$~k~$增大减小。所以考虑二分，可以得出最小的$~k~$值。先构造出最小的$~k-1~$叉树，然后移动深的点即可。时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> num[maxn], lim[maxn], dep[maxn], sta[maxn], son[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * n * (n + <span class="number">1</span>) &lt; s &lt;&lt; <span class="number">1</span> || n &lt;&lt; <span class="number">1</span> &gt; s + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1L</span>L * n * (n + <span class="number">1</span>) == s &lt;&lt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> rem = n - <span class="number">1</span>, cnt = <span class="number">1</span>, cal = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; rem; ++i) &#123;</span><br><span class="line">cnt *= m;</span><br><span class="line"><span class="keyword">if</span> (rem &lt; cnt) cal += rem * i, rem = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> cal += cnt * i, rem -= cnt;</span><br><span class="line">&#125;</span><br><span class="line">cal &gt; s ? (l = m) : (r = m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> right = r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> flr = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, tot = <span class="number">0</span>; tot ^ n; ++i, flr *= l) &#123;</span><br><span class="line"><span class="keyword">if</span> (tot + flr &gt; n) num[i] = n - tot, tot = n;</span><br><span class="line"><span class="keyword">else</span> num[i] = flr, tot += flr;</span><br><span class="line">&#125;</span><br><span class="line">lim[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; <span class="number">1L</span>L * lim[i] * r &lt; n &lt;&lt; <span class="number">1</span>; ++i) lim[i + <span class="number">1</span>] = lim[i] * r;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (r = <span class="number">1</span>; num[r]; ++r) cnt += <span class="number">1L</span>L * r * num[r];</span><br><span class="line">l = <span class="number">2</span>;</span><br><span class="line">cnt -= s;</span><br><span class="line"><span class="keyword">while</span> (cnt) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[l] == lim[l]) ++l;</span><br><span class="line"><span class="keyword">if</span> (!num[r]) --r;</span><br><span class="line"><span class="keyword">if</span> (cnt &lt; r - l) &#123;</span><br><span class="line">--num[r];</span><br><span class="line">++num[r - cnt];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">--num[r];</span><br><span class="line">++num[l];</span><br><span class="line">cnt += l - r;</span><br><span class="line">&#125;</span><br><span class="line">sta[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, d = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">dep[i] = d;</span><br><span class="line"><span class="keyword">if</span> (!--num[d]) sta[++d] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ n; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sta[dep[i] - <span class="number">1</span>] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (++son[sta[dep[i] - <span class="number">1</span>]] == right) ++sta[dep[i] - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sta[dep[n] - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Eels"><a href="#D-Eels" class="headerlink" title="D. Eels"></a>D. Eels</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p><del>大鱼吃小鱼，小鱼吃虾米。</del>鱼缸里如果有$~n~$条鱼，则会发生$~n-1~$次生死$~\text{solo}~$，最终一人吃鸡。小鱼被大鱼吃掉后质量也送给了大鱼，类似于球球大作战。定义质量为$~a\leq b~$的两条鱼生死$~\text{solo}~$是危险的，如果$~a\leq b\leq2a~$。一个鱼缸的危险值定义为最多可能发生的危险$~\text{solo}~$次数。最开始鱼缸为空，每次加一条或者减一条质量为$~x~$的鱼，输出每次的危险值。<br>数据范围$~1\leq q\leq5\cdot10^5,~1\leq x\leq10^9~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对所有鱼的质量升序得到$~a_1,~a_2,~\dots,~a_n~$。定义如果$~a_i&gt;2\sum_{j&lt; i}a_j~$，则称它为肥鱼（算上第一只$~a_1~$）。设当前鱼缸有$~k~$只肥鱼，则下面证明危险值为$~n-k~$：</p><ol><li>对于肥鱼，它一定不会在危险$~\text{solo}~$中作为大鱼出现，所以危险值的上限为$~n-k~$。</li><li>在每次选择最小的两只鱼$~\text{solo}~$，这样危险$~\text{solo}~$的总次数为$~n-k~$。<br>所以现在对于每次操作，算出当前的$~k~$值即可。考虑区间$~[1,~2),~[2,~4),~\dots,~[2^m,~2^{m+1}),~\dots~$，显然每个区间至多一只肥鱼。那么用$~\text{multiset}~$来维护每个区间的鱼，这样每次操作就能在$~O(\log q\log x)~$内算出$~k~$值。总时间复杂度为$~O(q\log q\log x)~$。</li></ol><p>注意数据范围过大，可能需要$~\text{fastIO}~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; seg[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> q, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">char</span> op;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x; i &lt;&lt;= <span class="number">1</span>, ++idx);</span><br><span class="line"><span class="keyword">if</span> (op == <span class="string">'+'</span>) &#123;</span><br><span class="line">seg[idx].insert(x);</span><br><span class="line">sum[idx] += x;</span><br><span class="line">++cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">seg[idx].erase(seg[idx].find(x));</span><br><span class="line">sum[idx] -= x;</span><br><span class="line">--cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = cnt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ <span class="number">32</span>; tot += sum[i++])</span><br><span class="line"><span class="keyword">if</span> (sum[i] &amp;&amp; *(seg[i].begin()) &gt; tot &lt;&lt; <span class="number">1</span>) --res;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 527 (Div. 3) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20527%20(Div.%203)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20527%20(Div.%203)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1092" target="_blank" rel="noopener">Codeforces Round #527 (Div. 3)</a></p><h2 id="A-Uniform-String"><a href="#A-Uniform-String" class="headerlink" title="A. Uniform String"></a>A. Uniform String</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出任意长度为$~n~$且由前$~k~$个小写字母组成的串，要求出现次数最少的尽量多。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, k;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">        <span class="keyword">while</span> (n--) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(<span class="string">'a'</span> + n % k);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Teams-Forming"><a href="#B-Teams-Forming" class="headerlink" title="B. Teams Forming"></a>B. Teams Forming</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~n~$个数字，每个数字可以加若干次$~1~$，求最少次数使得这$~n~$个数字可以两两配对，每对都一样大。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) res += i &amp; <span class="number">1</span> ? a[i] : -a[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Prefixes-and-Suffixes"><a href="#C-Prefixes-and-Suffixes" class="headerlink" title="C. Prefixes and Suffixes"></a>C. Prefixes and Suffixes</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个长度为$~n~$的串的$~n-1~$个前缀和后缀打乱顺序给出。输出任意合法的划分，使得存在一个长度为$~n~$的串，它的所有前缀和后缀均和该划分一致。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>暴力先枚举两个给定串合成的长度为$~n~$的串然后判断。代码的时间复杂度上限是$~O(n^3)~$，但在枚举的过程中最多$~4~$次即可枚举出合法的原串，所以实际时间复杂度为$~O(n^2)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> size = n - <span class="number">1</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs(size), fuck[n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; str : strs) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        fuck[(<span class="keyword">int</span>)str.size()].push_back(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; ggsimida;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ <span class="number">2</span>; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k ^ <span class="number">2</span>; ++k) &#123;</span><br><span class="line">        <span class="built_in">string</span> now = fuck[i][j] + fuck[n - i][k];</span><br><span class="line">        <span class="keyword">if</span> (ggsimida.find(now) != ggsimida.end()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; use(size, <span class="literal">false</span>);</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">res</span><span class="params">(size, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">int</span> cal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">pre</span><span class="params">(now, <span class="number">0</span>, len)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx ^ size; ++idx) <span class="keyword">if</span> (!use[idx] &amp;&amp; strs[idx] == pre) &#123;</span><br><span class="line">                use[idx] = <span class="literal">true</span>;</span><br><span class="line">                res[idx] = <span class="string">'P'</span>;</span><br><span class="line">                ++cal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">suf</span><span class="params">(now, len, n - len)</span></span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> idx = <span class="number">0</span>; idx ^ size; ++idx) <span class="keyword">if</span> (!use[idx] &amp;&amp; strs[idx] == suf) &#123;</span><br><span class="line">                use[idx] = <span class="literal">true</span>;</span><br><span class="line">                res[idx] = <span class="string">'S'</span>;</span><br><span class="line">                ++cal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cal == size) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        ggsimida.insert(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D1-Great-Vova-Wall-Version-1"><a href="#D1-Great-Vova-Wall-Version-1" class="headerlink" title="D1. Great Vova Wall (Version 1)"></a>D1. Great Vova Wall (Version 1)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>铺砖，宽度为$~n~$，初始每个位置已经铺了一些$~1\times1~$的砖在最下面。问是否能继续放若干个$~2\times1~$的砖（横竖均可），使得最后顶面是平的。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑黑白染色，可以铺平当前仅当黑白数量一致。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        (n ^ a) &amp; <span class="number">1</span> ? ++cnt : --cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(cnt) &lt; <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D2-Great-Vova-Wall-Version-2"><a href="#D2-Great-Vova-Wall-Version-2" class="headerlink" title="D2. Great Vova Wall (Version 2)"></a>D2. Great Vova Wall (Version 2)</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>上一题的基础上禁止竖着放砖。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>单调栈模拟。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; fuck;</span><br><span class="line">    <span class="keyword">int</span> shit = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        shit = max(shit, a);</span><br><span class="line">        <span class="keyword">if</span> (fuck.empty()) fuck.push(a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fuck.top() &lt; a) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fuck.top() == a) fuck.pop();</span><br><span class="line">        <span class="keyword">else</span> fuck.push(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (fuck.empty() || fuck.size() == <span class="number">1</span> &amp;&amp; fuck.top() == shit) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Minimal-Diameter-Forest"><a href="#E-Minimal-Diameter-Forest" class="headerlink" title="E. Minimal Diameter Forest"></a>E. Minimal Diameter Forest</h2><h2 id="F-Tree-with-Maximum-Cost"><a href="#F-Tree-with-Maximum-Cost" class="headerlink" title="F. Tree with Maximum Cost"></a>F. Tree with Maximum Cost</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个大小为$~n~$的有点权树，两点之间的距离定义为最短路径上的边数。定义$~cost(u)=\sum_{v=1}^n{dist(u,~v)\cdot a_i}~$，求$~\min{cost(u)}~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑相邻两个点$~u~$和$~v~$之间的答案转移。删去$~edge(u,~v)~$，则原树被划分为两个子树，记点集分别为$~S_u~$和$~S_v~$。则有等式</p><script type="math/tex; mode=display">\begin{aligned}res_u+\sum_{i\in S_u}{a_i}  &=res_v+\sum_{S_v}{a_i}                         \\res_u                       &=res_v+\sum_{i=1}^n{a_i}-2\sum_{i\in S_u}{a_i} \\\end{aligned}</script><p>那么任取一点为根，第一遍$~\text{DFS}~$找出对于所有子树上子树根的$~cost~$和子树的权值之和$~\sum_{i\in S_u}{a_i}~$，第二遍$~\text{DFS}~$更新所有点的答案。时间复杂度为$~O(n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], res[maxn], ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) res[u] += dfs1(v, u), a[u] += a[v];</span><br><span class="line">    <span class="keyword">return</span> res[u] += a[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    ans = max(ans, res[u] = res[p] + a[<span class="number">1</span>] - (a[u] &lt;&lt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v ^ p) dfs2(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        adj[u].push_back(v);</span><br><span class="line">        adj[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    res[<span class="number">0</span>] = dfs1();</span><br><span class="line">    dfs2();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Codeforces Round 526 (Div. 2) (TBC)</title>
      <link href="/2019/01/17/Codeforces%20Round%20526%20(Div.%202)%20(TBC)/"/>
      <url>/2019/01/17/Codeforces%20Round%20526%20(Div.%202)%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1084" target="_blank" rel="noopener">Codeforces Round #526 (Div. 2)</a></p><h2 id="A-The-Fair-Nut-and-Elevator"><a href="#A-The-Fair-Nut-and-Elevator" class="headerlink" title="A. The Fair Nut and Elevator"></a>A. The Fair Nut and Elevator</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~N~$个楼层，第$~i~$层住着$~a_i~$个人。每天每人都要坐两次电梯，第一次从第$~i~$层坐电梯到第$~1~$层，第二次从第$~1~$层坐电梯到第$~i~$层。电梯一次只能载一个人且有一个初始位置第$~x~$层。电梯的运行每次必须先从第$~x~$层到起点层，再到终点层，再回到$~x~$层。求$~x~$的最优解使得每天电梯的运行距离最短，输出这个最短距离。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。贪心。显然$~x=1~$是最优解。输出$~4\sum a_i(i-1)~$即可。证明略。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        res += a * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (res &lt;&lt; <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Kvass-and-the-Fair-Nut"><a href="#B-Kvass-and-the-Fair-Nut" class="headerlink" title="B. Kvass and the Fair Nut"></a>B. Kvass and the Fair Nut</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数$~v_1,~v_2,~\dots,~v_n~$，让他们一共减去$~s~$，使得最小值最大，输出这个最小值。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。有巨坑。说多都是泪。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> minn = <span class="number">0x3f3f3f3f3f3f3f3f</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">        minn = min(minn, v);</span><br><span class="line">        sum += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; s) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n * minn + s &lt; sum) <span class="built_in">cout</span> &lt;&lt; minn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (sum - s) / n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-The-Fair-Nut-and-String"><a href="#C-The-Fair-Nut-and-String" class="headerlink" title="C. The Fair Nut and String"></a>C. The Fair Nut and String</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，求生成的全$~a~$串数量，满足相邻的两个$~a~$在原串中必有一个$~b~$在这两个$~a~$之间。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。原串中相邻的两个$~b~$之间若有$~n~$个$~a~$，则至多在这$~n~$个$~a~$中选$~1~$个，显然有$~n+1~$种选法（包括不选）。答案则是$~{\prod(n_i+1)}-1~$，因为要减去空串。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> ch : str) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'a'</span>) ++cnt;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'b'</span>) res = <span class="number">1L</span>L * res * cnt % mod, cnt = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1L</span>L * res * cnt % mod - <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-The-Fair-Nut-and-the-Best-Path"><a href="#D-The-Fair-Nut-and-the-Best-Path" class="headerlink" title="D. The Fair Nut and the Best Path"></a>D. The Fair Nut and the Best Path</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个树，有非负整数点权$~w~$和正整数边权$~c~$，一条链的值为$~\sum{w}-\sum{c}~$。求出最大的链值（单个点视为退化链也算）。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>树形$~\text{DP}~$。任取一个点为树根，每个点记录以它为一个端点，另一个端点为它后代的最大链值$~x~$，对于叶子有$~x=c~$。那么考虑经过点$~u~$且在以$~u~$为根的子树上的链的最大值$~max_u~$，对$~u~$的所有儿子$~v~$的$~x_v~$值与连接它们的边权$~w_v~$做差，加入两个$~x=w=0~$的虚点，则可以用这些差$~x_v-w_v~$的最大值来更新$~x_u~$，最大值和次大值来更新$~max_u~$。于是可以在$~\text{DFS}~$过程中线性地更新出答案。由于数据范围允许时间复杂度为$~O(n\log{n})~$，于是可以用排序来简化求最大值和次大值的代码。</p><p>已更新简便线性做法。</p><h3 id="代码（-O-n-log-n-）"><a href="#代码（-O-n-log-n-）" class="headerlink" title="代码（$~O(n\log{n})~$）"></a><strong>代码（$~O(n\log{n})~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; sons(<span class="number">2</span>, <span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> son : adj[u]) <span class="keyword">if</span> (son.first ^ p) &#123;</span><br><span class="line">        ret = max(ret, dfs(son.first, u));</span><br><span class="line">        sons.push_back(c[son.first] - son.second);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sons.begin(), sons.end());</span><br><span class="line">    reverse(sons.begin(), sons.end());</span><br><span class="line">    c[u] += sons[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> max(ret, c[u] + sons[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        adj[u].push_back(make_pair(v, w));</span><br><span class="line">        adj[v].push_back(make_pair(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[maxn], dp[maxn], res;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>, <span class="keyword">int</span> p = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">    res = max(res, dp[u] = c[u]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (v.first ^ p) &#123;</span><br><span class="line">        dfs(v.first, u);</span><br><span class="line">        res = max(res, dp[u] + dp[v.first] - v.second);</span><br><span class="line">        dp[u] = max(dp[u], c[u] + dp[v.first] - v.second);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">while</span> (--n) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        adj[u].push_back(make_pair(v, w));</span><br><span class="line">        adj[v].push_back(make_pair(u, w));</span><br><span class="line">    &#125;</span><br><span class="line">    dfs();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-The-Fair-Nut-and-Strings"><a href="#E-The-Fair-Nut-and-Strings" class="headerlink" title="E. The Fair Nut and Strings"></a>E. The Fair Nut and Strings</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>找出$~k~$个长度为$~n~$且字典序在$~s~$和$~t~$之间的$~ab~$串，使得不一样的前缀的数量最多，输出最大的不同前缀数。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑所有$~ab~$串构成的$~\text{trie}~$树，这显然是一个完全二叉树。再考虑所求的$~k~$个$~ab~$串构成的$~\text{trie}~$树，则答案是节点数量，且第$~i~$层的节点数量至多为$~\min{|t_i|-|s_i|,~k}~$个。其中$~|str_i|~$表示字符串$~str~$前$~i~$个字符构成的前缀所对应的二进制数值。自上而下模拟更新答案即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">string</span> s, t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1L</span>L * n * k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, dif = <span class="number">0</span>; i ^ n &amp;&amp; (dif = (dif &lt;&lt; <span class="number">1</span>) + (t[i] == <span class="string">'b'</span>) - (s[i] == <span class="string">'b'</span>)) &lt; k; ++i)</span><br><span class="line">        res -= k - dif - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Max-Mex"><a href="#F-Max-Mex" class="headerlink" title="F. Max Mex"></a>F. Max Mex</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一棵大小为$~n~$的树，所有节点的初始值为$~0,~1,~\dots,~n-1~$的一个全排列。对于这棵树上的任意一条链$~l~$，$~V(l)~$表示$~l~$上所有点的集合。有$~q~$次修改或查询操作，修改为交换$~2~$个节点的值，查询为输出$~\max{mex(V(l))}~$。</p><p>注：$~mex(S)~$表示不在集合$~S~$中的最小自然数，即$~\min{x\in\Bbb{N}:x\not\in S}~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>老子现在不会。据说是线段树维护各值所在点之间的连接关系。</p>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Avito Cool Challenge 2018 (TBC)</title>
      <link href="/2019/01/17/Avito%20Cool%20Challenge%202018%20(TBC)/"/>
      <url>/2019/01/17/Avito%20Cool%20Challenge%202018%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1081" target="_blank" rel="noopener">Avito Cool Challenge 2018</a></p><h2 id="A-Definite-Game"><a href="#A-Definite-Game" class="headerlink" title="A. Definite Game"></a>A. Definite Game</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个正整数$~n~$，每次减去一个互质的数，输出最小结果。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n ^ <span class="number">2</span> ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Farewell-Party"><a href="#B-Farewell-Party" class="headerlink" title="B. Farewell Party"></a>B. Farewell Party</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>原本有一个数列$~b_1,~b_2,~\dots,~b_n~$，先已知每个数在这个数列中有多少个其他的数与它不一样的数列$~a_1,~a_2,~\dots,~a_n~$，输出任意合法的$~{b_n}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>如果两个数字$~x~$和$~y~$在$~{b_n}~$中出现的次数一样，则对应的$~{a_n}~$也一样于是考虑$~z~$在$~{a_n}~$中出现的次数$~cnt~$，则必有$~cnt\mid n-z~$。直接模拟即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr(n), cnt(n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;&gt; res(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; a : arr) <span class="built_in">cin</span> &gt;&gt; a, ++cnt[a];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, now = <span class="number">1</span>; i ^ n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cnt[i] % (n - i))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, tot = cnt[i] / (n - i); j ^ tot; ++j, ++now)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k ^ n; ++k)</span><br><span class="line">                res[i].push(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Possible"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> last = arr.back();</span><br><span class="line">    arr.pop_back();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> a : arr) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[a].top() &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        res[a].pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res[last].top() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Colorful-Bricks"><a href="#C-Colorful-Bricks" class="headerlink" title="C. Colorful Bricks"></a>C. Colorful Bricks</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对连续相邻的$~n~$块砖进行$~m~$染色，使得有$~k~$块砖和左边的不一样（第一块不算），求所有染色可能数量。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>数学推导发现答案就是$~\binom{n-1}{k}m(m-1)^k~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">        a = mul(a, a);</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mul(mul(mul(mul(fact[n - <span class="number">1</span>], finv[k]), finv[n - k - <span class="number">1</span>]), m), fpow(m - <span class="number">1</span>, k)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Maximum-Distance"><a href="#D-Maximum-Distance" class="headerlink" title="D. Maximum Distance"></a>D. Maximum Distance</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个给定一个$~n~$个点$~m~$条边的联通图（可以有重边自环），有边权$~w_e~$并给定$~k~$个关键点。对于每条简单路径$~L(u,~v)~$，定义路径的花费$~cost(L(u,~v))=\max_{e\in L(u,~v)}{w_e}~$。定义距离$~dist(u,~v)=\min{cost(L(u,~v))}~$。输出离每个关键点最远的关键点的距离。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~\text{Kruskal}~$做法的最小生成树，那么$~dist(u,~v)~$即为$~\text{MST}~$上两点间的路径花费。不难发现这时候关键点的最远距离都一样，为$~\text{Kruskal}~$构造$~\text{MST}~$过程中第一个联通所有关键点的边权。为维护关键点的连通性，在并查集的过程中不要按秩合并，而是尽量以关键点为父亲，记录合并关键点连通性的次数，到$~k-1~$次时直接输出答案即可。时间复杂度上限为$~O(n\log n+m\log m)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a)</span> </span>&#123;<span class="keyword">return</span> fa[a] ^ a ? (fa[a] = find(fa[a])) : a;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vip(n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ k; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        vip[x] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; edge(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : edge) <span class="built_in">cin</span> &gt;&gt; e.second.first &gt;&gt; e.second.second &gt;&gt; e.first;</span><br><span class="line">    sort(edge.begin(), edge.end());</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> e : edge) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = find(e.second.first);</span><br><span class="line">        <span class="keyword">int</span> b = find(e.second.second);</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (vip[a]) fa[b] = a;</span><br><span class="line">        <span class="keyword">else</span> fa[a] = b;</span><br><span class="line">        <span class="keyword">if</span> (vip[a] &amp;&amp; vip[b]) <span class="keyword">if</span> (++cnt == k) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ k; ++i) <span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; e.first &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>区间DP与平行四边形优化</title>
      <link href="/2019/01/17/%E5%8C%BA%E9%97%B4DP%E4%B8%8E%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2019/01/17/%E5%8C%BA%E9%97%B4DP%E4%B8%8E%E5%B9%B3%E8%A1%8C%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="区间DP"><a href="#区间DP" class="headerlink" title="区间DP"></a>区间DP</h2><p>对于询问区间最优解的问题，可以先考虑较小区间的最优解，然后通过合并小区间得到大区间最有解。动态规划状态转移式</p><script type="math/tex; mode=display">dp[i][j]=\min\{dp[i][k]+dp[k+1][j]\}+f[i][j]</script><p>算法实现过程中通常要用到三层$~\text{for}~$循环，从外到里分别维护区间宽度$~j-i~$，区间端点$~i~$和区间分割点$~k~$，复杂度为$~O(N^3)~$。</p><h2 id="四边形不等式"><a href="#四边形不等式" class="headerlink" title="四边形不等式"></a>四边形不等式</h2><p>如果$~\forall~a\leq b\leq c\leq d~$，$~f~$满足</p><script type="math/tex; mode=display">f(a,~c)+f(b,~d)\leq f(a,~d)+f(b,~c)</script><p>则称$~f~$满足四边形不等式。</p><h2 id="区间包含单调性"><a href="#区间包含单调性" class="headerlink" title="区间包含单调性"></a>区间包含单调性</h2><p>如果$~\forall~I_1\subseteq I_2~$，$~f~$满足<script type="math/tex">f(I_1)\leq f(I_2)</script>则称$~f~$满足区间包含单调性。</p><h2 id="平行四边形优化"><a href="#平行四边形优化" class="headerlink" title="平行四边形优化"></a>平行四边形优化</h2><p>考虑状态转移过程中的最优转移点，记$~k[i][j]~$为$~dp[i][j]~$的最优转移点，即</p><script type="math/tex; mode=display">dp[i][j]=dp[i][k[i]][j]]+dp[k[i][j]+1][j]+f[i][j]</script><p>如果$~dp~$和$~f~$都满足四边形不等式和区间包含单调性，则必有</p><script type="math/tex; mode=display">k[i][j-1]\leq k[i][j]\leq k[i+1][j]</script><p>那么缩小状态转移点的区间范围，在更新$~dp[i][j]~$的同时更新$~k[i][j]~$，时间复杂度可以优化至$~O(n^2)~$。区间范围和时间复杂度的证明目前没看懂，先放个百度百科的<a href="https://baike.baidu.com/view/1985058" target="_blank" rel="noopener">链接</a>。<del>反正百度到的CSDN和博客园都是抄来抄去那破尿性，更加看不懂，先凑合着用。</del></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3506"><a href="#HDU3506" class="headerlink" title="HDU3506"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3506" target="_blank" rel="noopener">HDU3506</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个大小为$~N~$的环，每次合并相邻区间$~A~$和$~B~$的花费是$~(\sum A+\sum B)*(|A|+|B|)~$，求将这个环合并为一个集合的最小总花费。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$为将$~i,~\dots,~j~$合并的最小花费。注意到这题是环形数组，则可以将数组扩大一倍，令$~a[n+i]=a[i],~i=1,~2,~\dots,~n-1~$，同时用平行四边形优化。时间复杂度$~O(N^2)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], s[maxn][maxn], pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; pre[i], pre[i + n] = pre[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n &lt;&lt; <span class="number">1</span>; ++i) pre[i] += pre[i - <span class="number">1</span>], dp[i][i] = <span class="number">0</span>, s[i][i] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len ^ n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = s[i][j - <span class="number">1</span>]; k &lt;= s[i + <span class="number">1</span>][j]; ++k) <span class="keyword">if</span> (dp[i][j] &gt; dp[i][k] + dp[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>]) &#123;</span><br><span class="line">s[i][j] = k;</span><br><span class="line">dp[i][j] = dp[i][k] + dp[k + <span class="number">1</span>][j] + pre[j] - pre[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = min(res, dp[i][i + n - <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU4632"><a href="#HDU4632" class="headerlink" title="HDU4632"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4632" target="_blank" rel="noopener">HDU4632</a></h3><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个字符串，求出所有的回文子序列个数模$~10007~$的答案，时间复杂度要求在$~O(n^2)~$以内。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$为区间$~[i,~j]~$内的回文子序列个数。则根据容斥原理，有状态转移式</p><script type="math/tex; mode=display">dp[i][j]=\begin{cases}dp[i][j-1]+dp[i+1][j]-dp[i+1][j]    &str[i]\not=str[j]  \\dp[i][j-1]+dp[i+1][j]+1             &str[i]=str[j]\end{cases}</script><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= t; ++cas) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> size = (<span class="keyword">int</span>)str.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i - <span class="number">1</span>] ^ str[i]) dp[i - <span class="number">1</span>][i] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i - <span class="number">1</span>][i] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt; size; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + len ^ size; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line">dp[i][j] = add(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ str[j]) dp[i][j] = sub(dp[i][j], dp[i + <span class="number">1</span>][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = add(dp[i][j], <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; dp[<span class="number">0</span>][size - <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU4745"><a href="#HDU4745" class="headerlink" title="HDU4745"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4745" target="_blank" rel="noopener">HDU4745</a></h3><h4 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给一个大小为$~N~$的环形数组，要求分别顺时针逆时针一圈以内各选一个子序列，使得子序列一样，求最大的子序列长度。</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>其实差不多就是求最大的回文子序列长度，注意细节，具体看代码。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ maxn; ++i) dp[i][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">if</span> (!n) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[n + i] = a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">1</span>; len ^ n; ++len) <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + len &lt;= n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = i + len;</span><br><span class="line"><span class="keyword">if</span> (a[i] == a[j]) dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) res = max(res, max(dp[i][i + n - <span class="number">1</span>], dp[i][i + n - <span class="number">2</span>] + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 区间DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斜率优化DP</title>
      <link href="/2019/01/17/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/"/>
      <url>/2019/01/17/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[<h2 id="斜率优化DP思想"><a href="#斜率优化DP思想" class="headerlink" title="斜率优化DP思想"></a>斜率优化DP思想</h2><p>对于状态转移公式满足如下条件的动态规划</p><script type="math/tex; mode=display">dp[i]=\min_{j<i}\{f[j]-p[i]*g[j]\}+q[i]</script><p>其中$~f~$和$~g~$均可线性时间内求出，且$~p~$和$~g~$单调递增。朴素的做法是直接暴力循环计算状态转移，时间复杂度为$~O(n^2)~$。考虑$~dp[i]~$从$~j&lt;k~$的两种转移，$~j~$比$~k~$优当且仅当</p><script type="math/tex; mode=display">\begin{aligned}f[j]-p[i]*g[j]  &<f[k]-p[i]*g[k]                \\p[i]            &<\frac{f[k]-f[j]}{g[k]-g[j]}   \\\end{aligned}</script><p>让$~f~$和$~g~$分别表示平面直角坐标系的纵坐标和横坐标，则不等式右边即为经过点$~P_j~$与$~P_k~$的直线的斜率$~K(P_j,~P_k)~$。于是$~j~$比$~k~$优当且仅当$~p[i]&lt; K(P_j,~P_k)~$。同理当$~j&gt;k~$时，$~j~$比$~k~$优当且仅当$~p[i]&gt;K(P_k,~P_j)~$。于是对于$~dp[i]~$，点集$~{P_i=(g[i],~f[i])}~$的下凸包中，满足过点$~P_j~$且斜率为$~p[i]~$的直线不经过凸包内部的点$~P_j~$即为最优转移点。由于$~P_j~$的横坐标$~g[j]~$与斜率$~p[i]~$均单调递增，则凸包和斜率的转移可以用单调队列维护，总复杂度为线性复杂度$~O(n)~$。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p><strong>维护凸包要去重点！维护凸包要去重点！维护凸包要去重点！重要的事情说三遍！</strong></p><p>如过存在重点则在凸包加新点时有可能改变凸包性质。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3507"><a href="#HDU3507" class="headerlink" title="HDU3507"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3507" target="_blank" rel="noopener">HDU3507</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定一个长度为$~N~$的数列$~C[1],~C[2],~\dots,~C[N]~$，和自然数$~M~$对于连续子列$~C[l,~r]~$，它的花费定义为$~cost(l,r)=\sum_{i=l}^r(C[i])^2+M~$。要求找到整个数列的一种划分，使得总花费$~\sum{cost(l,r)}~$最小，平求出这个最小花费。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，用$~dp[i]~$表示对于数列$~C[1],~C[2],~\dots,~C[i]~$的最小花费答案，记前缀和$~pre[i]=\sum_{j=1}^iC[j]~$，则有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp[i]   &=\min_{j< i}\left\{dp[j]+(pre[i]-pre[j])^2+M\right\}                   \\        &=\min_{j< i}\left\{dp[j]+pre[j]^2-2*pre[i]*pre[j]\right\}+M+pre[i]^2   \\\end{aligned}</script><p>这样的时间复杂度为$~O(N^2)~$，显然会$~\text{tle}~$。但注意到$~pre~$满足单调递增性质，令$~{P_i=(pre[i],~dp[i]+pre[i]^2)}~$，则维护下凸壳，时间复杂度可以优化为$~O(n)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pre[maxn], dp[maxn], x[maxn], y[maxn];</span><br><span class="line"><span class="keyword">int</span> que[maxn], tail;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span> (c) pre[i] = pre[i - <span class="number">1</span>] + c;</span><br><span class="line">            <span class="keyword">else</span> --i, --n;</span><br><span class="line">        &#125;</span><br><span class="line">        x[que[tail = <span class="number">1</span>] = <span class="number">1</span>] = pre[<span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        y[<span class="number">1</span>] = (dp[<span class="number">1</span>] = pre[<span class="number">1</span>] * pre[<span class="number">1</span>] + m) + pre[<span class="number">1</span>] * pre[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j ^ tail &amp;&amp; y[que[j + <span class="number">1</span>]] - y[que[j]] &lt; (x[que[j + <span class="number">1</span>]] - x[que[j]]) * pre[i]) ++j;</span><br><span class="line">            x[i] = pre[i] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            y[i] = (dp[i] = y[que[j]] - pre[i] * x[que[j]] + m + pre[i] * pre[i]) + pre[i] * pre[i];</span><br><span class="line">            <span class="keyword">while</span> (tail &amp;&amp; (y[i] - y[que[tail]]) * (x[i] - x[que[tail - <span class="number">1</span>]]) &lt; (y[i] - y[que[tail - <span class="number">1</span>]]) * (x[i] - x[que[tail]])) --tail;</span><br><span class="line">            que[++tail] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU3045"><a href="#HDU3045" class="headerlink" title="HDU3045"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3045" target="_blank" rel="noopener">HDU3045</a></h3><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>给定$~N~$个正整数，将其化为若干个不小于$~T~$的集合$~S~$，每个集合的花费定义为$~cost(S)=\sum{S}-|S|*\min{S}~$，求出最小的总花费。</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>贪心，对这$~N~$个数排序，则最优的划分方式必为连续的子段划分。此时每一个子集的最小值即为子集的第一个数，最小花费可以转化为最大化$~\sum(S-|S|*\min{S})~$。动态规划，记$~dp[i]~$为排好序后前$~i~$个数所对应的上式的值，则有状态转移方式</p><script type="math/tex; mode=display">\begin{aligned}dp[i]   &=\max_{T\leq{j}\leq{i-T}}\left\{dp[j]+a[j+1]*(i-j)\right\}         \\        &=\max_{T\leq{j}\leq{i-T}}\left\{dp[j]-a[j+1]*j+i*a[j+1]\right\}    \\\end{aligned}</script><p>这时令点集$~{P_i=(a[i+1],~a[i+1]\cdot i-dp[i])}~$，那么对于$~j&lt; k~$，$~j~$比$~k~$优当且仅当$~i&lt; K(P_j,~P_k)~$，对于$~j&gt;k~$，$~j~$比$~k~$优当且仅当$~i&gt;K(P_k,~P_j)~$。所以维护下凸壳即可。<strong>这题会出现重点，必须用大于等于或小于等于判断斜率！</strong></p><p><strong>代码</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn], dp[maxn], sum;</span><br><span class="line"><span class="keyword">int</span> que[maxn], tail;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(i) a[que[i] + 1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Y(i) (X(i) * que[i] - dp[que[i]])</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, t;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; t) &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            sum += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j ^ tail &amp;&amp; (Y(j + <span class="number">1</span>) - Y(j)) &lt;= (X(j + <span class="number">1</span>) - X(j)) * i) ++j;</span><br><span class="line">            dp[i] = i * X(j) - Y(j);</span><br><span class="line">            <span class="keyword">int</span> temp = i - t + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp &lt; t) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> x = a[temp + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> y = x * temp - dp[temp];</span><br><span class="line">            <span class="keyword">while</span> (tail &amp;&amp; (y - Y(tail)) * (x - X(tail - <span class="number">1</span>)) &lt;= (y - Y(tail - <span class="number">1</span>)) * (x - X(tail))) --tail;</span><br><span class="line">            j = min(j, tail);</span><br><span class="line">            que[++tail] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sum - dp[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 斜率DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列优化DP</title>
      <link href="/2019/01/17/%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/"/>
      <url>/2019/01/17/%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96DP/</url>
      
        <content type="html"><![CDATA[<h2 id="队列优化DP思想"><a href="#队列优化DP思想" class="headerlink" title="队列优化DP思想"></a>队列优化DP思想</h2><p>对于状态转移公式满足如下条件的动态规划</p><script type="math/tex; mode=display">dp[i]=(\min\text{or}\max)\{f[j]\}+g[i],~j\in[\alpha[i],\beta[i]]</script><p>其中$~f~$和$~g~$均可线性时间内求出，且$\alpha~$和$~\beta~$单调递增。朴素的做法是直接暴力循环计算状态转移，时间复杂度为$~O(n^2)~$。但是注意到区间$~[\alpha,~\beta]~$的单调递增性质，可以用一个叫做<strong>单调队列</strong>的数据结构来维护区间的最值。</p><h3 id="单调队列的性质"><a href="#单调队列的性质" class="headerlink" title="单调队列的性质"></a><strong>单调队列的性质</strong></h3><ol><li>可以用双端队列或者双指针数组实现，内部的任意元素$~que[i]~$表示$~f~$的角标。</li><li>角标有序储存，即$~que[i]&lt;que[j],~\forall~i&lt;j~$。</li><li>角标对应的数组值单调，即$~f[que[i]]~$单调递增或者单调递减。</li></ol><h3 id="单调队列的操作（单调递减队列维护区间最大值）"><a href="#单调队列的操作（单调递减队列维护区间最大值）" class="headerlink" title="单调队列的操作（单调递减队列维护区间最大值）"></a><strong>单调队列的操作（单调递减队列维护区间最大值）</strong></h3><ol><li>每次更新区间时，从小到大考虑新加入的角标$~now~$，将所有队列$~que~$中满足$~que[cmp]&lt;que[now]~$的元素$~cmp~$从队列$~que~$中移除。由于单调队列的性质，只需要让$~now~$与队列$~que~$的尾部元素$~last~$比较即可。</li><li>将$~now~$放入队列$~que~$尾部，经过上一个操作，单调队列性质依然保持。</li><li>将队列$~que~$头部所有不在区间$~[\alpha,~\beta]~$的元素$~head~$从队列$~que~$中移除。由于区间$~[\alpha,~\beta]~$的单调递增性质，单调队列性质依然保持，且此时$~\max{f[i]}=f[que[head]]~$。</li></ol><h3 id="复杂度计算"><a href="#复杂度计算" class="headerlink" title="复杂度计算"></a><strong>复杂度计算</strong></h3><p>每个角标$~i~$至多被放入队列$~que~$或者从队列$~que~$中移除一次，所以是线性复杂度$~O(n)~$。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="HDU3401"><a href="#HDU3401" class="headerlink" title="HDU3401"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3401" target="_blank" rel="noopener">HDU3401</a></h3><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h4><p>炒股，一共$~T~$天，第$~i~$天股票的买价是$~ap[i]~$、最多可以买$~as[i]~$股，卖价是$~bp[i]~$、最多可以卖$~bs[i]~$股，且每两次交易之间相隔必须大于$~W~$天，最大屯股量为$~maxp~$，问最后的最大收益。</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h4><p>动态规划，记$~dp[i][j]~$表示在第$~i~$天还剩下$~j~$股的最大收益，则有$~3~$种状态更新</p><script type="math/tex; mode=display">dp[i][j]=\max\begin{cases}dp[i-1][j]              &\text{null}                        \\dp[i-w-1][j-k]-ap[i]*k  &\text{$k\leq\min(j,~as[i])$}       \\dp[i-w-1][j+k]+bp[i]*k  &\text{$k\leq\min(maxp-j~,bs[i])$}  \\\end{cases}</script><p>这样的时间复杂度为$~O(T\cdot maxp^2)~$，显然会$~\text{TLE}~$。但观察$~dp[i][j]~$的第二种状态更新，有</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j]    &=\max\alpha[l]-ap[i]*j     \\\alpha[l]   &=dp[i-w-1][l]+ap[i]*[l]    \\l           &\in[\max(0,~j-as[i]),~j]   \\\end{aligned}</script><p>第三种状态更新同理</p><script type="math/tex; mode=display">\begin{aligned}dp[i][j]    &=\max\beta[l]-bp[i]*j          \\\beta[l]    &=dp[i-w-1][l]+bp[i]*[l]        \\l           &\in[j,~\min(maxp,~j+bs[i])]    \\\end{aligned}</script><p>于是可以用单调队列来维护$~\max(\alpha,\beta)~$。这样对于每个$~dp[i][j]~$状态转移的平均复杂度为$~O(1)~$，总时间复杂度为$~O(T\cdot maxp)~$。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> ap[maxn], bp[maxn], as[maxn], bs[maxn], temp[maxn], dp[maxn &lt;&lt; <span class="number">1</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n, maxp, w;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; maxp &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; ap[i] &gt;&gt; bp[i] &gt;&gt; as[i] &gt;&gt; bs[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= w; ++i) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= maxp; ++j) dp[i][j] = -inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) dp[i + w][j] = dp[i + w - <span class="number">1</span>][j];</span><br><span class="line">            que.clear();</span><br><span class="line">             <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) &#123;</span><br><span class="line">                temp[j] = dp[i - <span class="number">1</span>][j] + ap[i] * j;</span><br><span class="line">                <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j]) que.pop_back();</span><br><span class="line">                que.push_back(j);</span><br><span class="line">                <span class="keyword">while</span> (que.front() &lt; j - as[i]) que.pop_front();</span><br><span class="line">                dp[i + w][j] = max(dp[i + w][j], temp[que.front()] - ap[i] * j);</span><br><span class="line">            &#125;</span><br><span class="line">            que.clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) temp[j] = dp[i - <span class="number">1</span>][j] + bp[i] * j;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j ^ bs[i]; ++j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j]) que.pop_back();</span><br><span class="line">                que.push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= maxp; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j + bs[i] &lt;= maxp) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!que.empty() &amp;&amp; temp[que.back()] &lt; temp[j + bs[i]]) que.pop_back();</span><br><span class="line">                    que.push_back(j + bs[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (que.front() &lt; j) que.pop_front();</span><br><span class="line">                dp[i + w][j] = max(dp[i + w][j], temp[que.front()] - bp[i] * j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; dp[n + w][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 队列DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Good Bye 2018 (TBC)</title>
      <link href="/2019/01/17/Good%20Bye%202018%20(TBC)/"/>
      <url>/2019/01/17/Good%20Bye%202018%20(TBC)/</url>
      
        <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1091" target="_blank" rel="noopener">Good Bye 2018</a></p><h2 id="A-New-Year-and-the-Christmas-Ornament"><a href="#A-New-Year-and-the-Christmas-Ornament" class="headerlink" title="A. New Year and the Christmas Ornament"></a>A. New Year and the Christmas Ornament</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~3~$个数$~y,~b,~r~$，求最大的$~sum=a+(a+1)+(a+2)~$，满足$~a\leq y,~a+1\leq b,~a+2\leq r$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">3</span> * min(a + <span class="number">1</span>, min(b, c - <span class="number">1</span>)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-New-Year-and-the-Treasure-Geolocation"><a href="#B-New-Year-and-the-Treasure-Geolocation" class="headerlink" title="B. New Year and the Treasure Geolocation"></a>B. New Year and the Treasure Geolocation</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个坐标和$~n~$个向量，存在一种坐标和向量一一配对的方式，使得$~n~$个坐标为起点经向量所指向的终点一样，输出这个终点。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平均坐标即是答案，注意数据范围会爆$~\text{int}~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>, y = <span class="number">0</span>, a, b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n &lt;&lt; <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        x += a;</span><br><span class="line">        y += b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x / n &lt;&lt; <span class="string">' '</span> &lt;&lt; y / n &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-New-Year-and-the-Sphere-Transmission"><a href="#C-New-Year-and-the-Sphere-Transmission" class="headerlink" title="C. New Year and the Sphere Transmission"></a>C. New Year and the Sphere Transmission</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数字$~1,~2,~\dots,~n~$逆时针排成一圈，起点在$~1~$。逆时针每$~k~$个数取一个，直到恰好回到$~1~$处，所有取的数得到一个总和$~sum(k)~$。将所有可能的$~sum(k)~$从小到达输出。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现每$~k~$个数去一个与每$~\gcd(k,~n)~$个数去一个所得到的总和一样。那么只考虑$~k\mid n~$的情况。此时</p><script type="math/tex; mode=display">sum(k)=\sum_{i=0}^{\frac{n}{k}-1}ik+1=\frac{1}{2}\left(\frac{n(n+2)}{k}-n\right)</script><p>枚举$~n~$的因子$~k~$即可，时间复杂度为$~O(\sqrt{n})~$。对于有序输出答案以及去重，由于数据范围不大，可以用$~\text{set}~$维护，时间复杂度为$~O(\sqrt{n}\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> sqr = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sqr; ++i) <span class="keyword">if</span> (!(n % i)) &#123;</span><br><span class="line">        res.insert((n + <span class="number">2</span>) * i - n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        res.insert((n + <span class="number">2</span>) * n / i - n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    res.erase(res.find(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> out : res) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; out;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-New-Year-and-the-Permutation-Concatenation"><a href="#D-New-Year-and-the-Permutation-Concatenation" class="headerlink" title="D. New Year and the Permutation Concatenation"></a>D. New Year and the Permutation Concatenation</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>序列$~p~$由$~1,~2,~\dots,~n~$的所有全排列按字典序连在一起，长度为$~n\cdot n!~$。输出$~p~$中有多少长度为$~n~$的连续子序列满足总和为$~\frac{n(n+1)}{2}~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先每一个原生的全排列一定满足总和为$~\frac{n(n+1)}{2}~$。接下来不难发现所有符合条件的长度为$~n~$的连续子序列也必定是一个全排，于是答案变成了$~p~$中有多少个全排列。对于非原生的全排列，它必定由一个原生全排列的后缀接上下一个原生全排列的前缀。再注意到原生全排列按字典序排列，于是一对原生全排列要通过前面的后缀加后面的前缀生成新的全排列，必须满足两者的前缀一样。于是对于公共前缀长度不小于$~k~$的相邻原生全排列对，均可通过取前者长度为$~n-k~$的后缀和后者长度为$~k~$的前缀，构造出新的全排列，共计$~\frac{n!}{(n-k)!}((n-k)!-1)~$个。枚举$~1\leq k\leq n-2~$，答案为</p><script type="math/tex; mode=display">n!+\sum_{k=1}^{n-2}\frac{n!}{(n-k)!}((n-k)!-1)=n!(n-\sum_{i=1}^{n-1}\frac{1}{k!})</script><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> a &lt; b ? a - b + mod : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> sub(a, mod - b);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b)</span> </span>&#123;<span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i ^ maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) res = add(res, finv[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; mul(fact[n], sub(n, res)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-New-Year-and-the-Acquaintance-Estimation"><a href="#E-New-Year-and-the-Acquaintance-Estimation" class="headerlink" title="E. New Year and the Acquaintance Estimation"></a>E. New Year and the Acquaintance Estimation</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个点的度数，问是否可以加一个新的度数，使得这$~n+1~$个点能构成一个简单无向图。将所有可能的度数升序输出。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题目里已经给出了相关理论的<a href="https://en.wikipedia.org/wiki/Graph_realization_problem" target="_blank" rel="noopener">$~\text{wiki}~$</a>链接。根据<a href="https://en.wikipedia.org/wiki/Erd%C5%91s%E2%80%93Gallai_theorem" target="_blank" rel="noopener">$~\text{Erdo2s-Gallai}~$</a>定理，以$~d_1\geq d_2\geq\dots\geq d_n~$为度数可以构成简单图的充要条件是$~2\mid\sum_{i=1}^{n}d_i~$，且</p><script type="math/tex; mode=display">\sum_{i=1}^{k}d_i\leq k(k-1)+\sum_{i=k+1}^{n}\min(d_i,~k),~\forall~1\leq k\leq n</script><p>将$~d~$改为升序，用$~n-k~$代替$~k~$，则不等式变为</p><script type="math/tex; mode=display">\sum_{i=k+1}^{n}d_i\leq (n-k)(n-k-1)+\sum_{i=1}^{k}\min(d_i,~n-k),~\forall~0\leq k< n</script><p>不难发现答案必为连续的一段且奇偶性相同。先不考虑奇偶性，如果新加的度数$~deg~$不合法，则考虑上式不成立时$~deg~$在上式的左边还是右边。如果在左边，说明$~deg~$过大，反之如果在右边，则$~deg~$过小。左右都出现的话则说明无解。二分$~deg~$即可。时间复杂度$~O(n\log n)~$或$~O(n\log^2n)~$均可接受。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vec[maxn], deg[maxn], pre[maxn];</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; rem)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(deg, vec, size * <span class="keyword">sizeof</span> (<span class="keyword">long</span> <span class="keyword">long</span>));</span><br><span class="line">    deg[size - <span class="number">1</span>] = rem;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &amp;&amp; deg[i - <span class="number">1</span>] &gt; deg[i]; --i) swap(deg[i - <span class="number">1</span>], deg[i]);</span><br><span class="line">    <span class="keyword">int</span> pos1 = lower_bound(deg, deg + size, rem) - deg;</span><br><span class="line">    <span class="keyword">int</span> pos2 = upper_bound(deg, deg + size, rem) - deg;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ size; ++i) pre[i + <span class="number">1</span>] = pre[i] + deg[i];</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag1 = <span class="literal">false</span>, flag2 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = size - <span class="number">1</span>; ~k; --k) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pos ^ size &amp;&amp; deg[pos] &lt; size - k) ++pos;</span><br><span class="line">        <span class="keyword">if</span> (pre[size] - pre[k] &gt; (size - k) * (size - min(k, pos) - <span class="number">1L</span>L) + pre[min(k, pos)]) &#123;</span><br><span class="line">            flag1 |= k &gt; pos1;</span><br><span class="line">            flag2 |= k &lt; pos2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag1 &amp;&amp; flag2) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>)    );</span><br><span class="line">    <span class="keyword">return</span> flag1 ? <span class="number">-1</span> : flag2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    size = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> parity = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; vec[i], parity ^= vec[i] &amp; <span class="number">1</span>;</span><br><span class="line">    sort(vec, vec + n);</span><br><span class="line">    <span class="keyword">int</span> left, right;</span><br><span class="line">    <span class="keyword">if</span> (!cal(<span class="number">0</span>)) &#123;</span><br><span class="line">        left = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (~cal(mid)) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        left = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!cal(n)) &#123;</span><br><span class="line">        right = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> l = left, r = n;</span><br><span class="line">        <span class="keyword">while</span> (r - l ^ <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (cal(mid) ^ <span class="number">1</span>) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        right = l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (left &amp; <span class="number">1</span> ^ parity ? left + <span class="number">1</span> : left);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = left + <span class="number">2</span>; i &lt;= right; ++i) <span class="keyword">if</span> (!(i &amp; <span class="number">1</span> ^ parity)) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; i;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-New-Year-and-the-Mallard-Expedition"><a href="#F-New-Year-and-the-Mallard-Expedition" class="headerlink" title="F. New Year and the Mallard Expedition"></a>F. New Year and the Mallard Expedition</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~3~$种地形和行动方式，分别是草地、水、火山和走、游泳、飞，行动的耗时分别为$~1~$米$~5~$秒、$~1~$米$~3~$秒、$~1~$米$~1~$秒。可以反向行动且随时可以无花费地切换行动方式。走和游泳分别只能在草地和水上使用，飞行可以在任何地形使用，但是飞行需要能量。能量一开始为$~0~$，每走或者游$~x~$米均可获得$~x~$能量，每飞$~x~$米则会消耗$~x~$能量。全路程共计$~n~$段，给出的地形和长度，问最短耗时。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>现根据各种地形对应的行动方式模拟一遍，算出答案的上界并记录到每一段时能量还剩余多少（有可能需要为了补充能量需而原地打转）。然后从终点向起点模拟，在保证每处剩余能量非负的情况下，先尽量在草地上飞，如果还有能量剩余则在水上飞。需要注意细节。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; len(n + <span class="number">1</span>, <span class="number">0</span>), rem(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; len[i];</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str = <span class="string">'A'</span> + str;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] ^ <span class="string">'L'</span>) &#123;</span><br><span class="line">rem[i] = rem[i - <span class="number">1</span>] + len[i];</span><br><span class="line">flag |= str[i] == <span class="string">'W'</span>;</span><br><span class="line">res += len[i] * (str[i] == <span class="string">'W'</span> ? <span class="number">3</span> : <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (rem[i - <span class="number">1</span>] &lt; len[i]) &#123;</span><br><span class="line">rem[i] = <span class="number">0</span>;</span><br><span class="line">res += (len[i] - rem[i - <span class="number">1</span>]) * (flag ? <span class="number">4</span> : <span class="number">6</span>) + rem[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">rem[i] = rem[i - <span class="number">1</span>] - len[i];</span><br><span class="line">res += len[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>, minn = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">minn = min(minn, rem[i]);</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'G'</span>) &#123;</span><br><span class="line"><span class="keyword">auto</span> sub = min(minn, len[i] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">res -= sub &lt;&lt; <span class="number">1</span>;</span><br><span class="line">minn -= sub;</span><br><span class="line">cnt += sub;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res + cnt - rem[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Codeforces </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性基</title>
      <link href="/2019/01/17/%E7%BA%BF%E6%80%A7%E5%9F%BA/"/>
      <url>/2019/01/17/%E7%BA%BF%E6%80%A7%E5%9F%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="线性基问题"><a href="#线性基问题" class="headerlink" title="线性基问题"></a>线性基问题</h2><p>对于非负整数区间$~[0,2^n)~$，可以按二进制$~01~$表示映射到域$~\Bbb{Z}_2~$上的$~n~$维向量空间$~\Bbb{Z}_2^n~$。记上述的映射为$~f:[0,~2^n)\to\Bbb{Z}_2^n,~x\mapsto v~$，这里$~v~$是$~x~$在二进制下的$~01~$表示，显然$~f~$是双射。之后的内容中，对于向量$~v\in\Bbb{Z}_2^n~$，都用$~f^{-1}(v)\in[0,2^n)~$来表示。那么对于若干整数的$~\text{xor}~$运算问题，则转化为向量空间$~\Bbb{Z}_2^n~$上的加法运算问题，通常称为<strong>线性基问题</strong>。</p><h3 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a><strong>线性基</strong></h3><p>向量空间$~\Bbb{Z}_2^n~$上任意$~n~$个线性无关的向量，称作该向量空间上的一组<strong>线性基</strong>。显然$~1,2,4,\dots,2^{n-1}~$是$~\Bbb{Z}_2^n~$的一组线性基，称作<strong>标准线性基</strong>。且向量空间$~\Bbb{Z}_2^n~$的任意一个子空间$~V~$必同构于向量空间$~\Bbb{Z}_2^m,~0\leq m\leq n~$，于是$~{\mid V\mid}=2^m~$。</p><h3 id="最小生成子空间"><a href="#最小生成子空间" class="headerlink" title="最小生成子空间"></a><strong>最小生成子空间</strong></h3><p>对于向量空间$~\Bbb{Z}_2^n~$的一个子集$~A=\lbrace~a_1,a_2,\dots,a_m~\rbrace~$，子空间$~V~$称作$~A~$在$~\Bbb{Z}_2^n~$上的最小生成子空间，当且仅当$~A\subseteq V\subseteq~\Bbb{Z}_2^n~$，且对于$~\Bbb{Z}_2^n~$的所有子空间$~W~$满足：如果$~A\subseteq W~$，则必有$~V\subseteq W~$。如果$~a_1,~a_2,~\dots,~a_m~$线性无关，则它们构成$~V~$的一组线性基。于是有推论：对于$~A~$的最小生成子空间$~V~$，满足$~\dim V\leq{\mid A\mid}~$。</p><h3 id="空间的扩张"><a href="#空间的扩张" class="headerlink" title="空间的扩张"></a><strong>空间的扩张</strong></h3><p>对于向量空间$~\Bbb{Z}_2^n~$的子空间$~V~$和向量$~a~$，定义$~V(a)=\lbrace~a+b:~b\in V\rbrace\cup V~$。显然$~V(a)~$是包含$~V~$和$~a~$的最小空间，称$~V(a)~$是$~V~$的扩张。如果$~a\in V~$，则显然$~V(a)=V~$，称作<strong>平凡扩张</strong>；否则称作<strong>不平凡扩张</strong>，且$~\dim V(a)=\dim V+1~$。对于不平凡扩张，设$~b_1,~b_2,~\dots,~b_{\dim V}~$是$~V~$的一组线性基，因为$~a\notin V~$，$~a~$无法被$~b_1,~b_2,~\dots,~b_{\dim V}~$线性表出，所以$~b_1,~b_2,~\dots,~b_{\dim V},~a~$线性无关，它们是$~V(a)~$的一组线性基。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a><strong>存储</strong></h3><p>对于任意线性无关组，显然它的最小生成子空间是唯一的。所以可以用$~\text{vector}~$来储存这个线性无关组来表示一个线性空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; base;</span><br><span class="line">Vec() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; base.clear(); &#125;</span><br><span class="line"><span class="keyword">size_t</span> size() <span class="keyword">const</span> &#123; <span class="keyword">return</span> base.size(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="扩张"><a href="#扩张" class="headerlink" title="扩张"></a><strong>扩张</strong></h3><p>自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.emplace_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : vec.base) add(v); &#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line">Vec ret = *<span class="keyword">this</span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最值"><a href="#最值" class="headerlink" title="最值"></a><strong>最值</strong></h3><p>最小值为非$~0~$最小值，其余自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> min() &#123; <span class="keyword">return</span> *min_element(base.begin(), base.end()); &#125;</span><br><span class="line"><span class="keyword">uint64_t</span> max() &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a><strong>标准化</strong></h3><p>自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(base.begin(), base.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != base.size(); ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有序查找"><a href="#有序查找" class="headerlink" title="有序查找"></a><strong>有序查找</strong></h3><p>从$~0~$开始，需要标准化，其余自行理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint64_t</span> find_by_rank(<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; k) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != base.size(); ++i) <span class="keyword">if</span> (k &amp; <span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; <span class="keyword">uint64_t</span>(i))</span><br><span class="line">ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; base;</span><br><span class="line">Vec() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; base.clear(); &#125;</span><br><span class="line"><span class="keyword">size_t</span> size() <span class="keyword">const</span> &#123; <span class="keyword">return</span> base.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.emplace_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : vec.base) add(v); &#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line">Vec ret = *<span class="keyword">this</span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> min() &#123; <span class="keyword">return</span> *min_element(base.begin(), base.end()); &#125;</span><br><span class="line"><span class="keyword">uint64_t</span> max() &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(base.begin(), base.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != base.size(); ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> find_by_rank(<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; k) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != base.size(); ++i) <span class="keyword">if</span> (k &amp; <span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; <span class="keyword">uint64_t</span>(i))</span><br><span class="line">ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="CF1101G"><a href="#CF1101G" class="headerlink" title="CF1101G"></a><a href="https://codeforces.com/problemset/problem/1101/G" target="_blank" rel="noopener">CF1101G</a></h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> c[maxn];</span><br><span class="line">pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt; seg[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; base;</span><br><span class="line">Vec() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; base.clear(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.emplace_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">const</span> Vec&amp; vec)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : vec.base) add(v); &#125;</span><br><span class="line">Vec <span class="keyword">operator</span> + (<span class="keyword">const</span> Vec&amp; vec) <span class="keyword">const</span> &#123;</span><br><span class="line">Vec ret = *<span class="keyword">this</span>;</span><br><span class="line">ret.join(vec);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> max() &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) ret = <span class="built_in">std</span>::max(ret, ret ^ v);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125; res[maxn], vec[maxn], tmp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">auto</span>&amp; que, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; l, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l == r) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : que) res[i].add(c[l]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = m; i &gt;= l; --i) &#123;</span><br><span class="line">tmp.add(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">tmp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = m + <span class="number">1</span>; i &lt;= r; ++i) &#123;</span><br><span class="line">tmp.add(c[i]);</span><br><span class="line">vec[i] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; left, right;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : que) &#123;</span><br><span class="line"><span class="keyword">if</span> (seg[i].second &lt;= m) left.emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (seg[i].first &gt; m) right.emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> res[i] = vec[seg[i].first] + vec[seg[i].second];</span><br><span class="line">&#125;</span><br><span class="line">que.clear();</span><br><span class="line">cdq(left, l, m);</span><br><span class="line">cdq(right, m + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line"><span class="keyword">size_t</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; que(q);</span><br><span class="line">iota(que.begin(), que.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != q; ++i) <span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">cdq(que, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i].max() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1100F"><a href="#CF1100F" class="headerlink" title="CF1100F"></a><a href="https://codeforces.com/problemset/problem/1100/F" target="_blank" rel="noopener">CF1100F</a></h3><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码;"></a><strong>代码</strong>;</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), base;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!a.back()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> e : a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : base) e = min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; base.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HDU3949"><a href="#HDU3949" class="headerlink" title="HDU3949"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3949" target="_blank" rel="noopener">HDU3949</a></h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vec</span> &#123;</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; base;</span><br><span class="line">Vec() &#123;&#125;</span><br><span class="line"><span class="keyword">size_t</span> size() <span class="keyword">const</span> &#123; <span class="keyword">return</span> base.size(); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(<span class="keyword">uint64_t</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : base) e = <span class="built_in">std</span>::min(e, e ^ v);</span><br><span class="line"><span class="keyword">if</span> (e) base.emplace_back(e);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">std</span>::sort(base.begin(), base.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != base.size(); ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = i - <span class="number">1</span>; ~j; --j)</span><br><span class="line">base[i] = <span class="built_in">std</span>::min(base[i], base[i] ^ base[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> find_by_rank(<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; k) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != base.size(); ++i) <span class="keyword">if</span> (k &amp; <span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; <span class="keyword">uint64_t</span>(i))</span><br><span class="line">ret ^= base[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> cas = <span class="number">1</span>; cas &lt;= t; ++cas) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">Vec vec;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">vec.add(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">vec.sort();</span><br><span class="line"><span class="keyword">uint64_t</span> flag = (n == vec.size()) - <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">":\n"</span>;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">if</span> ((k + flag) &amp; ~((<span class="keyword">uint64_t</span>(<span class="number">1</span>) &lt;&lt; <span class="keyword">uint64_t</span>(vec.size())) - <span class="keyword">uint64_t</span>(<span class="number">1</span>))) <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; vec.find_by_rank(k + flag) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
