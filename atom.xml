<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MAOoo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-30T16:07:28.448Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>MAOoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces Round 589 (Div. 2)</title>
    <link href="http://yoursite.com/2019/09/30/Codeforces%20Round%20589%20(Div.%202)/"/>
    <id>http://yoursite.com/2019/09/30/Codeforces Round 589 (Div. 2)/</id>
    <published>2019-09-30T14:19:50.446Z</published>
    <updated>2019-09-30T16:07:28.448Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1228" target="_blank" rel="noopener">Codeforces Round #589 (Div. 2)</a></p><h2 id="A-Distinct-Digits"><a href="#A-Distinct-Digits" class="headerlink" title="A. Distinct Digits"></a>A. Distinct Digits</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = l; x &lt;= r; ++x) &#123;</span><br><span class="line"><span class="built_in">string</span> s = to_string(x);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; ss;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> c : s) ss.insert(c);</span><br><span class="line"><span class="keyword">if</span> (s.size() == ss.size()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Filling-the-Grid"><a href="#B-Filling-the-Grid" class="headerlink" title="B. Filling the Grid"></a>B. Filling the Grid</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~h\times w~$的黑白网格图上给定如下限制：每行贴着左方的连续黑色长度为$~r_1,r_2,\dots,r_h\in[0,w]$，每列贴着上方的连续黑色长度为$~c_1,c_2,\dots,c_w\in[0,h]$。计算有多少方案满足这些限制。<br>数据范围$~1\leq h,w\leq10^3~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对所有的限制硬模拟，计算每个格子的颜色是黑色还是白色或者是两种均可，出现冲突答案为$~0~$，否则答案为$~2^n~$，其中$~n~$为两种均可的格子数量。时间复杂度为$~O(hw)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">int</span> grid[maxn][maxn], r[maxn], c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(grid, <span class="number">-1</span>, <span class="keyword">sizeof</span> (grid));</span><br><span class="line"><span class="keyword">int</span> h, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; h &gt;&gt; w;</span><br><span class="line"><span class="keyword">int</span> res = h * w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != h; ++i) <span class="built_in">cin</span> &gt;&gt; r[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != w; ++j) <span class="built_in">cin</span> &gt;&gt; c[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != h; ++i) &#123;</span><br><span class="line">res -= r[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != r[i]; ++j) grid[i][j] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (r[i] != w) &#123;</span><br><span class="line">--res;</span><br><span class="line">grid[i][r[i]] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != w; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> check = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != c[j]; ++i) &#123;</span><br><span class="line">check &amp;= grid[i][j] != <span class="number">0</span>;</span><br><span class="line">res -= grid[i][j] == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c[j] != h) check &amp;= grid[c[j]][j] != <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!check) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (c[j] != h) res -= grid[c[j]][j] == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (res--) &#123;</span><br><span class="line">ans &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">ans &lt; mod ? <span class="number">0</span> : ans -= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Primes-and-Multiplication"><a href="#C-Primes-and-Multiplication" class="headerlink" title="C. Primes and Multiplication"></a>C. Primes and Multiplication</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义</p><script type="math/tex; mode=display">prime(x)=\lbrace\,p\,|\,x:\text{$p$ is a prime}\,\rbrace</script><script type="math/tex; mode=display">g(x,p)=\max\lbrace\,p^k\,|\,x:k\in\Bbb N\,\rbrace</script><script type="math/tex; mode=display">f(x,y)=\prod_{p\in prime(x)}f(y,p)</script><p>计算$~\prod_{i=1}^{n}f(x,i)~$。<br>数据范围$~2\leq x\leq10^9,~1\leq n\leq10^{18}~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>求出$~prime(x)~$后对于所有的$~p\in prime(x)~$，计算$~p~$在$~\prod_{i=1}^{n}n!~$的指数即可，总时间复杂度为$~O(\sqrt x+\log\log x\log n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = mul(c, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m = -n;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line">m += n;</span><br><span class="line">n /= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fpow(p, m % (mod - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) <span class="keyword">if</span> (!vis[i]) &#123;</span><br><span class="line">prime.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + i; j &lt; maxn; j += i) vis[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p : prime) <span class="keyword">if</span> (x % p == <span class="number">0</span>) &#123;</span><br><span class="line">res = mul(res, solve(n, p));</span><br><span class="line"><span class="keyword">for</span> (x /= p; x % p == <span class="number">0</span>; x /= p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x != <span class="number">1</span>) res = mul(res, solve(n, x));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Complete-Tripartite"><a href="#D-Complete-Tripartite" class="headerlink" title="D. Complete Tripartite"></a>D. Complete Tripartite</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个简单无向图，要求将点划分为恰好$~3~$个非空集合，要求同一集合内的点没有边，不同集合间的点有边。<br>数据范围$~3\leq n\leq10^5,~0\leq m\leq\min(3\cdot10^5,\frac{n(n-1)}{2})~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>暴力，如果合法的划分（或染色）方案存在，那么与点$~1~$同色的点必然不与$~1~$相邻，而且它们的相邻的点与$~1~$是一样的，把它们染成$~1~$。用<code>std::vector</code>存每个点的邻接表并升序，然后直接暴力判断它们是否一样。可以这样在出现非法之间的复杂度上限是$~O(n+m)~$的。接着考虑未染色的点，再任选一个点染成$~2~$，重复上述操作。同理接着$~3~$。这样的时间复杂度为$~O((n+m)\log n)~$。这题也可以哈希实现，将每个点的邻接表哈希过后判断是否只有$~3~$个哈希值即可，注意不能有空邻接表。这样的时间复杂度为$~O(n+m)~$。</p><h3 id="代码（非哈希）"><a href="#代码（非哈希）" class="headerlink" title="代码（非哈希）"></a><strong>代码（非哈希）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> col[maxn], adj1[maxn], adjr[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) sort(adj[u].begin(), adj[u].end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u : adj[<span class="number">1</span>]) adj1[u] = <span class="number">1</span>;</span><br><span class="line">col[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; node1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">2</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="keyword">if</span> (adj1[u]) &#123;</span><br><span class="line">node1.push_back(u);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">col[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (adj[<span class="number">1</span>] != adj[u]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(node1.size()) &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> r = node1[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u : adj[r]) adjr[u] = <span class="number">1</span>;</span><br><span class="line">col[r] = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; node2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(node1.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = node1[i];</span><br><span class="line"><span class="keyword">if</span> (adjr[u]) &#123;</span><br><span class="line">node2.push_back(u);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">col[u] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (adj[r] != adj[u]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (node2.empty()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(node2.size()); ++i) <span class="keyword">if</span> (adj[node2[<span class="number">0</span>]] != adj[node2[i]]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u : node2) col[u] = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) <span class="built_in">cout</span> &lt;&lt; col[u] &lt;&lt; (u == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（哈希）"><a href="#代码（哈希）" class="headerlink" title="代码（哈希）"></a><strong>代码（哈希）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line"><span class="function">mt19937_64 <span class="title">rng64</span><span class="params">(time(<span class="literal">nullptr</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line">u64 val[maxn], adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) val[i] = rng64();</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u] ^= val[v];</span><br><span class="line">adj[v] ^= val[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;u64&gt; hashes;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) hashes.push_back(adj[u]);</span><br><span class="line">sort(hashes.begin(), hashes.end());</span><br><span class="line">hashes.resize(unique(hashes.begin(), hashes.end()) - hashes.begin());</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(hashes.size()) != <span class="number">3</span> || !hashes.front()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;u64, <span class="keyword">int</span>&gt; name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) name[hashes[i]] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) <span class="built_in">cout</span> &lt;&lt; name[adj[u]] &lt;&lt; <span class="string">" \n"</span>[u == n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Another-Filling-the-Grid"><a href="#E-Another-Filling-the-Grid" class="headerlink" title="E. Another Filling the Grid"></a>E. Another Filling the Grid</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~n\times n~$的表格上填$~1~$到$~k~$的整数使得每行每列的最小值都是$~1~$，计算有多少方案。<br>数据范围$~1\leq n\leq250,~1\leq k\leq10^9~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑动态规划。记$~dp(m,i)~$表示已经考虑了前$~m~$行，每行的最小值都是$~1~$，且恰好已有$~i~$列的最小值都是$~1~$。于是答案为$~dp(n,n)~$，且$~dp(1,i)=\binom{n}{i}\cdot(k-1)^{n-i}~$。枚举之前所有行中已经有$~j\in[1,i]~$列的最小值已经是$~1~$，注意到当$~i=j~$时还需要保证本行要出现一次$~1~$，于是有状态转移式</p><script type="math/tex; mode=display">dp(m,i)=dp(m-1,i)\cdot(k^i-(k-1)^i)\cdot(k-1)^{n-i}+\sum_{j=1}^{i-1}dp(m-1,j)\cdot\binom{n-j}{i-j}\cdot k^j\cdot(k-1)^{n-i}</script><p>时间复杂度为$~O(n^3)~$。<br>事实上，考虑容斥，可以得出答案式为</p><script type="math/tex; mode=display">\sum_{i=0}^{n}\sum_{j=0}^{n}(-1)^{i+j}\binom{n}{i}\binom{n}{j}k^{n^2-n(i+j)+ij}(k-1)^{n(i+j)-ij}</script><p>预处理幂指数的话，这个式子的复杂度可以优化至$~O(n^2)~$。更进一步，考虑二项式展开，有</p><script type="math/tex; mode=display">\begin{aligned}&(k^{n-i}-(k-1)^{n-i})^nk^{-n(n-i)}\\=&\left(1-\left(\frac{k-1}{k}\right)^{n-i}\right)^n\\=&\sum_{j=0}^{n}\binom{n}{j}\left(-\left(\frac{k-1}{k}\right)^{n-i}\right)^j\\=&\sum_{j=0}^{n}(-1)^j\binom{n}{j}k^{-nj+ij}(k-1)^{nj-ij}\\\end{aligned}</script><p>于是答案式化简为</p><script type="math/tex; mode=display">\sum_{i=0}^{n}(-1)^i\binom{n}{i}(k^{n-i}(k-1)^i-(k-1)^n)^n</script><p>这样总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码（-O-n-3-）"><a href="#代码（-O-n-3-）" class="headerlink" title="代码（$~O(n^3)~$）"></a><strong>代码（$~O(n^3)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt; <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, T... c)</span> </span>&#123; <span class="keyword">return</span> mul(mul(a, b), c...); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn], C[maxn][maxn], ap[maxn], bp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) C[i][<span class="number">0</span>] = C[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != maxn; ++j) C[i][j] = add(C[i - <span class="number">1</span>][j], C[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> n, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line">ap[<span class="number">0</span>] = bp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) ap[i] = mul(ap[i - <span class="number">1</span>], a), bp[i] = mul(bp[i - <span class="number">1</span>], a - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[<span class="number">1</span>][i] = mul(C[n - i][i], bp[n - i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j; ++k)</span><br><span class="line">dp[i][j] = add(dp[i][j], mul(dp[i - <span class="number">1</span>][k], C[n - j][j - k], sub(ap[k], j == k ? bp[j] : <span class="number">0</span>), bp[n - j]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-log-n-）"><a href="#代码（-O-n-log-n-）" class="headerlink" title="代码（$~O(n\log n)~$）"></a><strong>代码（$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... T&gt; <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, T... c)</span> </span>&#123; <span class="keyword">return</span> mul(mul(a, b), c...); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (b) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) c = mul(c, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">int</span> C[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) C[i][<span class="number">0</span>] = C[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != maxn; ++j) C[i][j] = add(C[i - <span class="number">1</span>][j], C[i][j - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) res = add(res, mul(i &amp; <span class="number">1</span> ? mod - <span class="number">1</span> : <span class="number">1</span>, C[n - i][i], fpow(sub(mul(fpow(k, n - i), fpow(k - <span class="number">1</span>, i)), fpow(k - <span class="number">1</span>, n)), n)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-One-Node-is-Gone"><a href="#F-One-Node-is-Gone" class="headerlink" title="F. One Node is Gone"></a>F. One Node is Gone</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵$~2^n-2~$个节点的树，判断它是否由一棵完全二叉树扣去一个非根节点$~u~$后，将$~u~$的儿子（如果有）接在$~u~$的父亲形成。输出所有可能的扣点方案里$~u~$的父亲编号。<br>数据范围$~2\leq n\leq17~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先抠出原完全二叉树的直径。方法是两遍$~\rm DFS~$，第一遍任选根节点然后找出最深叶节点，第二遍以第一遍的最远叶节点为根，通向最深叶节点的路径就是直径。分类讨论。如果直径有奇数个点，那么如果方案存在，直径长度必为$~2n-1~$，且中点就是根，答案最多为$~1~$。此时对于所有非叶节点，如果儿子数不为$~2~$，那么儿子数必为$~1~$或$~3~$，且这样的点有且仅有$~1~$个，它就是答案。这样可以确定这棵树可以由一棵二叉树形成，要确定是棵完全二叉树，只需要判断对于答案点到根的路径上的所有节点对应子树的大小是否形如$~2^k-2~$，且其它节点对应子树的大小形如$~2^k-1~$。如果直径有偶数个点，那么中间两个点就是答案（如果合法）。合法性等价与就是这两个点分别对应的两个子图是否都是以它们为根的完全二叉树，判断过程与前面同理。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], son[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], par[maxn], siz[maxn], tor[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">game_over</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x + <span class="number">1</span> == (x + <span class="number">1</span> &amp; ~x); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">par[u] = p;</span><br><span class="line"><span class="keyword">int</span> ret = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = dfs(v, u);</span><br><span class="line"><span class="keyword">if</span> (dep[tmp] &gt; dep[ret]) ret = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">odd</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">par[u] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) son[u].push_back(v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : son[u]) siz[u] += odd(v, u);</span><br><span class="line"><span class="keyword">return</span> ++siz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">even</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> son = <span class="number">0</span>;</span><br><span class="line">siz[u] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">++son;</span><br><span class="line">siz[u] += even(v, u);</span><br><span class="line">&#125;</span><br><span class="line">++siz[u];</span><br><span class="line"><span class="keyword">if</span> (son &amp;&amp; son != <span class="number">2</span> || !full(siz[u])) game_over();</span><br><span class="line"><span class="keyword">return</span> siz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = (<span class="number">1</span> &lt;&lt; n) - <span class="number">3</span>; m; --m) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">adj[a].push_back(b);</span><br><span class="line">adj[b].push_back(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> nn = (<span class="number">1</span> &lt;&lt; n) - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= nn; ++u) <span class="keyword">if</span> (<span class="keyword">int</span>(adj[u].size()) &gt; <span class="number">4</span>) game_over();</span><br><span class="line"><span class="keyword">int</span> l = dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> r = dfs(l, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; diam;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = r; u; u = par[u]) diam.push_back(u);</span><br><span class="line"><span class="keyword">int</span> k = diam.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">if</span> (k &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (k != n + n - <span class="number">1</span>) game_over();</span><br><span class="line"><span class="keyword">int</span> r = diam[k / <span class="number">2</span>];</span><br><span class="line">odd(r, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= nn; ++u) <span class="keyword">if</span> (!son[u].empty() &amp;&amp; <span class="keyword">int</span>(son[u].size()) != <span class="number">2</span>) res.push_back(u);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(res.size()) != <span class="number">1</span>) game_over();</span><br><span class="line"><span class="keyword">int</span> x = res[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(son[x].size()) != <span class="number">1</span> &amp;&amp; <span class="keyword">int</span>(son[x].size()) != <span class="number">3</span>) game_over();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = x; u; u = par[u]) tor[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= nn; ++u) <span class="keyword">if</span> (tor[u] &amp;&amp; !full(siz[u] + <span class="number">1</span>) || !tor[u] &amp;&amp; !full(siz[u])) game_over();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1\n"</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x = diam[k / <span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> y = diam[k / <span class="number">2</span> - <span class="number">1</span>];</span><br><span class="line">even(x, y);</span><br><span class="line">even(y, x);</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) swap(x, y);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2\n"</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1228&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #589 (Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Distinct-Di
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 583 (based on Olympiad of Metropolises) (div. 1 + div. 2)</title>
    <link href="http://yoursite.com/2019/09/05/Codeforces%20Round%20583%20(based%20on%20Olympiad%20of%20Metropolises)%20(div.%201%20+%20div.%202)/"/>
    <id>http://yoursite.com/2019/09/05/Codeforces Round 583 (based on Olympiad of Metropolises) (div. 1 + div. 2)/</id>
    <published>2019-09-05T12:12:19.156Z</published>
    <updated>2019-09-05T12:23:20.018Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1214" target="_blank" rel="noopener">Codeforces Round #583 (Div. 1 + Div. 2, based on Olympiad of Metropolises)</a></p><h2 id="A-Optimal-Currency-Exchange"><a href="#A-Optimal-Currency-Exchange" class="headerlink" title="A. Optimal Currency Exchange"></a>A. Optimal Currency Exchange</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, d, e;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; d &gt;&gt; e;</span><br><span class="line">e *= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> res = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= n; x += e) res = min(res, (n - x) % d);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Badges"><a href="#B-Badges" class="headerlink" title="B. Badges"></a>B. Badges</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> b, g, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; g &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; min(b, n) + min(g, n) - n + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Bad-Sequence"><a href="#C-Bad-Sequence" class="headerlink" title="C. Bad Sequence"></a>C. Bad Sequence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个括号序列，问是否能至多移动一个括号使得序列合法。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>合法当且仅当左括号数量等于右括号数量，且前缀和的最小值大于等于$~-1~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (count(s.begin(), s.end(), <span class="string">'('</span>) != count(s.begin(), s.end(), <span class="string">')'</span>)) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>, pre = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : s) low = min(low, ch == <span class="string">'('</span> ? ++pre : --pre);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (low &lt; <span class="number">-1</span> ? <span class="string">"No"</span> : <span class="string">"Yes"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Treasure-Island"><a href="#D-Treasure-Island" class="headerlink" title="D. Treasure Island"></a>D. Treasure Island</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~n\times m~$的网格图，要从$~(1,1)~$走到$~(n,m)~$，且只能从$~(x,y)~$走向$~(x+1,y)~$或者$~(x,y+1)~$。已经有若干方格不能经过，问最多还需要让多少个方格禁止使得不能从$~(1,1)~$走到$~(n,m)~$，起点和终点不能被禁止。<br>数据范围$~3\leq n\cdot m\leq1000000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现如果$~(1,2)~$和$~(2,1)~$都被禁止的话即可达到要求，所以答案只能是$~0,1,2~$。假设$~(x,y)~$是某条合法路径上的点，那么由规则，他必须处于第$~x+y-1~$步。于是只要判断第$~1,2,\dots,n+m-2~$步上分别有多少个合法点，然后取最小值即可。一个点是合法点当且仅当它能从某个合法点转移得到。总时间复杂度为$~O(nm)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; maze(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : maze) <span class="built_in">cin</span> &gt;&gt; row;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(n + m - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; ~j; --j) <span class="keyword">if</span> ((i != n - <span class="number">1</span> || j != m - <span class="number">1</span>) &amp;&amp; maze[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">maze[i][j] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">if</span> (i != n - <span class="number">1</span> &amp;&amp; maze[i + <span class="number">1</span>][j] == <span class="string">'.'</span>) maze[i][j] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">if</span> (j != m - <span class="number">1</span> &amp;&amp; maze[i][j + <span class="number">1</span>] == <span class="string">'.'</span>) maze[i][j] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = !i; j != m; ++j) <span class="keyword">if</span> (maze[i][j] == <span class="string">'.'</span>) &#123;</span><br><span class="line">maze[i][j] = <span class="string">'#'</span>;</span><br><span class="line"><span class="keyword">if</span> (i &amp;&amp; maze[i - <span class="number">1</span>][j] == <span class="string">'.'</span>) maze[i][j] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">if</span> (j &amp;&amp; maze[i][j - <span class="number">1</span>] == <span class="string">'.'</span>) maze[i][j] = <span class="string">'.'</span>;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="string">'.'</span>) ++cnt[i + j];</span><br><span class="line">&#125;</span><br><span class="line">cnt.front() = cnt.back() = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *min_element(cnt.begin(), cnt.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Petya-and-Construction-Set"><a href="#E-Petya-and-Construction-Set" class="headerlink" title="E. Petya and Construction Set"></a>E. Petya and Construction Set</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个整数$~d_1,d_2,\dots,d_n~$，要求构造出一棵大小为$~2n~$的树使得对于$~i=1,2,\dots,n~$，节点$~2i-1~$和$~2i~$的距离为$~d_i~$。<br>数据范围$~1\leq n\leq100000,~1\leq d\leq n~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先将所有的偶数点连成一条链，最左边的点对应的$~d~$为最大值，最右边的点对应的$~d~$为次大值，次左边的点对应的$~d~$为第$~3~$大值……。然后再根据$~d~$从大到小把奇数点接在链上，左边的偶数点对应的奇数点接在右边，右边的偶数点对应的奇数点接在左边。如果当前的奇数点接在链的左端点，则它变成新的左端点，右端点同理。由于$~d\leq n~$，这样的合法构造是一定存在的。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn], p[maxn], chain[maxn &lt;&lt; <span class="number">2</span>], pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; d[i];</span><br><span class="line">iota(p + <span class="number">1</span>, p + n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">sort(p + <span class="number">1</span>, p + n + <span class="number">1</span>, [] (<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; <span class="keyword">bool</span> &#123; <span class="keyword">return</span> d[x] &gt; d[y]; &#125;);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pos[i] = i &amp; <span class="number">1</span> ? i + <span class="number">1</span> &gt;&gt; <span class="number">1</span> : n + <span class="number">1</span> - (i &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) chain[n + pos[i]] = p[i] &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) res.emplace_back(chain[n + i], chain[n + i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, l = n + <span class="number">1</span>, r = n + n; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = pos[i], k = chain[n + j] &gt;&gt; <span class="number">1</span>, cur = i &amp; <span class="number">1</span> ? n + j + d[k] - <span class="number">1</span> : n + j - d[k] + <span class="number">1</span>;</span><br><span class="line">res.emplace_back(chain[n + j] - <span class="number">1</span>, chain[cur]);</span><br><span class="line"><span class="keyword">if</span> (cur == l) chain[--l] = chain[n + j] - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (cur == r) chain[++r] = chain[n + j] - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ans : res) <span class="built_in">cout</span> &lt;&lt; ans.first &lt;&lt; <span class="string">' '</span> &lt;&lt; ans.second &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Employment"><a href="#F-Employment" class="headerlink" title="F. Employment"></a>F. Employment</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在长度为$~m~$的环上有$~n~$个$~x~$点$~x_1,x_2,\dots,x_n~$和$~n~$个$~y~$点$~y_1,y_2,\dots,y_n~$。要求算出一个一一对应关系$~p_1,p_2,\dots,p_n~$使得$~x_i~$对应$~y_{p_i}~$，这$~n~$对$~(x_i,y_{p_i})~$之间的距离之和最小。输出距离之和的最小值和$~p_1,p_2,\dots,p_n~$。<br>数据范围$~1\leq m\leq10^9,~1\leq n\leq200000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对$~x_1,x_2,\dots,x_n~$和$~y_1,y_2,\dots,y_n~$升序，不难发现此时最优的对应关系可以由将$~y_1,y_2,\dots,y_n~$循环平移后再与$~x_1,x_2,\dots,x_n~$一一对应得到。如果暴力的计算每一种循环平移距离对应的答案值，复杂度是$~O(n^2)~$的，下面考虑优化。记$~f(x,y)~$表示$~x~$与$~y~$的距离，则$~f~$的取值只可能是$~x-y,~y-x,~m+x-y,~m-x+y~$之一。对于一个固定的$~x_i~$，由于$~y_1,y_2,\dots,y_n~$已经升序，则上述$~4~$种取值恰好对应$~y~$序列的$~4~$个不交区间，即对应$~4~$个不交的循环平移量区间。对于每个$~y_i~$也同理，然后将$~m~$的情况交给$~x~$，这样就只用做$~8n~$次区间修改即可处理好每种平移距离量对应的答案值。总时间复杂度为$~O(n\log n)~$，当然也可以通过基数排序和$~4~$指针等优化使时间复杂度降为$~O(n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">const</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;* arr, <span class="keyword">int</span> i, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> n, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">l = lower_bound(arr, arr + n, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(l, <span class="number">0</span>)) - arr;</span><br><span class="line">r = lower_bound(arr, arr + n, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(r, <span class="number">0</span>)) - arr - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (op) &#123;</span><br><span class="line">swap(l, r);</span><br><span class="line">l = i - l;</span><br><span class="line">r = i - r;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l -= i;</span><br><span class="line">r -= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (l &lt; <span class="number">0</span> &amp;&amp; r &lt; <span class="number">0</span>) &#123;</span><br><span class="line">c[n + l] += x;</span><br><span class="line">c[n + r + <span class="number">1</span>] -= x;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (l &gt;= <span class="number">0</span> &amp;&amp; r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">c[l] += x;</span><br><span class="line">c[r + <span class="number">1</span>] -= x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c[n + l] += x;</span><br><span class="line">c[<span class="number">0</span>] += x;</span><br><span class="line">c[r + <span class="number">1</span>] -= x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i].first, a[i].second = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i].first, b[i].second = i;</span><br><span class="line">sort(a, a + n);</span><br><span class="line">sort(b, b + n);</span><br><span class="line"><span class="keyword">int</span> k = m &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">modify(b, i, <span class="number">0</span>, a[i].first - (m - <span class="number">1</span> &gt;&gt; <span class="number">1</span>), -a[i].first + m, n, <span class="number">0</span>);</span><br><span class="line">modify(b, i, a[i].first - (m - <span class="number">1</span> &gt;&gt; <span class="number">1</span>), a[i].first, a[i].first, n, <span class="number">0</span>);</span><br><span class="line">modify(b, i, a[i].first, a[i].first + (m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>), -a[i].first, n, <span class="number">0</span>);</span><br><span class="line">modify(b, i, a[i].first + (m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>), INT_MAX, a[i].first + m, n, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">modify(a, i, <span class="number">0</span>, b[i].first - (m - <span class="number">1</span> &gt;&gt; <span class="number">1</span>), -b[i].first, n, <span class="number">1</span>);</span><br><span class="line">modify(a, i, b[i].first - (m - <span class="number">1</span> &gt;&gt; <span class="number">1</span>), b[i].first + <span class="number">1</span>, b[i].first, n, <span class="number">1</span>);</span><br><span class="line">modify(a, i, b[i].first + <span class="number">1</span>, b[i].first + (m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>), -b[i].first, n, <span class="number">1</span>);</span><br><span class="line">modify(a, i, b[i].first + (m + <span class="number">1</span> &gt;&gt; <span class="number">1</span>), INT_MAX, b[i].first, n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> p = min_element(c, c + n) - c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) res[a[i].second] = b[(i + p) % n].second + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[p] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; res[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Feeling-Good"><a href="#G-Feeling-Good" class="headerlink" title="G. Feeling Good"></a>G. Feeling Good</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有个$~n\times m~$的$~01~$矩阵，初始全为$~0~$。每次操作将第$~a~$行的第$~l~$至$~r~$列翻转，并计算是否存在$~1\leq x_1&lt; x_2\leq n,~1\leq y_1&lt; y_2\leq m~$，使得$~(x_1,y_1)~$与$~(x_2,y_2)~$一样，$(x_1,y_2)~$与$~(x_2,y_1)~$一样，但这$~4~$个不完全一样。输出坐标或者不存在。<br>数据范围$~1\leq n,m\leq2000,~1\leq q\leq500000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用<code>std::bitset&lt;2048&gt;</code>来储存每行的信息，这样单次修改操作的时间复杂度为$~O(\frac{m}{64})~$。对于答案的存在性，考虑任意两行的$~1~$所构成的集合$~A_i~$和$~A_j~$，如果$~A_i\not\subset A_j~$且$~A_j\not\subset A_i~$，则第$~i~$行和第$~j~$行存在答案，反之若对于任意$~i\not=j~$，必有$~A_i\subset A_j~$或$~A_j\subset A_i~$，则答案不存在。考虑将这些$~A~$根据集合大小排序，则答案不存在当且仅当对任意相邻的$~A_i~$和$~A_j~$，必有$~A_i\subset A_j~$或$~A_j\subset A_i~$。由于每次修改只会修改一个$~A~$，那么用<code>std::set</code>来维护这些$~A~$，每次修改只考虑修改前的前驱和后继，以及修改后的前驱和后继。对于答案坐标的计算，可以使用<code>bitset::_Find_first</code>函数，最后总时间复杂度为$~O(q(\log n+\frac{m}{64}))~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2048</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">bitset</span>&lt;maxn&gt; bit2048;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line">bit2048 mask[maxn], row[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[maxn];</span><br><span class="line">pii res[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!~a || !~b) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">bit2048 cap = row[a] &amp; row[b];</span><br><span class="line">cap[maxn - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">res[a][b] = pii((row[a] ^ cap)._Find_first(), (row[b] ^ cap)._Find_first());</span><br><span class="line"><span class="keyword">return</span> res[a][b].first != maxn - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">mask[i] = mask[i - <span class="number">1</span>];</span><br><span class="line">mask[i][i - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="built_in">set</span>&lt;pii&gt; rows, good;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) rows.emplace(<span class="number">0</span>, i);</span><br><span class="line">rows.emplace(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">rows.emplace(m + <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="built_in">set</span>&lt;pii&gt;::iterator ite, lef, rig;</span><br><span class="line">ite = rows.find(pii(cnt[a], a));</span><br><span class="line">lef = prev(ite);</span><br><span class="line">rig = next(ite);</span><br><span class="line">good.erase(pii(lef-&gt;second, ite-&gt;second));</span><br><span class="line">good.erase(pii(ite-&gt;second, rig-&gt;second));</span><br><span class="line"><span class="keyword">if</span> (check(lef-&gt;second, rig-&gt;second)) good.emplace(lef-&gt;second, rig-&gt;second);</span><br><span class="line">rows.erase(ite);</span><br><span class="line">row[a] ^= mask[r + <span class="number">1</span>];</span><br><span class="line">row[a] ^= mask[l];</span><br><span class="line">cnt[a] = row[a].count();</span><br><span class="line">rows.emplace(cnt[a], a);</span><br><span class="line">ite = rows.find(pii(cnt[a], a));</span><br><span class="line">lef = prev(ite);</span><br><span class="line">rig = next(ite);</span><br><span class="line">good.erase(pii(lef-&gt;second, rig-&gt;second));</span><br><span class="line"><span class="keyword">if</span> (check(lef-&gt;second, ite-&gt;second)) good.emplace(lef-&gt;second, ite-&gt;second);</span><br><span class="line"><span class="keyword">if</span> (check(ite-&gt;second, rig-&gt;second)) good.emplace(ite-&gt;second, rig-&gt;second);</span><br><span class="line"><span class="keyword">if</span> (good.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> a = good.begin()-&gt;first, b = good.begin()-&gt;second;</span><br><span class="line"><span class="keyword">int</span> c = res[a][b].first, d = res[a][b].second;</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) swap(a, b);</span><br><span class="line"><span class="keyword">if</span> (c &gt; d) swap(c, d);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">' '</span> &lt;&lt; c &lt;&lt; <span class="string">' '</span> &lt;&lt; b &lt;&lt; <span class="string">' '</span> &lt;&lt; d &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Tiles-Placement"><a href="#H-Tiles-Placement" class="headerlink" title="H. Tiles Placement"></a>H. Tiles Placement</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树，要求对所有节点$~k~$染色，使得任意一条长度为$~k~$的路径异色，输出任意染色方案或者不存在。<br>数据范围$~2\leq k\leq n\leq200000~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于$~k=2~$的情况，染色方法是显然的。下面只考虑$~k\geq3~$的情况。考虑$~3~$条长度为$~k~$的不同路径，如果它们是由一个节点引出的$~3~$条不同的链分别两两组合而成的，则显然不存在合法的$~k~$染色，同时记这个点为非法点。考虑这棵树的直径$~u_1,u_2,\dots,u_d~$，其中$~d~$为这棵树的直径长度。先对它们依次染色为$~1,2,\dots,k,1,2,\dots,k,1,2,\dots~$。将链扣去后会剩下一棵森林，下面对森林的每棵子树染色。假设当前子树的根节点$~r~$接在直径的$~u_i~$节点上，且它的深度为$~l~$，接下来判断$~u_i~$是否为非法点。注意到树直径的性质，必有$~l\leq i-1,~l\leq n-i~$，此时合法性等价于$~l+\min(i-1,n-i)&lt; k~$。且由直径的这个性质，如果$~u_i~$合法，则$~u_i~$所接上的以$~r~$为根的子树上的所有节点也是合法的，直接对这个子树染色即可，染色方向由$~i-1~$和$~n-i~$的大小关系决定。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> par[maxn], diam[maxn], len, vis[maxn], col[maxn], k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">DFS1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">pii ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) ret = max(ret, DFS1(v, u));</span><br><span class="line"><span class="keyword">if</span> (!ret.second) <span class="keyword">return</span> pii(<span class="number">1</span>, u);</span><br><span class="line">++ret.first;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">par[u] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) DFS2(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">col[u] = col[p] ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) draw1(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">draw2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">vis[u] = <span class="number">1</span>;</span><br><span class="line">col[u] = col[p] + e;</span><br><span class="line"><span class="keyword">if</span> (col[u] &gt; k) col[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (col[u] &lt; <span class="number">1</span>) col[u] = k;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) ret = max(ret, draw2(v, u, e));</span><br><span class="line"><span class="keyword">return</span> ret + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">draw1(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u != n; ++u) <span class="built_in">cout</span> &lt;&lt; col[u] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; col[n] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L = DFS1(<span class="number">1</span>, <span class="number">0</span>).second;</span><br><span class="line"><span class="keyword">int</span> R = DFS1(L, <span class="number">0</span>).second;</span><br><span class="line">DFS2(R, R);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = L; par[u] != u; u = par[u]) vis[diam[++len] = u] = <span class="number">1</span>;</span><br><span class="line">vis[diam[++len] = R] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = diam[i];</span><br><span class="line">col[u] = (i - <span class="number">1</span>) % k + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line"><span class="keyword">int</span> l = draw2(v, u, i + i &gt; len ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span> (l + min(i, len - i + <span class="number">1</span>) &gt;= k) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u != n; ++u) <span class="built_in">cout</span> &lt;&lt; col[u] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; col[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1214&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #583 (Div. 1 + Div. 2, based on Olympiad of
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>2019暑假牛客多校八</title>
    <link href="http://yoursite.com/2019/08/12/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E5%85%AB/"/>
    <id>http://yoursite.com/2019/08/12/2019暑假牛客多校八/</id>
    <published>2019-08-12T12:48:02.654Z</published>
    <updated>2019-08-12T12:48:15.033Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/888" target="_blank" rel="noopener">2019牛客暑期多校训练营（第八场）</a></p><h2 id="A-All-one-Matrices"><a href="#A-All-one-Matrices" class="headerlink" title="A. All-one Matrices"></a>A. All-one Matrices</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~01~$矩阵，计算极大全$~1~$子矩阵数量。<br>数据范围$~1\leq n,m\leq3000~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>枚举下边界，考虑只留下上半部分的且下方为下边界的极全$~1~$大子矩阵。由于此时考虑的极大全$~1~$子矩阵下方已经确定，因此只需要再确定左右端点，就能确定最上方的位置，所以每个当前子问题下的极大全$~1~$子矩阵等价于一个区间。注意到这些区间之间的关系要么相离，要么包含，因此可以用一个单调栈来维护，入栈相当于左端点，出栈相当于右端点。然后考虑当前子问题下找出的极大全$~1~$子矩阵是否在全局也是极大的。若不是极大的，那么等价于下方以下至少还有一层$~1~$，因此只需要对于相邻两层的区间计算，上层的区间如果也在下层出现，则筛去即可。总时间复杂度为$~O(nm)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3072</span>;</span><br><span class="line"><span class="keyword">char</span> matrix[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; r[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">same</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v1, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> ite1 = v1.begin(), ite2 = v2.begin();</span><br><span class="line"><span class="keyword">while</span> (ite1 != v1.end() &amp;&amp; ite2 != v2.end()) &#123;</span><br><span class="line"><span class="keyword">int</span> mi = min(*ite1, *ite2);</span><br><span class="line"><span class="keyword">if</span> (*ite1 == *ite2) ++ret;</span><br><span class="line"><span class="keyword">if</span> (*ite1 == mi) ++ite1;</span><br><span class="line"><span class="keyword">if</span> (*ite2 == mi) ++ite2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; matrix[i];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; <span class="built_in">stack</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; ++j) &#123;</span><br><span class="line">h[j] = matrix[i][j] == <span class="string">'1'</span> ? h[j] + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = j;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">stack</span>.empty() &amp;&amp; <span class="built_in">stack</span>.back().first &gt; h[j]) &#123;</span><br><span class="line">r[i][k = <span class="built_in">stack</span>.back().second].push_back(j);</span><br><span class="line">++res;</span><br><span class="line"><span class="built_in">stack</span>.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h[j] &amp;&amp; (<span class="built_in">stack</span>.empty() || <span class="built_in">stack</span>.back().first != h[j])) <span class="built_in">stack</span>.emplace_back(h[j], k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) res -= same(r[i - <span class="number">1</span>][j], r[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Beauty-Values"><a href="#B-Beauty-Values" class="headerlink" title="B. Beauty Values"></a>B. Beauty Values</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">pos[a].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (!pos[i].empty()) &#123;</span><br><span class="line">res += <span class="number">1L</span>L * pos[i][<span class="number">0</span>] * (n - pos[i][<span class="number">0</span>] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != <span class="keyword">int</span>(pos[i].size()); ++j)</span><br><span class="line">res += <span class="number">1L</span>L * (pos[i][j] - pos[i][j - <span class="number">1</span>]) * (n - pos[i][j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-CDMA"><a href="#C-CDMA" class="headerlink" title="C. CDMA"></a>C. CDMA</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1024</span>][<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">a[<span class="number">0</span>][<span class="number">0</span>] = a[<span class="number">0</span>][<span class="number">1</span>] = a[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">2</span>; n != <span class="number">1024</span>; n &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) &#123;</span><br><span class="line">a[i    ][j + n] =  a[i][j];</span><br><span class="line">a[i + n][j    ] =  a[i][j];</span><br><span class="line">a[i + n][j + n] = -a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; (j == m - <span class="number">1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Distance"><a href="#D-Distance" class="headerlink" title="D. Distance"></a>D. Distance</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~n\times m\times h~$的空间内支持两种操作：添加一个点$~(x,y,z)~$或计算与以有点与点$~(x,y,z)~$最小曼哈顿距离。<br>数据范围$~1\leq n\times m\times h,q\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑以每次查询的点为中心将大空间划分为$~8~$个部分，那么每个部分里的点到查询点的曼哈顿距离的表达式可以拆去绝对值符号。于是原问题可以拆分为$~8~$个在$~3~$维空间下支持单点插入和前缀或后缀查询最值操作的子问题。注意到空间总大小的数据范围，可以直接建$~8~$棵树状数组维护。总时间复杂度为$~O(q\log n\log m\log h)~$级别的。注意到树状数组的每次操作与$~2~$进制表示下的$~01~$数量有关，以及当$~n=m=q~$时$~\log n\log m\log q~$取最大，所以最坏复杂的不会超过$~O((\frac{5}{3}\log_210)^3q)~$，约等于$~O(170q)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, h, mh, mh_h;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pos(x, y, z) (x * mh + y * h + z - mh_h)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> bit0[maxn];</span><br><span class="line"><span class="keyword">int</span> bit1[maxn];</span><br><span class="line"><span class="keyword">int</span> bit2[maxn];</span><br><span class="line"><span class="keyword">int</span> bit3[maxn];</span><br><span class="line"><span class="keyword">int</span> bit4[maxn];</span><br><span class="line"><span class="keyword">int</span> bit5[maxn];</span><br><span class="line"><span class="keyword">int</span> bit6[maxn];</span><br><span class="line"><span class="keyword">int</span> bit7[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit0, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit1, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit2, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit3, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit4, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit5, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit6, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(bit7, <span class="number">0xc0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; h &gt;&gt; q;</span><br><span class="line">mh = m * h;</span><br><span class="line">mh_h = mh + h;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op, x, y, z, w, u;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">w = <span class="number">0</span> + x + y + z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit0[p] = max(bit0[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> + x + y - z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit1[p] = max(bit1[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> + x - y + z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit2[p] = max(bit2[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> + x - y - z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit3[p] = max(bit3[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> - x + y + z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit4[p] = max(bit4[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> - x + y - z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit5[p] = max(bit5[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> - x - y + z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit6[p] = max(bit6[p], w);</span><br><span class="line">&#125;</span><br><span class="line">w = <span class="number">0</span> - x - y - z;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">bit7[p] = max(bit7[p], w);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">w = <span class="number">0</span> + x + y + z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit0[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> + x + y - z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit1[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> + x - y + z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit2[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> + x - y - z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i ^= lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit3[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> - x + y + z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit4[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> - x + y - z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j; j ^= lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit5[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> - x - y + z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k; k ^= lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit6[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line">w = <span class="number">0</span> - x - y - z;</span><br><span class="line">u = <span class="number">0xc0c0c0c0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= n; i += lowbit(i))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y; j &lt;= m; j += lowbit(j))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = z; k &lt;= h; k += lowbit(k)) &#123;</span><br><span class="line"><span class="keyword">int</span> p = pos(i, j, k);</span><br><span class="line">u = max(u, bit7[p]);</span><br><span class="line">&#125;</span><br><span class="line">res = min(res, w - u);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Explorer"><a href="#E-Explorer" class="headerlink" title="E. Explorer"></a>E. Explorer</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个简单无向图，每条边给定一个区间$~[\,l,r\,]~$，对于每个当前值$~x~$，当且仅当$~x\in[\,l,r\,]~$这条边才为实边，否则为虚边。问有多少个$~x~$使得点$~1~$与点$~n~$连通。<br>数据范围$~1\leq n,m\leq10^5,~1\leq l\leq r\leq10^9~$</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对所有的$~l,r~$离散化，那么离散化后的每个区间里$~x~$的取值不会对图造成变化。如果暴力的维护每个$~x~$在每个区间里点$~1~$和点$~n~$的连通性，时间复杂度为$~O(nm)~$。考虑单个区间下，连通性可以用并查集维护，那么对离散化后的区间建立线段树，每个节点储存在这个区间下需要将多少虚边变为实边。根据线段树的性质，每条边只会放入$~O(\log m)~$个节点，那么对于每个节点上的边集用<code>std::vector</code>储存，空间复杂度为$~O(m\log m)~$。在遍历线段树的时候用带撤销并查集维护图的连通块，这样复杂度为$~O(m\log m\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, u[maxn], v[maxn], l[maxn], r[maxn], fa[maxn], rk[maxn], res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num, edge[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; seg[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">while</span> (fa[u] != u) u = fa[u]; <span class="keyword">return</span> u; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">u = find(u), v = find(v);</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (rk[u] &lt; rk[v]) swap(u, v);</span><br><span class="line">fa[v] = u;</span><br><span class="line"><span class="keyword">if</span> (rk[u] == rk[v]) ++rk[u];</span><br><span class="line">edge[index].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">undo</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; vec)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> u : vec) fa[u] = u; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LLL  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RRR  mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG  left, right</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123; seg[index].emplace_back(u, v); <span class="keyword">return</span>; &#125;</span><br><span class="line">insert(LLL, SEG, u, v);</span><br><span class="line">insert(RRR, SEG, u, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : seg[index]) merge(e.first, e.second, index);</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line"><span class="keyword">if</span> (find(<span class="number">1</span>) == find(n)) res += num[end] - num[begin];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dfs(LLL);</span><br><span class="line">dfs(RRR);</span><br><span class="line">&#125;</span><br><span class="line">undo(edge[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u[i] &gt;&gt; v[i] &gt;&gt; l[i] &gt;&gt; r[i];</span><br><span class="line">num.push_back(l[i]);</span><br><span class="line">num.push_back(++r[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(num.begin(), num.end());</span><br><span class="line">num.resize(unique(num.begin(), num.end()) - num.begin());</span><br><span class="line"><span class="keyword">auto</span> pos = [&amp;] (<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> lower_bound(num.begin(), num.end(), x) - num.begin(); &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) insert(<span class="number">0</span>, num.size(), <span class="number">1</span>, pos(l[i]), pos(r[i]), u[i], v[i]);</span><br><span class="line">iota(fa, fa + maxn, <span class="number">0</span>);</span><br><span class="line">dfs(<span class="number">0</span>, num.size(), <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Flower-Dance"><a href="#F-Flower-Dance" class="headerlink" title="F. Flower Dance"></a>F. Flower Dance</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定二维空间下$~n~$个点，问有多少$~4~$元组使得$~1~$个点被另外$~3~$个点构成的非退化三角形完全包含。<br>数据范围$~4\leq n\leq1000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先枚举中心点，那么剩下的$~3~$元组总量为$~\binom{n-1}{3}~$。考虑用总量减去非法$~3~$元组数量。对于非法$~3~$元组，那么必存在一条经过中心的的直线使得这$~3~$个点在同一侧。那么以中心点为中心极角排序然后双指针计算非法$~3~$元组即可。注意细节。总时间复杂度为$~O(n^2\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">i64 x, y;</span><br><span class="line">point(i64 _x = <span class="number">0</span>, i64 _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line"><span class="function">point <span class="title">unit</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; i64 d = __gcd(<span class="built_in">abs</span>(x), <span class="built_in">abs</span>(y)); <span class="keyword">return</span> point(x / d, y / d); &#125;</span><br><span class="line"><span class="function">point <span class="title">rev</span><span class="params">()</span>  <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> point(-x, -y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">quad</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt;  <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;= <span class="number">0</span> &amp;&amp; y &gt;  <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (x &lt;  <span class="number">0</span> &amp;&amp; y &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; y &lt;  <span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">point <span class="keyword">operator</span>-  (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x - p.x, y - p.y); &#125;</span><br><span class="line">i64   <span class="keyword">operator</span>^  (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>&lt;  (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> quad() == p.quad() ? (*<span class="keyword">this</span> ^ p) &gt; <span class="number">0</span> : quad() &lt; p.quad(); &#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>== (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x &amp;&amp; y == p.y; &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, point&amp; p) &#123; <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">C2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x * (x - <span class="number">1</span>) / <span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">C3</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x * (x - <span class="number">1</span>) * (x - <span class="number">2</span>) / <span class="number">6</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line">point p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> m = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">i64 res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; ps;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) <span class="keyword">if</span> (i != j) ps.push_back((p[j] - p[i]).unit());</span><br><span class="line">sort(ps.begin(), ps.end());</span><br><span class="line">res += C3(m);</span><br><span class="line"><span class="built_in">map</span>&lt;point, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; p : ps) ++cnt[p];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="keyword">if</span> (!(i &amp;&amp; ps[i] == ps[i - <span class="number">1</span>]))</span><br><span class="line">res += cnt[ps[i]] * C2(cnt[ps[i].rev()]);</span><br><span class="line">ps.resize(m &lt;&lt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) ps[j + m] = ps[j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>; j != m; ++j) &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (k == j + m) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ((ps[j] ^ ps[k]) == <span class="number">0</span> &amp;&amp; ps[j] == ps[k] &amp;&amp; k &gt;= m) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> ((ps[j] ^ ps[k]) &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">++k;</span><br><span class="line">&#125;</span><br><span class="line">res -= C2(k - j - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Gemstones"><a href="#G-Gemstones" class="headerlink" title="G. Gemstones"></a>G. Gemstones</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; <span class="built_in">stack</span>(str.size());</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : str) &#123;</span><br><span class="line"><span class="built_in">stack</span>[size++] = ch;</span><br><span class="line"><span class="keyword">if</span> (size &gt;= <span class="number">3</span> &amp;&amp; <span class="built_in">stack</span>[size - <span class="number">1</span>] == <span class="built_in">stack</span>[size - <span class="number">2</span>] &amp;&amp; <span class="built_in">stack</span>[size - <span class="number">2</span>] == <span class="built_in">stack</span>[size - <span class="number">3</span>]) size -= <span class="number">3</span>, ++res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-How-Many-Schemes"><a href="#H-How-Many-Schemes" class="headerlink" title="H. How Many Schemes"></a>H. How Many Schemes</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树，每条边上有一个字符集，并给出一些模式串$~t~$。每次查询一对点$~(u,v)~$，在从$~u~$到$~v~$的路径上依顺序在每条边的字符集里选一个字符组成字符串，计算有多少种选择方式使得组成的字符串至少包含$~1~$个模式串。<br>数据范围$~1\leq n\leq2500,~1\leq q\leq5000,~1\leq\sum|\,t\,|\leq40~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~\rm AC~$自动机上$~\rm DP~$。先对模式串建立$~\rm AC~$自动机，让终止节点的$~\rm fail~$和$~\rm next~$均指向自己。查询时对于树上每个节点，可以看作是一个$~\sum|\,t\,|~$维的向量，第$~i~$维的值表示从点$~u~$到当前点到达$~\rm AC~$自动机上$~i~$节点的方案数，那么答案就是$~v~$节点对应向量上终止节点维度的值之和。此时每条边，也是就是每个点集，可以看作是一个$~\sum|\,t\,|\times\sum|\,t\,|~$的转移矩阵，那么询问的答案就是从$~u~$到$~v~$的矩阵乘积再乘上向量$~(1,0,0,\dots)~$。<br>预处理$~\rm AC~$自动机和转移矩阵的时间复杂度为$~O(26(\sum|\,t\,|)n)~$。注意到转移矩阵不是对角阵，不满足乘法交换律，所以要分清楚左乘与右乘。如果单纯用倍增维护路径上的矩阵乘积来支持询问操作的话那么预处理和查询的时间复杂度为$~O((\sum|\,t\,|)^3n\log n)~$和$~O((\sum|\,t\,|)^3q\log n)~$，会$~\rm TLE~$。<br>先考虑优化查询，由于是静态查询，因此可以不做矩阵乘矩阵，之作矩阵乘向量，这样时间复杂度降为$~O((\sum|\,t\,|)^2q\log n)~$。对于预处理，记$~f(u)~$表示点$~u~$的深度在$~2~$进制表示下末尾$~0~$的数量那么只预处理每个节点向上走$~2^0,2^1,\dots,2^{f(u)}~$步也是足够的，只需要适当调整查询的方式。此时需要预处理的倍增矩阵数量为$~O(\sum f)~$。然而如果有很多深度为$~1024~$的节点的话这种优化无法降低时间复杂度。考虑先固定一个根节点，然后在根接上一条链，链的另一端为新的根节点。通过$~2~$进制枚举，可以使得对于所有的深度值，模$~2~$余$~1~$的节点数量不少于模$~2~$余$~0~$的节点数量，模$~4~$余$~2~$的节点数量不少于模$~4~$余$~0~$的节点数量，……，模$~2^k~$余$~2^{k-1}~$的节点数量不少于模$~2^k~$余$~0~$的节点数量。此时需要预处理的矩阵数量不超过$~\sum_{i=1}^{\infty}\frac{in}{2^i}=O(n)~$。此时总时间复杂度为$~O(26(\sum|\,t\,|)n+(\sum|\,t\,|)^3n+(\sum|\,t\,|)^2q\log n)~$。另一种调整根节的的方式就是随机选一个根节点，这样需要预处理的矩阵数量的期望应该还是$~O(n)~$的（猜的，不会证）。不过这样波动会比较大，最后$~10~$次提交只有$~7~$发通过，最快$~\rm 1726\,ms~$，限时$~\rm 3000\,ms~$。</p><h3 id="代码（概率算法）"><a href="#代码（概率算法）" class="headerlink" title="代码（概率算法）"></a><strong>代码（概率算法）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mask[maxt];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tensor</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val[maxt];</span><br><span class="line">tensor(<span class="keyword">int</span> x = <span class="number">0</span>) &#123; <span class="built_in">memset</span>(val, <span class="number">0</span>, maxt &lt;&lt; <span class="number">2</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxt; ++i) val[i] = x; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> i) <span class="keyword">const</span> &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">      <span class="keyword">int</span>&amp; <span class="keyword">operator</span>[] (<span class="keyword">int</span> i)       &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">int</span> ret = <span class="number">0</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxt; ++i) <span class="keyword">if</span> (mask[i]) ret = add(ret, val[i]); <span class="keyword">return</span> ret; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val[maxt][maxt];</span><br><span class="line">matrix(<span class="keyword">int</span> x = <span class="number">0</span>) &#123; <span class="built_in">memset</span>(val, <span class="number">0</span>, maxt * maxt &lt;&lt; <span class="number">2</span>); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxt; ++i) val[i][i] = x; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">operator</span>[] (<span class="keyword">int</span> i) <span class="keyword">const</span> &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">      <span class="keyword">int</span>* <span class="keyword">operator</span>[] (<span class="keyword">int</span> i)       &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">matrix <span class="keyword">operator</span>* (<span class="keyword">const</span> matrix&amp; mat) <span class="keyword">const</span> &#123;</span><br><span class="line">matrix ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxt; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != maxt; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != maxt; ++k)</span><br><span class="line">ret[i][j] = add(ret[i][j], mul(val[i][k], mat[k][j]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">tensor <span class="keyword">operator</span>* (<span class="keyword">const</span> matrix&amp; mat, <span class="keyword">const</span> tensor&amp; vec) &#123;</span><br><span class="line">tensor ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxt; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != maxt; ++j) ret[i] = add(ret[i], mul(mat[i][j], vec[j]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span> &#123;</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> ch_size = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">int</span> next[maxt][ch_size], end[maxt], fail[maxt], size = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = str[i] - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!next[cur][j]) next[cur][j] = size++;</span><br><span class="line">cur = next[cur][j];</span><br><span class="line"><span class="keyword">if</span> (end[cur]) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">end[cur] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; bfs;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (next[<span class="number">0</span>][i]) bfs.push(next[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">while</span> (!bfs.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> cur = bfs.front();</span><br><span class="line">bfs.pop();</span><br><span class="line"><span class="keyword">if</span> (end[cur] |= end[fail[cur]]) &#123;</span><br><span class="line">fill_n(next[cur], ch_size, cur);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != ch_size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (next[cur][i]) &#123;</span><br><span class="line">fail[next[cur][i]] = next[fail[cur]][i];</span><br><span class="line">bfs.push(next[cur][i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next[cur][i] = next[fail[cur]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2560</span>;</span><br><span class="line"><span class="keyword">int</span> edge[maxn], dep[maxn], pa[maxn][<span class="number">12</span>], low[maxn];</span><br><span class="line"><span class="built_in">string</span> str[maxn];</span><br><span class="line">matrix mat[maxn], dp0[maxn][<span class="number">12</span>], dp1[maxn][<span class="number">12</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line">ACAM acam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (u != p) &#123;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="number">12</span>; ++i) pa[u][i] = pa[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">low[u] = __builtin_ctz(dep[u] = dep[p] + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= low[u]; ++i) &#123;</span><br><span class="line">dp0[u][i] = dp0[u][i - <span class="number">1</span>] * dp0[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">dp1[u][i] = dp1[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>] * dp1[u][i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fill_n(pa[u], <span class="number">12</span>, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> e : adj[u]) &#123;</span><br><span class="line"><span class="keyword">int</span> v = edge[e] ^ u;</span><br><span class="line"><span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dp0[v][<span class="number">0</span>] = dp1[v][<span class="number">0</span>] = mat[e];</span><br><span class="line">dfs(v, u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">11</span>; ~i; --i) <span class="keyword">if</span> (dep[pa[u][i]] &gt;= dep[v]) u = pa[u][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">11</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] != pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">srand(time(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; str[i];</span><br><span class="line">edge[i] = u ^ v;</span><br><span class="line">adj[u].push_back(i);</span><br><span class="line">adj[v].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> pat;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; pat;</span><br><span class="line">acam.insert(pat.data(), pat.size());</span><br><span class="line">&#125;</span><br><span class="line">acam.build();</span><br><span class="line"><span class="built_in">memcpy</span>(mask, acam.end, maxt &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">char</span> ch : str[i]) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != maxt; ++j)</span><br><span class="line">++mat[i][acam.next[j][ch - <span class="string">'a'</span>]][j];</span><br><span class="line"><span class="keyword">int</span> r = rand() % n + <span class="number">1</span>;</span><br><span class="line">dfs(r, r);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">tensor vec;</span><br><span class="line">vec[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> f = lca(u, v), df = dep[f];</span><br><span class="line"><span class="keyword">while</span> (dep[u] != df) <span class="keyword">for</span> (<span class="keyword">int</span> i = low[u]; ~i; --i) <span class="keyword">if</span> (dep[u] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[f]) &#123;</span><br><span class="line">vec = dp1[u][i] * vec;</span><br><span class="line">u = pa[u][i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;matrix *&gt; tmp;</span><br><span class="line"><span class="keyword">while</span> (dep[v] != df) <span class="keyword">for</span> (<span class="keyword">int</span> i = low[v]; ~i; --i) <span class="keyword">if</span> (dep[v] - (<span class="number">1</span> &lt;&lt; i) &gt;= dep[f]) &#123;</span><br><span class="line">tmp.push_back(&amp;dp0[v][i]);</span><br><span class="line">v = pa[v][i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!tmp.empty()) &#123;</span><br><span class="line">vec = *tmp.back() * vec;</span><br><span class="line">tmp.pop_back();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; vec.count() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Inner-World"><a href="#I-Inner-World" class="headerlink" title="I. Inner World"></a>I. Inner World</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$棵树，每棵树初始只有编号为$~1~$的叶子。每次操作将区间$~[\,l,r\,]~$树上编号为$~u~$的节点添加一个编号为$~v~$的节点。保证每次操作的$~v~$不相同且一定合法。然后每次询问区间$~[\,l,r\,]~$树上编号为$~x~$的节点的子树大小之和，如果没有编号为$~x~$的节点则子树大小记为$~0~$。<br>数据范围$~1\leq n,m,q\leq300000~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>由于操作的合法性和所有的$~v~$都不一样，那么可以先根据所有的操作建一棵大树，此时所有位置上的树都是大树的一个子图。对于大树的每个节点，都记录一个区间，就是操作对应的树的区间。将$~\rm DFS~$序视为一个维度，树的编号视为另一个维度，则询问可以视为在一个$~n\times m~$的$~01~$矩阵上询问子矩阵之和，且大矩阵满足每行有且仅有连续的一段$~1~$。询问离线然后扫描线加线段树或支持区间修改区间查询的树状数组维护即可。总时间复杂度为$~O((m+q)\log n)~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">int</span> dfl[maxn], dfr[maxn], dfs_clock, nod[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">dfl[u] = ++dfs_clock;</span><br><span class="line">nod[dfs_clock] = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : son[u]) dfs(v);</span><br><span class="line">dfr[u] = dfs_clock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line">i64 dif[maxn], dii[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_suffix</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt; maxn; i += lowbit(i)) ++dif[i], dii[i] += p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub_suffix</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = p; i &lt; maxn; i += lowbit(i)) --dif[i], dii[i] -= p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_segment</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; add_suffix(l); sub_suffix(r + <span class="number">1</span>); &#125;</span><br><span class="line"><span class="function">i64 <span class="title">sum_prefix</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">i64 ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = p; i; i ^= lowbit(i)) ret += dif[i] * p + dif[i] - dii[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">i64 <span class="title">sum_segment</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> sum_prefix(r) - sum_prefix(l - <span class="number">1</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l[maxn], r[maxn];</span><br><span class="line">i64 res[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; query[maxn];</span><br><span class="line">BIT bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">l[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">r[<span class="number">1</span>] = n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">son[u].push_back(v);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l[v] &gt;&gt; r[v];</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> x, l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; l &gt;&gt; r;</span><br><span class="line">query[dfl[x] - <span class="number">1</span>].emplace_back(-i, make_pair(l, r));</span><br><span class="line">query[dfr[x]    ].emplace_back( i, make_pair(l, r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">bit.add_segment(l[nod[i]], r[nod[i]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; que : query[i]) &#123;</span><br><span class="line">i64 temp = bit.sum_segment(que.second.first, que.second.second);</span><br><span class="line">que.first &lt; <span class="number">0</span> ? res[-que.first] -= temp : res[que.first] += temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= q; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Just-Jump"><a href="#J-Just-Jump" class="headerlink" title="J. Just Jump"></a>J. Just Jump</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>初始在位置$~0~$，需要跳到位置$~L~$，且每步跳的距离至少为$~d~$。同时有$~m~$个限制，要求第$~t~$步不能跳到位置$~p~$上。计算方案数。<br>数据范围$~1\leq d\leq L\leq10^7,~1\leq m\leq3000~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑没有限制条件的子问题。记$~f(x)~$表示跳到$~x~$的方案数。那么有$~f(x)=\sum_{i=0}^{x-d}f(i)~$，前缀和优化可以在$~O(L)~$内处理处所有的$~f(0),f(1),\dots,f(L)~$。考虑限制减去的方案数。对于每对限制$~(t,p)~$，从起点到$~(t,p)~$的方案数为$~\binom{p-dt+t-1}{t-1}~$，从$~(t,p)~$到终点的方案数为$~f(L-p)~$，根据乘法原理，答案需要减去$~\binom{p-dt+t-1}{t-1}\times f(L-p)~$。再根据奇偶容斥，需要加回经过两次限制的方案，再减去经过三次限制的方案，……。对于所有的限制按$~t~$升序，那么对于每个限制，暴力枚举上一个经过的限制，以及已经经过限制的奇偶性，就能得到经过当前限制且已经经过奇数或偶数次限制的方案数。最后对于$~f(L)~$奇偶容斥后即为答案，总时间复杂度为$~O(L+m^2)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123; <span class="keyword">return</span> mul(a, mul(b, c)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fac[maxn], fiv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> k &lt; <span class="number">0</span> || k &gt; n ? <span class="number">0</span> : mul(fac[n], fiv[k], fiv[n - k]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">3072</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn], g[maxn], h[maxm][<span class="number">2</span>], t[maxm], p[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = fiv[<span class="number">0</span>] = fiv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">fiv[i] = mul(fiv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> L, d, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L &gt;&gt; d &gt;&gt; m;</span><br><span class="line">f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">fill_n(g, d, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = d; i &lt;= L; ++i) g[i] = add(g[i - <span class="number">1</span>], f[i] = g[i - d]);</span><br><span class="line"><span class="keyword">int</span> res = f[L];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; attack(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; tp : attack) <span class="built_in">cin</span> &gt;&gt; tp.first &gt;&gt; tp.second;</span><br><span class="line">sort(attack.begin(), attack.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) t[i] = attack[i].first, p[i] = attack[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) &#123;</span><br><span class="line">h[i][<span class="number">0</span>] = C(p[i] - <span class="number">1L</span>L * d * t[i] + t[i] - <span class="number">1</span>, t[i] - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != i; ++j) <span class="keyword">if</span> (p[j] &lt; p[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> tt = t[i] - t[j], pp = p[i] - p[j], c = C(pp - <span class="number">1L</span>L * d * tt + tt - <span class="number">1</span>, tt - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) h[i][k] = add(h[i][k], mul(h[j][k ^ <span class="number">1</span>], c));</span><br><span class="line">&#125;</span><br><span class="line">res = add(res, mul(sub(h[i][<span class="number">1</span>], h[i][<span class="number">0</span>]), f[L - p[i]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/888&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019牛客暑期多校训练营（第八场）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-All-one-Matrices&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多校" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019暑假牛客多校五</title>
    <link href="http://yoursite.com/2019/08/06/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%BA%94/"/>
    <id>http://yoursite.com/2019/08/06/2019暑假牛客多校五/</id>
    <published>2019-08-06T10:39:50.118Z</published>
    <updated>2019-08-06T11:13:06.522Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/885" target="_blank" rel="noopener">2019牛客暑期多校训练营（第五场）</a></p><h2 id="A-digits-2"><a href="#A-digits-2" class="headerlink" title="A. digits 2"></a>A. digits 2</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-generator-1"><a href="#B-generator-1" class="headerlink" title="B. generator 1"></a>B. generator 1</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>求二阶线性递推第$~n~$项。<br>数据范围$~1\leq n&lt; 10^{10^6}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>矩阵快速幂。注意到$~n~$是个大整数，因此在$~2~$进制下分解$~n~$做快速幂会$~\rm TLE~$，考虑$~10~$进制下分解的快速幂，优化做法的时间复杂度为$~O(40\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span>       u32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"></span><br><span class="line">u32 mod;</span><br><span class="line"><span class="function">u32 <span class="title">add</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function">u32 <span class="title">sub</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function">u32 <span class="title">mul</span><span class="params">(u32 a, u32 b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1U</span>LL * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(i) for (int i : &#123; 0, 1 &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span></span><br><span class="line">u32 val[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">matrix(u32 x = <span class="number">0</span>) &#123; <span class="built_in">memset</span>(val, <span class="number">0</span>, <span class="number">16</span>); loop(i) val[i][i] = x; &#125;</span><br><span class="line"><span class="keyword">const</span> u32* <span class="keyword">operator</span>[] (<span class="keyword">size_t</span> i) <span class="keyword">const</span> &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">      u32* <span class="keyword">operator</span>[] (<span class="keyword">size_t</span> i)       &#123; <span class="keyword">return</span> val[i]; &#125;</span><br><span class="line">matrix <span class="keyword">operator</span>* (<span class="keyword">const</span> matrix&amp; m) <span class="keyword">const</span> &#123;</span><br><span class="line">matrix ret;</span><br><span class="line">loop(i) loop(j) loop(k) ret[i][j] = add(ret[i][j], mul(val[i][k], m[k][j]));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span>^ (<span class="keyword">int</span> n) <span class="keyword">const</span> &#123;</span><br><span class="line">matrix ret(1), tmp(*this);</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = ret * tmp;</span><br><span class="line">tmp = tmp * tmp;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">u32 x0, x1, a, b;</span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x0 &gt;&gt; x1 &gt;&gt; a &gt;&gt; b &gt;&gt; n &gt;&gt; mod;</span><br><span class="line">matrix bas[<span class="number">10</span>], res(<span class="number">1</span>);</span><br><span class="line">bas[<span class="number">0</span>] = matrix(<span class="number">1</span>);</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = a;</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] = b;</span><br><span class="line">bas[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="number">10</span>; ++i) bas[i] = bas[i - <span class="number">1</span>] * bas[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">char</span> ch : n) res = (res ^ <span class="number">10</span>) * bas[ch - <span class="string">'0'</span>];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(mul(res[<span class="number">1</span>][<span class="number">0</span>], x1), mul(res[<span class="number">1</span>][<span class="number">1</span>], x0)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-generator-2"><a href="#C-generator-2" class="headerlink" title="C. generator 2"></a>C. generator 2</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n,x_0,a,b,p~$，序列$~x_0,x_1,\dots,x_{n-1}~$由$~x_i=(a\cdot x_{i-1}+b)\mod p~$生成。询问$~v~$在序列中第一次出现的位置或不存在。<br>数据范围$~T\leq4,~1\leq n\leq10^{18},~0\leq x_0,a,b&lt; p\leq10^9+9,~Q\leq1000~$，且$~p~$是质数。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对平凡情况分类讨论。对于非平凡情况，可以求出$~\lbrace\,x\,\rbrace~$的通项公式</p><script type="math/tex; mode=display">x_t=(x_0+\frac{b}{a-1})a^t-\frac{b}{a-1}</script><p>由于$~p~$是质数，每次询问就是在域$~\Bbb Z_{p}~$的乘法群上询问方程</p><script type="math/tex; mode=display">a^t=\frac{v+\frac{b}{a-1}}{x_0+\frac{b}{a-1}}</script><p>中$~t~$的最小解。对于形如$~a^x=b\mod p~$的数论方程，朴素的解法是用$~\rm BSGS~$算法，解当个方程的复杂度为$~O(\sqrt p\log p)~$。直接强解$~Q~$个方程显然会$~\rm TLE~$。考虑到$~\rm BSGS~$的复杂度组成为$~O((b+g)\cdot\log b)~$，其中$~b~$和$~g~$是$~\text{baby step}~$和$~\text{giant step}~$的大小，满足$~O(b\times g)=O(p)~$。且此时需要求解的$~Q~$个方程中$~a~$和$~p~$是不变的，因此可以预处理$~\sqrt{pQ}~$个$~\text{baby step}~$，这样总时间复杂度变为$~O(T\sqrt{pQ}\log(p+Q))~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; p ? a + b : a + b - p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + p : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 n;</span><br><span class="line"><span class="keyword">int</span> x0, a, b, Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x0 &gt;&gt; a &gt;&gt; b &gt;&gt; p &gt;&gt; Q;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (x0 == v)               res =  <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n != <span class="number">1</span> &amp;&amp; b == v) res =  <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>                       res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">res = mul(sub(v, x0), fpow(b, p - <span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span> (res &gt;= n) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x0 == v ? <span class="string">"0\n"</span> : <span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> y = mul(b, fpow(sub(a, <span class="number">1</span>), p - <span class="number">2</span>)), z = add(x0, y);</span><br><span class="line"><span class="keyword">if</span> (z) &#123;</span><br><span class="line"><span class="keyword">int</span> size = min(<span class="keyword">int</span>(<span class="built_in">sqrt</span>(p)) &lt;&lt; <span class="number">5</span>, p - <span class="number">1</span>), giant = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; baby(size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) &#123;</span><br><span class="line">baby[i] = make_pair(giant, i);</span><br><span class="line">giant = mul(giant, a);</span><br><span class="line">&#125;</span><br><span class="line">sort(baby.begin(), baby.end());</span><br><span class="line">giant = fpow(giant, p - <span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v, res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">v = mul(add(v, y), fpow(z, p - <span class="number">2</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> gs = <span class="number">0</span>; gs &lt; p; gs += size) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(baby.begin(), baby.end(), make_pair(v, <span class="number">0</span>));</span><br><span class="line"><span class="keyword">if</span> (ite != baby.end() &amp;&amp; ite-&gt;first == v) &#123;</span><br><span class="line">res = gs + ite-&gt;second;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">v = mul(v, giant);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res &gt;= n) res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (x0 == v ? <span class="string">"0\n"</span> : <span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-generator-3"><a href="#D-generator-3" class="headerlink" title="D. generator 3"></a>D. generator 3</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>序列$~x_0,x_1,\dots,x_{n-1}~$和$~y_0,y_1,\dots,y_{n-1}~$由$~x_i=(a_x\cdot x_{i-1}+b_x)\mod p_x~$和$~y_i=(a_y\cdot y_{i-1}+b_y)\mod p_y~$生成。计算点集$~(x_0,y_0),(x_1,y_1),\dots,(x_{n-1},y_{n-1})~$的凸包的面积。<br>数据范围$~0\leq a,b&lt; p\leq2\times10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>找出两个序列的循环节，显然循环节的长度不会超过$~p~$。然后根据$~y~$循环节的长度对$~x~$的一个循环节重排列，这样每个$~y_i~$对应的$~x~$取值必然为这个重排列的连续一段，对$~x~$建立$~\rm ST~$表即可。这样就能在$~O(p\log p)~$的时间内求出$~O(p)~$个对凸包有影响的点，且其余点均对凸包没有影响。总是复杂度为$~O(p\log p)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line">i64 x, y;</span><br><span class="line">point(i64 _x = <span class="number">0</span>, i64 _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">point <span class="keyword">operator</span>- (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x - p.x, y - p.y); &#125;</span><br><span class="line">i64   <span class="keyword">operator</span>^ (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x ? y &lt; p.y  : x &lt; p.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convex_hull</span><span class="params">(point p[], <span class="keyword">int</span> n, point con[])</span> </span>&#123;</span><br><span class="line">sort(p, p + n);</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">1</span> &amp;&amp; ((con[m - <span class="number">1</span>] - con[m - <span class="number">2</span>]) ^ (p[i] - con[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">con[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; k &amp;&amp; ((con[m - <span class="number">1</span>] - con[m - <span class="number">2</span>]) ^ (p[i] - con[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">con[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) --m;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">i64 <span class="title">area</span><span class="params">(point p[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">i64 ret = p[n - <span class="number">1</span>] ^ p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) ret += p[i - <span class="number">1</span>] ^ p[i];</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line">point p[maxn], con[maxn];</span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn], lastx[maxn], lasty[maxn], tmp[maxn], mi[maxn][<span class="number">20</span>], mx[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_min</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l);</span><br><span class="line"><span class="keyword">return</span> min(mi[l][k], mi[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">st_max</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">31</span> - __builtin_clz(r - l);</span><br><span class="line"><span class="keyword">return</span> max(mx[l][k], mx[r - (<span class="number">1</span> &lt;&lt; k)][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line">exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ax, ay, bx, by, px, py;</span><br><span class="line">i64 n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[<span class="number">0</span>] &gt;&gt; y[<span class="number">0</span>] &gt;&gt; ax &gt;&gt; ay &gt;&gt; bx &gt;&gt; by &gt;&gt; px &gt;&gt; py &gt;&gt; n;</span><br><span class="line">p[<span class="number">0</span>] = point(x[<span class="number">0</span>], y[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">x[i] = (<span class="number">1L</span>L * ax * x[i - <span class="number">1</span>] + bx) % px;</span><br><span class="line">y[i] = (<span class="number">1L</span>L * ay * y[i - <span class="number">1</span>] + by) % py;</span><br><span class="line">p[i] = point(x[i], y[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt;&gt; <span class="number">20</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(lastx, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(lasty, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">int</span> firstx = <span class="number">-1</span>, firsty = <span class="number">-1</span>, loopx = <span class="number">-1</span>, loopy = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (~lastx[x[i]]) &#123;</span><br><span class="line">firstx = lastx[x[i]];</span><br><span class="line">loopx = i - firstx;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lastx[x[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (~lasty[y[i]]) &#123;</span><br><span class="line">firsty = lasty[y[i]];</span><br><span class="line">loopy = i - firsty;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">lasty[y[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = max(firstx, firsty), *xx = x + size, *yy = y + size;</span><br><span class="line">n -= size;</span><br><span class="line"><span class="keyword">int</span> gcd = __gcd(loopx, loopy), stepx = loopx / gcd, stepy = loopy / gcd, invx, invy;</span><br><span class="line">exgcd(stepx, stepy, invx, invy);</span><br><span class="line">invy = (invy % stepx + stepx) % stepx;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != gcd; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != stepx; ++j)</span><br><span class="line">mi[j][<span class="number">0</span>] = mi[j + stepx][<span class="number">0</span>] = mx[j][<span class="number">0</span>] = mx[j + stepx][<span class="number">0</span>] = xx[(<span class="number">1L</span>L * j * loopy + i) % loopx];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != <span class="number">20</span>; ++k) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j + (<span class="number">1</span> &lt;&lt; k) &lt;= (stepx &lt;&lt; <span class="number">1</span>); ++j) &#123;</span><br><span class="line">mi[j][k] = min(mi[j][k - <span class="number">1</span>], mi[j + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))][k - <span class="number">1</span>]);</span><br><span class="line">mx[j][k] = max(mx[j][k - <span class="number">1</span>], mx[j + (<span class="number">1</span> &lt;&lt; (k - <span class="number">1</span>))][k - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != stepy; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1L</span>L * j * invy % stepx, r = l + min&lt;i64&gt;(stepx, (n - j * gcd - i - <span class="number">1</span>) / loopy + <span class="number">1</span>);</span><br><span class="line">p[size++] = point(st_min(l, r), yy[j * gcd + i]);</span><br><span class="line">p[size++] = point(st_max(l, r), yy[j * gcd + i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; area(con, convex_hull(p, n, con)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-independent-set-1"><a href="#E-independent-set-1" class="headerlink" title="E. independent set 1"></a>E. independent set 1</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$个点的简单图，计算所有子图的最大独立集大小之和。<br>数据范围$~2\leq n\leq26~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\rm DP~$，转移式为</p><script type="math/tex; mode=display">f(S)=\max(f(S\,\backslash\lbrace\,\min S\,\rbrace),f((S\,\backslash\lbrace\,\min S\,\rbrace)\cap A(\min S)^\complement)+1)</script><p>其中$~A(u)~$表示与$~u~$相邻的点集。<br>这样总时间复杂度和空间复杂度均为$~O(2^n)~$。<br>注意$~\rm DP~$数组要用<code>8bit</code>数据类型。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> u08;</span><br><span class="line">u08 dp[<span class="number">1</span> &lt;&lt; <span class="number">26</span>];</span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u] ^= <span class="number">1</span> &lt;&lt; v;</span><br><span class="line">adj[v] ^= <span class="number">1</span> &lt;&lt; u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> j = __builtin_ctz(i);</span><br><span class="line">dp[i] = max&lt;u08&gt;(dp[i ^ <span class="number">1</span> &lt;&lt; j], dp[(i ^ <span class="number">1</span> &lt;&lt; j) &amp; ~adj[j]] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(dp, dp + (<span class="number">1</span> &lt;&lt; n), <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-maximum-clique-1"><a href="#F-maximum-clique-1" class="headerlink" title="F. maximum clique 1"></a>F. maximum clique 1</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个集合$~\lbrace\,a_1,a_2,\dots,a_N\,\rbrace~$，找出一个最大的子集满足任意两个数在$~2~$进制表示下至少要有$~2~$个位置不一样。<br>数据范围$~1\leq N\leq5000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先去重，那么异或之后为$~2~$的幂的一对数不能同时在答案之中。对于每个数字，把它和与它异或之后为$~2~$的幂的数字相连。显然每个点至多连$~32~$条边，且这是个二分图，因为每条边只能连接$~2~$进制下有奇数个$~1~$的数和有偶数个$~1~$的数。那就是一个二分图最大独立集问题。先找出最大匹配，然后找出最小点覆盖，补集就是最大独立集。总时间复杂度为$~O(N^2)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; side[<span class="number">2</span>], adj[maxn];</span><br><span class="line"><span class="keyword">int</span> size0, size1, link[maxn], vis[maxn], match[maxn], sav[maxn], ban[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!~link[v] || DFS(link[v])) &#123;</span><br><span class="line">link[v] = u;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(link, <span class="number">-1</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != size0; ++u) &#123;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line">ret += DFS(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">sav[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (!ban[v]) &#123;</span><br><span class="line">ban[v] = <span class="number">1</span>;</span><br><span class="line">dfs(link[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> aa;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">a.insert(aa);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> aa : a) side[__builtin_parity(aa)].push_back(aa);</span><br><span class="line">size0 = side[<span class="number">0</span>].size();</span><br><span class="line">size1 = side[<span class="number">1</span>].size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != size1; ++j)</span><br><span class="line"><span class="keyword">if</span> (__builtin_popcount(side[<span class="number">0</span>][i] ^ side[<span class="number">1</span>][j]) == <span class="number">1</span>) adj[i].push_back(j);</span><br><span class="line">hungary();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size1; ++i) <span class="keyword">if</span> (~link[i]) match[link[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">if</span> (!match[i]) dfs(i);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size0; ++i) <span class="keyword">if</span> (sav[i]) res.push_back(side[<span class="number">0</span>][i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size1; ++i) <span class="keyword">if</span> (!ban[i]) res.push_back(side[<span class="number">1</span>][i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-subsequence-1"><a href="#G-subsequence-1" class="headerlink" title="G. subsequence 1"></a>G. subsequence 1</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个数字串$~s~$和$~t~$，计算$~s~$由多少个子序列在数字表示下比$~t~$大，子序列不能有前导$~0~$。<br>数据范围$~1\leq m\leq n\leq3000,~\sum n\leq3000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于$~s~$长度大于$~m~$的子序列，显然大于$~t~$，组合数枚举即可。下面计算长度等于$~m~$且大于$~t~$的子序列。记$~f(i,j)~$表示$~s~$长度为$~i~$的后缀中有多少长度为$~j~$的子序列大于$~t~$长度为$~j~$的后缀。直接$~\rm DP~$，最后$~f(n,m)~$就是答案。总时间复杂度为$~O(nm)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fac[maxn], fiv[maxn];</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123; <span class="keyword">return</span> n &lt; m ? <span class="number">0</span> : mul(fac[n], mul(fiv[m], fiv[n - m])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = fiv[<span class="number">0</span>] = fiv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">fiv[i] = mul(fiv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (s[i] != <span class="string">'0'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m; i + j &lt; n; ++j) res = add(res, C(n - i - <span class="number">1</span>, j));</span><br><span class="line"><span class="keyword">int</span> *dp0 = dp[<span class="number">0</span>], *dp1 = dp[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">size_t</span> size = (m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp0, <span class="number">0</span>, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(dp1, dp0, size);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[n - i] &gt;  t[m - j]) dp1[j] = add(dp1[j], C(i - <span class="number">1</span>, j - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (s[n - i] == t[m - j]) dp1[j] = add(dp1[j], dp0[j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">swap(dp0, dp1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(res, dp0[m]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-subsequence-2"><a href="#H-subsequence-2" class="headerlink" title="H. subsequence 2"></a>H. subsequence 2</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个隐藏的由前$~m~$个小写字母组成的字符串，给出$~\binom{m}{2}~$种字母对，在保留该对字母对情况下的剩余字符串。构造出合法原串或者不存在。<br>数据范围$~1\leq n\leq10^4,~2\leq m\leq10~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先判断每个字母出现次数的合法性，然后根据给出的字符串建图，拓扑排序即可。时间复杂度为$~O(nm+m^2)~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn =  <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc = <span class="number">100000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; drct[maxc], from[maxc], cnt[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> deg[maxc];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; drct[u].push_back(v); from[v].push_back(u); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m * (m - <span class="number">1</span>) / <span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> ch, str;</span><br><span class="line"><span class="keyword">int</span> l, tot[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; l;</span><br><span class="line"><span class="keyword">if</span> (l) <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; id(l), num(l);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) cnt[ch[j] - <span class="string">'a'</span>].push_back(count(str.begin(), str.end(), ch[j]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != l; ++i) &#123;</span><br><span class="line">id[i] = str[i] == ch[<span class="number">1</span>];</span><br><span class="line">num[i] = tot[id[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; l; ++i) link((ch[id[i - <span class="number">1</span>]] - <span class="string">'a'</span>) * maxn + num[i - <span class="number">1</span>], (ch[id[i]] - <span class="string">'a'</span>) * maxn + num[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i)</span><br><span class="line"><span class="keyword">if</span> (*min_element(cnt[i].begin(), cnt[i].end()) != *max_element(cnt[i].begin(), cnt[i].end()))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line"><span class="built_in">string</span> res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != cnt[i][<span class="number">0</span>]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (drct[i * maxn + j].empty()) &#123;</span><br><span class="line">topo.push_back(i * maxn + j);</span><br><span class="line">res.push_back(<span class="keyword">char</span>(i + <span class="string">'a'</span>));</span><br><span class="line">&#125;</span><br><span class="line">deg[i * maxn + j] = drct[i * maxn + j].size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(topo.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = topo[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : from[u]) <span class="keyword">if</span> (!--deg[v]) &#123;</span><br><span class="line">topo.push_back(v);</span><br><span class="line">res.push_back(<span class="keyword">char</span>(v / maxn + <span class="string">'a'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(res.size()) != n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-three-points-1"><a href="#I-three-points-1" class="headerlink" title="I. three points 1"></a>I. three points 1</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在$~[0,w]\times[0,h]~$上选$~3~$个点，满足两两距离分别为$~a,b,c~$，保证有解。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>计算几何。一定存在一合法解满足一个点在原点，还有一个点在矩形边缘，暴力枚举即可.</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">constexpr</span> T <span class="title">regular</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">return</span> min&lt;T&gt;(<span class="number">1</span>, max&lt;T&gt;(<span class="number">-1</span>, x)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">point  <span class="keyword">operator</span>* (<span class="keyword">const</span> <span class="keyword">double</span> k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x * k, y * k); &#125;</span><br><span class="line">point  <span class="keyword">operator</span>/ (<span class="keyword">const</span> <span class="keyword">double</span> k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> point(x / k, y / k); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">len</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> hypot(x, y); &#125;</span><br><span class="line"><span class="function">point <span class="title">unit</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span> / len(); &#125;</span><br><span class="line"><span class="function">point <span class="title">rotate</span><span class="params">(<span class="keyword">const</span> point&amp; ang)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> point(x * ang.x - y * ang.y, x * ang.y + y * ang.x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; os, <span class="keyword">const</span> point&amp; p) &#123; <span class="keyword">return</span> os &lt;&lt; p.x &lt;&lt; <span class="string">' '</span> &lt;&lt; p.y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> w, h, w2, h2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> point&amp; p)</span> </span>&#123; <span class="keyword">return</span> p.x + eps &gt; <span class="number">0</span> &amp;&amp; p.x &lt; w + eps &amp;&amp; p.y + eps &gt; <span class="number">0</span> &amp;&amp; p.y &lt; h + eps; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ctrl</span><span class="params">(point&amp; p)</span> </span>&#123; p.x = min(w, max&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, p.x)); p.y = min(h, max&lt;<span class="keyword">double</span>&gt;(<span class="number">0</span>, p.y)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b, <span class="keyword">double</span> c, point&amp; A, point&amp; B, point&amp; C)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> a2 = a * a, b2 = b * b, c2 = c * c;</span><br><span class="line"><span class="keyword">double</span> cosA = regular((b2 + c2 - a2) / <span class="number">2</span> / b / c), sinA = regular(<span class="built_in">sqrt</span>(<span class="number">1</span> - cosA * cosA));</span><br><span class="line">point angA(cosA, sinA), revA(cosA, -sinA);</span><br><span class="line"><span class="keyword">if</span> (cosA + eps &gt; <span class="number">0</span>) &#123;</span><br><span class="line">A = point();</span><br><span class="line"><span class="keyword">if</span> (cosA &lt; eps) &#123;</span><br><span class="line"><span class="keyword">if</span> (w + eps &gt; b &amp;&amp; h + eps &gt; c) &#123;</span><br><span class="line">B = point(<span class="number">0</span>, c);</span><br><span class="line">C = point(b, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (w + eps &gt; c &amp;&amp; h + eps &gt; b) &#123;</span><br><span class="line">B = point(c, <span class="number">0</span>);</span><br><span class="line">C = point(<span class="number">0</span>, b);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">B = h + eps &gt; c ? point(<span class="number">0</span>, c) : point(<span class="built_in">sqrt</span>(c2 - h2), h);</span><br><span class="line">C = B.unit().rotate(angA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">C = B.unit().rotate(revA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">B = w + eps &gt; c ? point(c, <span class="number">0</span>) : point(w, <span class="built_in">sqrt</span>(c2 - w2));</span><br><span class="line">C = B.unit().rotate(angA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">C = B.unit().rotate(revA) * b;</span><br><span class="line"><span class="keyword">if</span> (check(C)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">double</span> l[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h &gt;&gt; l[<span class="number">2</span>] &gt;&gt; l[<span class="number">1</span>] &gt;&gt; l[<span class="number">0</span>];</span><br><span class="line">w2 = w * w, h2 = h * h;</span><br><span class="line">point res[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> per[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">do</span> &#123; <span class="keyword">if</span> (solve(l[per[<span class="number">0</span>]], l[per[<span class="number">1</span>]], l[per[<span class="number">2</span>]], res[per[<span class="number">0</span>]], res[per[<span class="number">1</span>]], res[per[<span class="number">2</span>]])) <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">while</span> (next_permutation(per, per + <span class="number">3</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) ctrl(res[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[<span class="number">0</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; res[<span class="number">1</span>] &lt;&lt; <span class="string">' '</span> &lt;&lt; res[<span class="number">2</span>] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-three-points-2"><a href="#J-three-points-2" class="headerlink" title="J. three points 2"></a>J. three points 2</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树，每次询问$~a,b,c~$，找出$~3~$个点$~X,Y,Z~$满足$~XY,XZ,YZ~$的距离分别是$~a,b,c~$或不存在。<br>数据范围$~3\leq n,Q\leq2\times10^5~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先考虑单组询问。设$~XY,XZ,YZ~$的交点为$~O~$，则有$~OX=\frac{a+b-c}{2},OY=\frac{c+a-b}{2},OZ=\frac{b+c-a}{2}~$，这$~3~$个值按升序记为$~\alpha,\beta,\gamma~$。根据三角不等式和奇偶性排除显然无解的询问，然后设法寻找$~O~$点。记$~A(u)~$为与$~u~$相邻的点集，记$~f(u,v)~$为以$~u~$为起点，必经$~v~$的简单路径的最长长度。对于每个点$~u~$，考虑可重集$~\lbrace\,f(u,v):v\in A(u)\,\rbrace~$的最大的$~3~$个元素，按升序记为$~p_u,q_u,r_u~$。则此时点$~u~$可以作为交点的充要条件是$~p_u\geq\alpha,q_u\geq\beta,r_u\geq\gamma~$。对于所有$~p,q,r~$的处理可以通过两次$~\rm DFS~$结合树形$~\rm DP~$在$~O(n)~$内完成。<br>对于多组询问，先考虑寻找$~O~$点。每个$~(p_u,q_u,r_u)~$可以看作是在$~(p_u,q_u)~$处有一个权值为$~r_u~$的点，那么每个$~(\alpha,\beta,\gamma)~$的询问等价于点$~(\alpha,\beta)~$的右上方是否存在权值不小于$~\gamma~$的点。对询问先离线，然后扫描线加树状数组即可解决。<br>在找到$~O~$点之后，考虑在之前$~\rm DP~$的过程中不仅记录路径的最大值，同时记录最远的点是什么。那么$~X,Y,Z~$的查询等价于在$~OA,OB,OC~$上查询到$~O~$距离为$~\alpha,\beta,\gamma~$的点。用类似倍增$~\rm LCA~$的方法即可解决。<br>总时间复杂度为$~O((n+Q)\cdot\log n)~$</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> pa[maxn][<span class="number">18</span>], dep[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; dp[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">18</span>; ++i) <span class="keyword">if</span> (k &amp; <span class="number">1</span> &lt;&lt; i) u = pa[u][i];</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">u = find(u, dep[u] - dep[v]);</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] != pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f = lca(u, v);</span><br><span class="line"><span class="keyword">return</span> dep[u] - dep[f] &lt; d ? find(v, dep[u] + dep[v] - dep[f] - dep[f] - d) : find(u, d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs0</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;) dp[u][i] = make_pair(<span class="number">0</span>, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs0(v, u);</span><br><span class="line">dp[u][<span class="number">2</span>] = max(dp[u][<span class="number">2</span>], make_pair(dp[v][<span class="number">0</span>].first + <span class="number">1</span>, dp[v][<span class="number">0</span>].second));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">1</span>, <span class="number">0</span> &#125;) <span class="keyword">if</span> (dp[u][i] &lt; dp[u][i + <span class="number">1</span>]) swap(dp[u][i], dp[u][i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="number">18</span>; ++i) pa[u][i] = pa[pa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">auto</span> from = &amp;dp[p][dp[p][<span class="number">0</span>].second == dp[u][<span class="number">0</span>].second];</span><br><span class="line">dp[u][<span class="number">2</span>] = max(dp[u][<span class="number">2</span>], make_pair(from-&gt;first + <span class="number">1</span>, from-&gt;second));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : &#123; <span class="number">1</span>, <span class="number">0</span> &#125;) <span class="keyword">if</span> (dp[u][i] &lt; dp[u][i + <span class="number">1</span>]) swap(dp[u][i], dp[u][i + <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v : adj[u]) <span class="keyword">if</span> (v != p) dfs1(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> query[maxn][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> x, y, z; &#125; tree[maxn], fake[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Y0[maxn], Y1[maxn];</span><br><span class="line"></span><br><span class="line">node *bit[maxn], *res[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">better</span><span class="params">(node* ptr1, node* ptr2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (ptr1 == <span class="literal">nullptr</span>) <span class="keyword">return</span> ptr2;</span><br><span class="line"><span class="keyword">if</span> (ptr2 == <span class="literal">nullptr</span>) <span class="keyword">return</span> ptr1;</span><br><span class="line"><span class="keyword">return</span> ptr1-&gt;z &lt; ptr2-&gt;z ? ptr2 : ptr1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs0(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u : adj[<span class="number">0</span>]) dfs1(u, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">tree[i] = &#123; dp[i][<span class="number">2</span>].first + <span class="number">1</span>, dp[i][<span class="number">1</span>].first + <span class="number">1</span>, dp[i][<span class="number">0</span>].first + <span class="number">1</span>&#125;;</span><br><span class="line">Y0[tree[i].y].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != Q; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> ((a ^ b ^ c) &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">3</span>] = &#123; (a + b - c) &gt;&gt; <span class="number">1</span>, (c + a - b) &gt;&gt; <span class="number">1</span>, (b + c - a) &gt;&gt; <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">memcpy</span>(query[i], d, <span class="number">12</span>);</span><br><span class="line">sort(d, d + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (d[<span class="number">0</span>] &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">fake[i] = &#123; d[<span class="number">0</span>] + <span class="number">1</span>, d[<span class="number">1</span>] + <span class="number">1</span>, d[<span class="number">2</span>] + <span class="number">1</span> &#125;;</span><br><span class="line">Y1[fake[i].y].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line">fill_n(bit, n, <span class="literal">nullptr</span>);</span><br><span class="line">fill_n(res, n, <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = n; y; --y) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : Y0[y]) <span class="keyword">for</span> (<span class="keyword">int</span> j = tree[i].x; j       ; j ^= lowbit(j)) bit[j] = better(bit[j], tree + i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : Y1[y]) <span class="keyword">for</span> (<span class="keyword">int</span> j = fake[i].x; j &lt; maxn; j += lowbit(j)) res[i] = better(res[i], bit[j]  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != Q; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (res[i] == <span class="literal">nullptr</span> || res[i]-&gt;z &lt; fake[i].z) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-1\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> center = res[i] - tree;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">3</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;, ans[<span class="number">3</span>];</span><br><span class="line">sort(p, p + <span class="number">3</span>, [&amp;] (<span class="keyword">int</span> j, <span class="keyword">int</span> k) &#123; <span class="keyword">return</span> query[i][j] &lt; query[i][k]; &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j) ans[p[j]] = find(center, dp[center][<span class="number">2</span> - j].second, query[i][p[j]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j : &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;) <span class="built_in">cout</span> &lt;&lt; ans[j] &lt;&lt; (j == <span class="number">2</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/885&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019牛客暑期多校训练营（第五场）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-digits-2&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多校" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019暑假牛客多校四 (TBC)</title>
    <link href="http://yoursite.com/2019/08/01/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E5%9B%9B%20(TBC)/"/>
    <id>http://yoursite.com/2019/08/01/2019暑假牛客多校四 (TBC)/</id>
    <published>2019-08-01T11:53:47.961Z</published>
    <updated>2019-08-01T11:54:14.818Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/884" target="_blank" rel="noopener">2019牛客暑期多校训练营（第四场）</a></p><h2 id="A-meeting"><a href="#A-meeting" class="headerlink" title="A. meeting"></a>A. meeting</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span> vip[maxn], vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">vip[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bfs0(<span class="number">1</span>, x);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(bfs0.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = bfs0[i];</span><br><span class="line"><span class="keyword">if</span> (vip[u]) x = u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">bfs0.push_back(v);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; bfs1(<span class="number">1</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;(x, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, maxn &lt;&lt; <span class="number">2</span>);</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(bfs1.size()); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = bfs1[i].first, d = bfs1[i].second;</span><br><span class="line"><span class="keyword">if</span> (vip[u]) res = d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123;</span><br><span class="line">bfs1.emplace_back(v, d + <span class="number">1</span>);</span><br><span class="line">vis[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((res + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-xor"><a href="#B-xor" class="headerlink" title="B. xor"></a>B. xor</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个集合序列，每次询问区间$~[l,r]~$的集合是否存在一个子集使得异或值为$~x~$。<br>数据范围$~1\leq n,m\leq50000,~0\leq x&lt; 2^{32}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>每个集合可以看作一个线性空间，于是询问等价于问$~x~$是否属于一个区间的交。线性基求交等价于原空间的解空间求并。将原空间的基以上三角形式维护，则解空间可以在$~O(32^2)~$内求得。以解空间建立一棵线段树，对于查询，不要合并，直接在每个线段树节点上判断$~x~$是否与当前这个解空间正交即可。总时间复杂度为$~O(32^2n+32m\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> parity __builtin_parity</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> up0    __builtin_clz</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> u32;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">linear_space</span> :</span> <span class="built_in">vector</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) x = min(x, x ^ e); <span class="keyword">if</span> (x) <span class="keyword">this</span>-&gt;push_back(x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span> </span>&#123; <span class="built_in">std</span>::sort(<span class="keyword">this</span>-&gt;begin(), <span class="keyword">this</span>-&gt;end()); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) <span class="keyword">if</span> (parity(x &amp; e)) <span class="keyword">return</span> <span class="literal">false</span>; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; linear_space&lt;T&gt; solve(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s) &#123;</span><br><span class="line">linear_space&lt;T&gt; ker;</span><br><span class="line"><span class="keyword">for</span> (u32 i = <span class="number">0</span>; i != <span class="number">32U</span>; ++i) &#123;</span><br><span class="line">u32 x = <span class="number">1U</span> &lt;&lt; i;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : s) &#123;</span><br><span class="line"><span class="keyword">if</span> (up0(x) == up0(e)) &#123; flag = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (parity(x &amp; e)) x ^= <span class="number">1U</span> &lt;&lt; (<span class="number">31U</span> - up0(e));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) ker.push(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ker;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linear_space&lt;T&gt; merge(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s1, <span class="keyword">const</span> linear_space&lt;T&gt;&amp; s2) &#123;</span><br><span class="line">linear_space&lt;T&gt; ret(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : s2) ret.push(e);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u32 maxn = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line">linear_space&lt;u32&gt; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(u32 begin, u32 end, u32 index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">u32 sz;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sz;</span><br><span class="line"><span class="keyword">while</span> (sz--) &#123;</span><br><span class="line">u32 x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">seg[index].push(x);</span><br><span class="line">&#125;</span><br><span class="line">seg[index].sort();</span><br><span class="line">seg[index] = solve(seg[index]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">seg[index] = merge(seg[lson], seg[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">query</span><span class="params">(u32 begin, u32 end, u32 index, u32 l, u32 r, u32 x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> seg[index].check(x);</span><br><span class="line"><span class="keyword">return</span> query(lll, l, r, x) &amp;&amp; query(rrr, l, r, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">u32 n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line">u32 l, r, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (query(<span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x) ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-sequence"><a href="#C-sequence" class="headerlink" title="C. sequence"></a>C. sequence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定序列$~a_1,a_2,\dots,a_n~$和$~b_1,b_2,\dots,b_n~$，计算$~\max_{1\leq l\leq r\leq n}((\min_{i=l}^{r}a_i)\times(\sum_{i=l}^{r}b_i))~$。<br>数据范围$~1\leq n\leq3\times10^6,~-10^6\leq a,b\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过单调栈可以线性求出对于每个$~a_i~$，当$~a_i=\min_{j=l}^{r}a_j~$时$~l~$和$~r~$的取值范围。于是问题转化为对于$~b~$序列询问区间内的最大子段和。以$~b~$的前缀和建立最大最小值线段树即可。总时间复杂度为$~O(n\log n)~$，需要注意常数优化。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">22</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], ll[maxn], rr[maxn];</span><br><span class="line"><span class="keyword">int64_t</span> pre[maxn], mi[maxn &lt;&lt; <span class="number">1</span>], mx[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">mi[index] = mx[index] = pre[begin];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">mi[index] = min(mi[lson], mi[rson]);</span><br><span class="line">mx[index] = max(mx[lson], mx[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> min(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> LLONG_MAX;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> mi[index];</span><br><span class="line"><span class="keyword">return</span> min(min(lll, l, r), min(rrr, l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> max(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= r || end &lt;= l) <span class="keyword">return</span> LLONG_MIN;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= l &amp;&amp; end &lt;= r) <span class="keyword">return</span> mx[index];</span><br><span class="line"><span class="keyword">return</span> max(max(lll, l, r), max(rrr, l, r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">a[<span class="number">0</span>] = a[n + <span class="number">1</span>] = INT_MIN;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) pre[i] = pre[i - <span class="number">1</span>] + b[i];</span><br><span class="line">build(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; left, right;</span><br><span class="line">left.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[left.top()] &gt;= a[i]) left.pop();</span><br><span class="line">ll[i] = left.top();</span><br><span class="line">left.push(i);</span><br><span class="line">&#125;</span><br><span class="line">right.push(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[right.top()] &gt;= a[i]) right.pop();</span><br><span class="line">rr[i] = right.top();</span><br><span class="line">right.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int64_t</span> res = LLONG_MIN;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) res = max(res, a[i] * (max(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, i, rr[i]) - min(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, ll[i], i)));</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) res = max(res, a[i] * (min(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, i, rr[i]) - max(<span class="number">0</span>, n + <span class="number">1</span>, <span class="number">1</span>, ll[i], i)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-triples-I"><a href="#D-triples-I" class="headerlink" title="D. triples I"></a>D. triples I</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">3</span> == <span class="number">0</span>) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"1 "</span> &lt;&lt; a &lt;&lt; <span class="string">'\n'</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2 "</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;i64&gt; one[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">60</span>; ++i) <span class="keyword">if</span> (a &amp; <span class="number">1L</span>L &lt;&lt; i) one[i &amp; <span class="number">1</span>].push_back(<span class="number">1L</span>L &lt;&lt; i);</span><br><span class="line"><span class="keyword">if</span> (one[<span class="number">0</span>].empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">1</span>][<span class="number">0</span>] ^ one[<span class="number">1</span>][<span class="number">1</span>] ^ one[<span class="number">1</span>][<span class="number">2</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = one[<span class="number">1</span>].size() % <span class="number">3</span>; i != <span class="keyword">int</span>(one[<span class="number">1</span>].size()); ++i) temp ^= one[<span class="number">1</span>][i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (one[<span class="number">1</span>].empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">0</span>][<span class="number">0</span>] ^ one[<span class="number">0</span>][<span class="number">1</span>] ^ one[<span class="number">0</span>][<span class="number">2</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = one[<span class="number">0</span>].size() % <span class="number">3</span>; i != <span class="keyword">int</span>(one[<span class="number">0</span>].size()); ++i) temp ^= one[<span class="number">0</span>][i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (one[<span class="number">0</span>][<span class="number">0</span>] ^ one[<span class="number">1</span>][<span class="number">0</span>]) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">i64 temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != <span class="keyword">int</span>(one[i].size()); ++j) temp ^= one[i][j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> i : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) <span class="keyword">if</span> ((temp ^ one[i][<span class="number">0</span>]) % <span class="number">3</span> == <span class="number">0</span>) &#123; temp ^= one[i][<span class="number">0</span>]; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-triples-II"><a href="#E-triples-II" class="headerlink" title="E. triples II"></a>E. triples II</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算有多少个长度为$~n~$且均为$~3~$的倍数的序列满足按位或的值为$~a~$。<br>数据范围$~1\leq n\leq10^{18},~0\leq a\leq10^{18}~$</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>预处理$~f(x,y)~$表示，对于一个由$~x~$个模$~3~$余$~1~$和$~y~$个模$~3~$于$~2~$的数构成的集合，有多少个子集满足总和模$~3~$余$~0~$。那么对于每次询问快速幂加容斥即可。总时间复杂度为$~O(\log^4a+T\log^2a\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> i64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, i64 n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (n = (n % (mod - <span class="number">1</span>) + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> inv[<span class="number">31</span>], fac[<span class="number">31</span>], fiv[<span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fac[n], mul(fiv[k], fiv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pmt[<span class="number">31</span>][<span class="number">31</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = fiv[<span class="number">0</span>] = fiv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">30</span>; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fac[i] = mul(fac[i - <span class="number">1</span>], i);</span><br><span class="line">fiv[i] = mul(fiv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">30</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">30</span>; ++j) <span class="keyword">if</span> ((i + j + j) % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = i; ii &lt;= <span class="number">30</span>; ++ii) <span class="keyword">for</span> (<span class="keyword">int</span> jj = j; jj &lt;= <span class="number">30</span>; ++jj)</span><br><span class="line">pmt[ii][jj] = add(pmt[ii][jj], mul(bino(ii, i), bino(jj, j)));</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line">i64 n, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">60</span>; ++i) <span class="keyword">if</span> (a &amp; <span class="number">1L</span>L &lt;&lt; i) ++cnt[i &amp; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= cnt[<span class="number">0</span>]; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= cnt[<span class="number">1</span>]; ++j)</span><br><span class="line">res = add(res, mul(fpow(pmt[i][j], n), mul(fpow(mod - <span class="number">1</span>, cnt[<span class="number">0</span>] + cnt[<span class="number">1</span>] - i - j), mul(bino(cnt[<span class="number">0</span>], i), bino(cnt[<span class="number">1</span>], j)))));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-merge"><a href="#F-merge" class="headerlink" title="F. merge"></a>F. merge</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>暂略。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>平衡树等。暂略。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> <span class="keyword">int</span> size, key, x, max, son[<span class="number">2</span>]; &#125; a[maxn];</span><br><span class="line"><span class="keyword">int</span> root;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">a[x].size = a[a[x].son[<span class="number">0</span>]].size + a[a[x].son[<span class="number">1</span>]].size + <span class="number">1</span>;</span><br><span class="line">a[x].max = max(a[x].x, max(a[a[x].son[<span class="number">0</span>]].max, a[a[x].son[<span class="number">1</span>]].max));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> x + y;</span><br><span class="line"><span class="keyword">if</span> (a[x].key &gt; a[y].key) &#123;</span><br><span class="line">a[x].son[<span class="number">1</span>] = merge(a[x].son[<span class="number">1</span>], y);</span><br><span class="line">update(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a[y].son[<span class="number">0</span>] = merge(x, a[y].son[<span class="number">0</span>]);</span><br><span class="line">update(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> t, <span class="keyword">int</span> k, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">0</span>) &#123; x = y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">if</span> (a[a[t].son[<span class="number">0</span>]].size + <span class="number">1</span> &lt;= k) &#123;</span><br><span class="line">x = t;</span><br><span class="line">split(a[t].son[<span class="number">1</span>], k - a[a[t].son[<span class="number">0</span>]].size - <span class="number">1</span>, a[t].son[<span class="number">1</span>], y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">y = t;</span><br><span class="line">split(a[t].son[<span class="number">0</span>], k, x, a[t].son[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x) update(x);</span><br><span class="line"><span class="keyword">if</span> (y) update(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].size &gt;= k) <span class="keyword">return</span> get(a[p].son[<span class="number">0</span>], k);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].size + <span class="number">1</span> == k)<span class="keyword">return</span> a[p].x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> get(a[p].son[<span class="number">1</span>], k - a[a[p].son[<span class="number">0</span>]].size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_len</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[a[p].son[<span class="number">0</span>]].max &gt; x) <span class="keyword">return</span> get_len(a[p].son[<span class="number">0</span>], x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (a[p].x &gt; x) <span class="keyword">return</span> a[a[p].son[<span class="number">0</span>]].size;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> get_len(a[p].son[<span class="number">1</span>], x) + a[a[p].son[<span class="number">0</span>]].size + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">srand(time(<span class="literal">nullptr</span>));</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i].x;</span><br><span class="line">a[i].max = a[i].x;</span><br><span class="line">a[i].size = <span class="number">1</span>;</span><br><span class="line">a[i].key = rand();</span><br><span class="line">root = merge(root, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x, l, m, r, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; m &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> tmp;</span><br><span class="line">split(root, r, root, tmp);</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">split(root, m, x, y);</span><br><span class="line">root = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x &amp;&amp; y) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">int</span> p = get(x, <span class="number">1</span>), q = get(y, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (p &gt; q) &#123; swap(p, q); swap(x, y); &#125;</span><br><span class="line"><span class="keyword">int</span> num = get_len(x, q);</span><br><span class="line">split(x, num, z, x);</span><br><span class="line">root = merge(root, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x) root = merge(root, x);</span><br><span class="line"><span class="keyword">if</span> (y) root = merge(root, y);</span><br><span class="line">root = merge(root, tmp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; get(root, x) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-tree"><a href="#G-tree" class="headerlink" title="G. tree"></a>G. tree</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵大小为$~n~$的无根树$~A~$，每次询问有多少个$~A~$的子图于大小为$~m~$的无根树$~B~$同构。<br>数据范围$~n\leq2000,~t\leq10000,~m\leq12~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>树$~\rm hash~$。预处理出大小不超过$~12~$的有根树，总量为$~7813~$。考虑从小到大枚举，对于当前的树枚举一个节点然后扩张出一个叶节点，整个过程类似于$~\rm BFS~$。然后再考虑将树$~B~$的根连接到树$~A~$的根后得到一棵大小不超过$~12~$的大树的转移方案数，总量为$~13689~$。然后树形$~\rm DP~$，记$~dp(i,j)~$表示再$~A~$中以$~i~$为根的子树中有多少子图在以$~i~$为根时，与第$~j~$棵有根树同构。对于每次询问的树$~B~$，枚举出本质不同的根然后对于预处理的$~dp~$值求和即可。总时间复杂度为$~O(13689n+tm^2\log m)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> u64;</span><br><span class="line"><span class="keyword">const</span> u64 a = <span class="number">314159265359U</span>LL;</span><br><span class="line"><span class="keyword">const</span> u64 b = <span class="number">271828182845U</span>LL;</span><br><span class="line"><span class="keyword">const</span> u64 p = <span class="number">201907281725U</span>LL;</span><br><span class="line"><span class="function">u64 <span class="title">vec_hash</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;u64&gt;&amp; vec)</span> </span>&#123;</span><br><span class="line">u64 ret = a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : vec) ret = ret * p ^ x;</span><br><span class="line"><span class="keyword">return</span> ret * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> adj[<span class="number">12</span>], n;</span><br><span class="line">tree(<span class="keyword">int</span> _n = <span class="number">0</span>): n(_n) &#123; <span class="built_in">memset</span>(adj, <span class="number">0</span>, <span class="number">48</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; adj[u] ^= <span class="number">1</span> &lt;&lt; v, adj[v] ^= <span class="number">1</span> &lt;&lt; u; &#125;</span><br><span class="line"><span class="function">tree <span class="title">grow</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="function">tree <span class="title">ret</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line">        ret.link(u, n);</span><br><span class="line">        ++ret.n;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tree <span class="title">merge</span><span class="params">(<span class="keyword">const</span> tree&amp; t)</span> </span>&#123;</span><br><span class="line"><span class="function">tree <span class="title">ret</span><span class="params">(*<span class="keyword">this</span>)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != t.n; ++u) ret.adj[n + u] = t.adj[u] &lt;&lt; n;</span><br><span class="line">ret.link(<span class="number">0</span>, n);</span><br><span class="line">ret.n += t.n;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">u64 <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;u64&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v != n; ++v) <span class="keyword">if</span> (v != p &amp;&amp; (adj[u] &amp; <span class="number">1</span> &lt;&lt; v)) tmp.push_back(dfs(v, u));</span><br><span class="line">sort(tmp.begin(), tmp.end());</span><br><span class="line"><span class="keyword">return</span> vec_hash(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxt = <span class="number">1</span> &lt;&lt; <span class="number">13</span>;</span><br><span class="line">tree bfs[maxt];</span><br><span class="line"><span class="keyword">int</span> bfs_size, dp[maxn][maxt], sum[maxt];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; from[maxt];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs(v, u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = bfs_size - <span class="number">1</span>; ~i; --i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : from[i])</span><br><span class="line">dp[u][i] = add(dp[u][i], mul(dp[u][e.first], dp[v][e.second]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != bfs_size; ++i) sum[i] = add(sum[i], dp[u][i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;u64, <span class="keyword">int</span>&gt; pmt;</span><br><span class="line">bfs[<span class="number">0</span>] = tree(<span class="number">1</span>);</span><br><span class="line">pmt[bfs[<span class="number">0</span>].dfs(<span class="number">0</span>, <span class="number">0</span>)] = <span class="number">0</span>;</span><br><span class="line">bfs_size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != bfs_size; ++i) <span class="keyword">if</span> (bfs[i].n != <span class="number">12</span>) <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != bfs[i].n; ++u) &#123;</span><br><span class="line">u64 hash = (bfs[bfs_size] = bfs[i].grow(u)).dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (pmt.find(hash) == pmt.end()) pmt[hash] = bfs_size++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; bfs[i].n != <span class="number">12</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; bfs[i].n + bfs[j].n &lt;= <span class="number">12</span>; ++j)</span><br><span class="line">from[pmt[bfs[i].merge(bfs[j]).dfs(<span class="number">0</span>, <span class="number">0</span>)]].emplace_back(i, j);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">--u, --v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">adj[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="function">tree <span class="title">B</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != m; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">B.link(u - <span class="number">1</span>, v - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; root;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r != m; ++r) root.insert(pmt[B.dfs(r, r)]);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; r : root) res = add(res, sum[r]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-RNGs"><a href="#H-RNGs" class="headerlink" title="H. RNGs"></a>H. RNGs</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>暂略。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>暂略。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>暂略。</p><h2 id="I-string"><a href="#I-string" class="headerlink" title="I. string"></a>I. string</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义字符串$~a~$与$~b~$本质不同当且仅当$~a\neq b~$且$~a\neq rev(b)~$。问给定字符串$~s~$有多少种本质不同子串。<br>数据范围$~1\leq|s|\leq2\times10^5~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>将$~s~$与$~rev(s)~$用特殊字符连接后，原本意义上的本质不同子串的统计会包括$~s~$的所有子串$~t~$和$~rev(t)~$，然后再对$~t=rev(t)~$即$~t~$是回文的情况去重即可。用后缀自动机和回文自动机处理即可，总时间复杂度为$~O(|s|\log26)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> sam &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">node</span>;</span></span><br><span class="line">ul las = <span class="number">1</span>;</span><br><span class="line">ul tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ul c)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sam</span>:</span>:node &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ul ch[<span class="number">27</span>];</span><br><span class="line">ul len = <span class="number">0</span>;</span><br><span class="line">ul fa = <span class="number">0</span>;</span><br><span class="line">node() &#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">memset</span>(ch, <span class="number">0</span>, <span class="keyword">sizeof</span>(ch));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sam::node samnodes[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> sam::add(ul c)</span><br><span class="line">&#123;</span><br><span class="line">ul p = las;</span><br><span class="line">ul np = las = ++tot;</span><br><span class="line"><span class="keyword">auto</span>* nodes = samnodes;</span><br><span class="line">nodes[np].len = nodes[p].len + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( ; p &amp;&amp; !nodes[p].ch[c]; p = nodes[p].fa) &#123;</span><br><span class="line">nodes[p].ch[c] = np;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!p) &#123;</span><br><span class="line">nodes[np].fa = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ul q = nodes[p].ch[c];</span><br><span class="line"><span class="keyword">if</span> (nodes[q].len == nodes[p].len + <span class="number">1</span>) &#123;</span><br><span class="line">nodes[np].fa = q;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ul nq = ++tot;</span><br><span class="line">nodes[nq] = nodes[q];</span><br><span class="line">nodes[nq].len = nodes[p].len + <span class="number">1</span>;</span><br><span class="line">nodes[q].fa = nodes[np].fa = nq;</span><br><span class="line"><span class="keyword">for</span> ( ; p &amp;&amp; nodes[p].ch[c] == q; p = nodes[p].fa) &#123;</span><br><span class="line">nodes[p].ch[c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> rstr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N= <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Palindromic_Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> nxt[MAXN][N];</span><br><span class="line"><span class="keyword">int</span> fail[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt[MAXN];</span><br><span class="line"><span class="keyword">int</span> num[MAXN];</span><br><span class="line"><span class="keyword">int</span> len[MAXN];</span><br><span class="line"><span class="keyword">int</span> S[MAXN];</span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;++i) nxt[p][i] =<span class="number">0</span>;</span><br><span class="line">cnt[p] = <span class="number">0</span>;</span><br><span class="line">num[p] = <span class="number">0</span>;</span><br><span class="line">len[p] = l;</span><br><span class="line"><span class="keyword">return</span> p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p = <span class="number">0</span>;</span><br><span class="line">newnode(<span class="number">0</span>);</span><br><span class="line">newnode(<span class="number">-1</span>);</span><br><span class="line">last = <span class="number">0</span>;</span><br><span class="line">n = <span class="number">0</span>;</span><br><span class="line">S[n] = <span class="number">-1</span>;</span><br><span class="line">fail[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_fail</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(S[n - len[x] - <span class="number">1</span>] != S[n]) &#123;</span><br><span class="line">   x = fail[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">c -= <span class="string">'a'</span>;</span><br><span class="line">S[++n] = c;</span><br><span class="line"><span class="keyword">int</span> cur = get_fail(last);</span><br><span class="line"><span class="keyword">if</span>(!nxt[cur][c]) &#123;</span><br><span class="line"><span class="keyword">int</span> now = newnode(len[cur] + <span class="number">2</span>);</span><br><span class="line">fail[now] = nxt[get_fail(fail[cur])][c];</span><br><span class="line">nxt[cur][c] = now;</span><br><span class="line">num[now] = num[fail[now]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">last = nxt[cur][c];</span><br><span class="line">cnt[last]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; run;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>; i != str.size(); ++i) &#123;</span><br><span class="line">sam::add(str[i] - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">sam::add(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">for</span> (ul i = str.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">sam::add(str[i] - <span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line">ull ans2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">2</span>; i &lt;= sam::tot; ++i) &#123;</span><br><span class="line">ans2 += samnodes[i].len - samnodes[samnodes[i].fa].len;</span><br><span class="line">&#125;</span><br><span class="line">ans2 -= ull(str.size() + <span class="number">1</span>) * ull(str.size() + <span class="number">1</span>);</span><br><span class="line">run.init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; str.size();++i) run.add(str[i],i);</span><br><span class="line">ull ans3 = run.p - <span class="number">2</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"%llu\n"</span>, (ans2 + ans3) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-free"><a href="#J-free" class="headerlink" title="J. free"></a>J. free</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在正边权图上给定两点，问最多使$~k~$条边边权为$~0~$的条件下的最短路。<br>数据范围$~1\leq n,m\leq10^3,~0\leq k\leq m~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>跑$~k+1~$次单源最短路或者建$~k+1~$层的大图跑一遍单源最短路。总时间复杂度为$~O(km\log n)~$。注意大图做法需要注意常数。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxx = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; adj[maxn], graph[maxx];</span><br><span class="line"><span class="keyword">int_fast8_t</span> vis[maxx];</span><br><span class="line"><span class="keyword">int</span> dis[maxx];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, s, t, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t &gt;&gt; k;</span><br><span class="line">--s, --t;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">--u, --v;</span><br><span class="line">adj[u].emplace_back(v, w);</span><br><span class="line">adj[v].emplace_back(u, w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) graph[u] = adj[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != k; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : adj[u]) &#123;</span><br><span class="line">graph[i * n + u].emplace_back(i * n + n + e.first, <span class="number">0</span>);</span><br><span class="line">graph[i * n + n + u].emplace_back(i * n + n + e.first, e.second);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt;&gt; heap;</span><br><span class="line">heap.emplace(<span class="number">0</span>, s);</span><br><span class="line"><span class="keyword">while</span> (!heap.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> top =  heap.top();</span><br><span class="line">heap.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[top.second]) <span class="keyword">continue</span>;</span><br><span class="line">vis[top.second] = <span class="number">1</span>;</span><br><span class="line">dis[top.second] = top.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : graph[top.second]) <span class="keyword">if</span> (!vis[e.first]) heap.emplace(top.first + e.second, e.first);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; ++i) res = min(res, dis[i * n + t]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-number"><a href="#K-number" class="headerlink" title="K. number"></a>K. number</h2><h3 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int64_t</span> res = count(str.begin(), str.end(), <span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) &#123;</span><br><span class="line"><span class="keyword">int</span> x = ch - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">++cnt[last = (last + x) % <span class="number">3</span>];</span><br><span class="line">zero = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (zero) res += cnt[last] - <span class="number">1</span>;</span><br><span class="line">++cnt[last];</span><br><span class="line">++zero;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/884&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019牛客暑期多校训练营（第四场）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-meeting&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多校" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019暑假杭电多校三 (TBC)</title>
    <link href="http://yoursite.com/2019/08/01/2019%E6%9A%91%E5%81%87%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E4%B8%89%20(TBC)/"/>
    <id>http://yoursite.com/2019/08/01/2019暑假杭电多校三 (TBC)/</id>
    <published>2019-08-01T11:53:47.957Z</published>
    <updated>2019-08-01T11:54:09.441Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=850" target="_blank" rel="noopener">2019 Multi-University Training Contest 3</a></p><h2 id="B-Blow-up-the-city"><a href="#B-Blow-up-the-city" class="headerlink" title="B. Blow up the city"></a>B. Blow up the city</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~\rm DAG~$，每次询问两点，问有多少个点满足扣去之后给定点中至少有一个点无法到达原图的无出度点。<br>数据范围$~1\leq T\leq10,~1\leq n\leq100000,~1\leq m\leq200000,~1\leq q\leq100000~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>支配树上$~\rm LCA~$。可以根据拓扑序维护倍增$~\rm LCA~$。总时间复杂度为$~O(T\cdot(m+q)\cdot\log n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; drct[maxn], from[maxn];</span><br><span class="line"><span class="keyword">int</span> deg[maxn], dep[maxn], pa[maxn][<span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (dep[pa[u][i]] &gt;= dep[v]) u = pa[u][i];</span><br><span class="line"><span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">17</span>; ~i; --i) <span class="keyword">if</span> (pa[u][i] != pa[v][i]) &#123;</span><br><span class="line">u = pa[u][i];</span><br><span class="line">v = pa[v][i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u &lt;= n; ++u) &#123;</span><br><span class="line">drct[u].clear();</span><br><span class="line">from[u].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">drct[u].push_back(v);</span><br><span class="line">from[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="keyword">if</span> (drct[u].empty()) &#123;</span><br><span class="line">drct[u].push_back(<span class="number">0</span>);</span><br><span class="line">from[<span class="number">0</span>].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">deg[u] = drct[u].size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u = topo[i];</span><br><span class="line"><span class="keyword">if</span> (u) &#123;</span><br><span class="line"><span class="keyword">auto</span> ite = drct[u].begin();</span><br><span class="line"><span class="keyword">int</span> p = *ite++;</span><br><span class="line"><span class="keyword">while</span> (ite != drct[u].end()) p = LCA(p, *ite++);</span><br><span class="line">dep[u] = dep[p] + <span class="number">1</span>;</span><br><span class="line">pa[u][<span class="number">0</span>] = p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != <span class="number">18</span>; ++j) pa[u][j] = pa[pa[u][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : from[u]) <span class="keyword">if</span> (!--deg[v]) topo.push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dep[u] + dep[v] - dep[LCA(u, v)] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Fansblog"><a href="#F-Fansblog" class="headerlink" title="F. Fansblog"></a>F. Fansblog</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个质数$~P~$，找出最大的质数$~Q&lt; P~$，计算$~Q!\mod P~$。<br>数据范围$~1\leq T\leq10,~10^9\leq P\leq10^{14}~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>相邻的质数肯定不会太远，不会超过$~1000~$，可以暴力求出$~Q~$，然后利用威尔逊定理即可求出答案。总时间复杂度为$~O(1000T)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">typedef long long i64;</span><br><span class="line"></span><br><span class="line">bool check(i64 x) &#123;</span><br><span class="line">for (i64 p = 2; p * p &lt; x; ++p) if (x % p == 0) return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i64 mul(i64 a, i64 b, i64 p) &#123; return __int128(a) * b % p; &#125;</span><br><span class="line"></span><br><span class="line">i64 fpow(i64 a, i64 n, i64 p) &#123;</span><br><span class="line">i64 ret = 1;</span><br><span class="line">while (n) &#123;</span><br><span class="line">if (n &amp; 1) ret = mul(ret, a, p);</span><br><span class="line">a = mul(a, a, p);</span><br><span class="line">n &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">cin.tie(nullptr);</span><br><span class="line">cout.tie(nullptr);</span><br><span class="line">int T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line">while (T--) &#123;</span><br><span class="line">i64 P;</span><br><span class="line">cin &gt;&gt; P;</span><br><span class="line">i64 Q = P - 1, res = 1;</span><br><span class="line">while (!check(Q)) res = mul(res, Q--, P);</span><br><span class="line">cout &lt;&lt; mul(fpow(res, P - 2, P), P - 1, P) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/contests/contest_show.php?cid=850&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019 Multi-University Training Contest 3
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多校" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 576 (Div. 1) (TBC)</title>
    <link href="http://yoursite.com/2019/08/01/Codeforces%20Round%20576%20(Div.%201)%20(TBC)/"/>
    <id>http://yoursite.com/2019/08/01/Codeforces Round 576 (Div. 1) (TBC)/</id>
    <published>2019-08-01T10:50:33.931Z</published>
    <updated>2019-08-01T10:50:39.577Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1198" target="_blank" rel="noopener">Codeforces Round #576 (Div. 1)</a></p><h2 id="A-MP3"><a href="#A-MP3" class="headerlink" title="A. MP3"></a>A. MP3</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, I;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; I;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">++cnt[a];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = (I &lt;&lt; <span class="number">3</span>) / n;</span><br><span class="line"><span class="keyword">if</span> (k &gt; <span class="number">30</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">1</span> &lt;&lt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : cnt) tot.push_back(p.second);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, s = <span class="number">0</span>; i != <span class="keyword">int</span>(tot.size()); ++i) &#123;</span><br><span class="line">s += tot[i];</span><br><span class="line"><span class="keyword">if</span> (i - j == size) s -= tot[j++];</span><br><span class="line">res = max(res, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n - res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Welfare-State"><a href="#B-Welfare-State" class="headerlink" title="B. Welfare State"></a>B. Welfare State</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要求对一个序列支持两种操作：单点修改或全局取$~\max~$。<br>数据范围$~1\leq n\leq2\cdot10^5,~1\leq n\leq2\cdot10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>最普遍的方法是线段树，全局取$~\max~$时更新根节点的标记，单点修改时对路径上的节点下放标记即可。总时间复杂度为$~O(n+q\log n)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="keyword">int</span> val[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>], pos[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid  ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lll  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrr  mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; val[index];</span><br><span class="line">pos[end] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(lll);</span><br><span class="line">build(rrr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">tag[lson] = max(tag[lson], tag[index]);</span><br><span class="line">tag[rson] = max(tag[rson], tag[index]);</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= p || end &lt; p) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">val[index] = x;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line">modify(lll, p, x);</span><br><span class="line">modify(rrr, p, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line">val[index] = max(val[index], tag[index]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down(index);</span><br><span class="line">push_down(lll);</span><br><span class="line">push_down(rrr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op, p, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p &gt;&gt; x;</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, p, x);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">tag[<span class="number">1</span>] = max(tag[<span class="number">1</span>], x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">push_down(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cout</span> &lt;&lt; val[pos[i]] &lt;&lt; (i == n ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Matching-vs-Independent-Set"><a href="#C-Matching-vs-Independent-Set" class="headerlink" title="C. Matching vs Independent Set"></a>C. Matching vs Independent Set</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个有$~3n~$个点的图，输出一个大小为$~n~$的独立边集或者独立点集。<br>数据范围$~1\leq\sum n\leq10^5,~0\leq\sum m\leq5\cdot10^5~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑任取一个极大独立边集，如果边数超过$~n~$，则答案已经构造完毕。如果边数少于$~n~$，则至少还有$~n~$个点没有取过，而根据当前的独立边集的极大性，剩余的点两两之间没有边，显然可以构造出大小为$~n~$的独立点集。总时间复杂度为$~O(n+m)~$</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="keyword">int</span> e[maxn][<span class="number">2</span>], ban[maxn], vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i) &#123;</span><br><span class="line">adj[i].clear();</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">ban[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">e[i][<span class="number">0</span>] = u;</span><br><span class="line">e[i][<span class="number">1</span>] = v;</span><br><span class="line">adj[u].push_back(i);</span><br><span class="line">adj[v].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge, vertice;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span> (!ban[i]) &#123;</span><br><span class="line">edge.push_back(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : &#123; <span class="number">0</span>, <span class="number">1</span> &#125;) &#123;</span><br><span class="line">vis[e[i][j]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> k : adj[e[i][j]]) ban[k] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; ++i) <span class="keyword">if</span> (!vis[i]) vertice.push_back(i);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(edge.size()) &lt; n) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IndSet\n"</span> &lt;&lt; vertice.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; vertice[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Matching\n"</span> &lt;&lt; edge.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; edge[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Rectangle-Painting-1"><a href="#D-Rectangle-Painting-1" class="headerlink" title="D. Rectangle Painting 1"></a>D. Rectangle Painting 1</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个黑白染色的网格图，每次对一个矩形染白的花费是长和宽的最大值。计算把全图染白的最小花费。<br>数据范围$~1\leq n\leq50~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二维区间$~\rm DP~$，总时间复杂度为$~O(\frac{1}{36}n^5)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">56</span>;</span><br><span class="line"><span class="keyword">int</span> s[maxn][maxn], dp[maxn][maxn][maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rect</span><span class="params">(<span class="keyword">int</span> x1, <span class="keyword">int</span> y1, <span class="keyword">int</span> x2, <span class="keyword">int</span> y2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line">s[i][j] = s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'#'</span>) ++s[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x1 = n; x1; --x1)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y1 = n; y1; --y1)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x2 = x1; x2 &lt;= n; ++x2)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y2 = y1; y2 &lt;= n; ++y2)</span><br><span class="line"><span class="keyword">if</span> (rect(x1, y1, x2, y2)) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; cur = dp[x1][y1][x2][y2];</span><br><span class="line">cur = max(x2 - x1, y2 - y1) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = x1; x &lt;= x2; ++x) <span class="keyword">if</span> (!rect(x, y1, x, y2))</span><br><span class="line">cur = min(cur, dp[x1][y1][x - <span class="number">1</span>][y2] + dp[x + <span class="number">1</span>][y1][x2][y2]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = y1; y &lt;= y2; ++y) <span class="keyword">if</span> (!rect(x1, y, x2, y))</span><br><span class="line">cur = min(cur, dp[x1][y1][x2][y - <span class="number">1</span>] + dp[x1][y + <span class="number">1</span>][x2][y2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][<span class="number">1</span>][n][n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1198&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #576 (Div. 1)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-MP3&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>2019暑假牛客多校一</title>
    <link href="http://yoursite.com/2019/07/19/2019%E6%9A%91%E5%81%87%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/19/2019暑假牛客多校一/</id>
    <published>2019-07-19T15:51:08.120Z</published>
    <updated>2019-07-20T12:20:39.672Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/881" target="_blank" rel="noopener">2019牛客暑期多校训练营（第一场）</a></p><h2 id="A-Equivalent-Prefixes"><a href="#A-Equivalent-Prefixes" class="headerlink" title="A. Equivalent Prefixes"></a>A. Equivalent Prefixes</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个序列，求它们的最长的前缀长度满足这一对子序列的大小关系是一致的。<br>数据范围$~1\leq n\leq10^5,~\sum n\leq5\times10^5~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题意给定的关系等价于笛卡尔树相同。可以单调栈求出每个位置左边第一个比它小的位置，然后依次比较。单组数据的时间复杂度为$~O(n)~$。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; a, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; l, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">sta.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (a[sta.top()] &gt; a[i]) sta.pop();</span><br><span class="line">l[i] = sta.top();</span><br><span class="line">sta.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>), b(n + <span class="number">1</span>), la(n + <span class="number">1</span>), lb(n + <span class="number">1</span>);</span><br><span class="line">work(a, la, n);</span><br><span class="line">work(b, lb, n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (la[i] != lb[i]) <span class="keyword">break</span>;</span><br><span class="line">res = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Integration"><a href="#B-Integration" class="headerlink" title="B. Integration"></a>B. Integration</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给出$~\int_{0}^{\infty}\frac{\text{d}x}{1+x^2}=\frac{\pi}{2}~$。计算积分</p><script type="math/tex; mode=display">\frac{1}{\pi}\int_{0}^{\infty}\frac{\text{d}x}{\prod_{i=1}^{n}(a_i^2+x^2)}</script><p>数据范围$~1\leq n\leq10^3，~\sum n^2\leq10^7~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑裂项</p><script type="math/tex; mode=display">\frac{1}{(a^2+x^2)(b^2+x^2)}=\frac{1}{(b^2-a^2)(a^2+x^2)}+\frac{1}{(a^2-b^2)(b^2+x^2)}</script><p>递归展开</p><script type="math/tex; mode=display">\frac{1}{\prod_{i=1}^{n}(a_i^2+x^2)}</script><p>有</p><script type="math/tex; mode=display">\frac{1}{\prod_{i=1}^{n}(a_i^2+x^2)}=\sum_{i=1}^{n}\frac{1}{(a_i^2+x^2)\prod_{j\neq i}(a_j^2-a_i^2)}</script><p>所以答案为</p><script type="math/tex; mode=display">\frac{1}{\pi}\int_{0}^{\infty}\frac{\text{d}x}{\prod_{i=1}^{n}(a_i^2+x^2)}=\sum_{i=1}^{n}\frac{1}{2a_i(\prod_{j\neq i}(a_j^2-a_i^2))}</script><p>单组数据的时间复杂度为$~O(n^2)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), a2(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i], a2[i] = mul(a[i], a[i]);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cur = add(a[i], a[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) <span class="keyword">if</span> (i != j) cur = mul(cur, sub(a2[j], a2[i]));</span><br><span class="line">res = add(res, fpow(cur, mod - <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Euclidean-Distance"><a href="#C-Euclidean-Distance" class="headerlink" title="C. Euclidean Distance"></a>C. Euclidean Distance</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~\Bbb R^n~$上的一个点$~A=(\frac{a_1}{m},\frac{a_2}{m},\dots,\frac{a_n}{m})~$，求它到闭集$~D=\lbrace~(p_1,p_2,\dots,p_n):\sum_{i=1}^{n}p_i=1,~p_i\geq0,\forall~1\leq i\leq n~\rbrace~$的最短距离。<br>数据范围$~1\leq n\leq10^4,~\sum n\leq5\times10^5,~1\leq m\leq10^3,~-m\leq a\leq m~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难求出$~A~$到该$~n-1~$维超平面的距离的平方为</p><script type="math/tex; mode=display">\frac{(m-\sum_{i-1}^{n}a_i)^2}{nm^2}</script><p>然而由于$~p_i\geq0~$的限制，垂足有可能不在$~D~$内，所以还要计算垂足和$~D~$的距离。设垂足为$~\hat{A}~$，则有</p><script type="math/tex; mode=display">\hat{A}=(\dots,\frac{m+na_i-\sum_{i=1}^{n}a_i}{nm},\dots)</script><p>记$~\hat{a}_i=m+na_i-\sum_{i=1}^{n}a_i~$，则不难发现$~\hat{A}\in D~$的充要条件是$~\hat{a}_i\geq0,\forall~1\leq i\leq n~$。且对于$~\hat{a}_i&lt; 0~$，闭集$~D~$上距离$~\hat{A}~$最短的点$~P~$必须满足$~p_i=0~$。不妨设$~\hat{A}~$的各个维度中只有$~\hat{a}_1,\hat{a}_2,\dots,\hat{a}_k~$满足非负，那么问题可转化为在$~\Bbb R^k~$上求$~(\hat{a}_1,\hat{a}_2,\dots,\hat{a}_k)~$到$~\hat{D}=\lbrace~(p_1,p_2,\dots,p_k):\sum_{i=1}^{k}p_i=1,~p_i\geq0,\forall~1\leq i\leq k~\rbrace~$的最短距离。如果暴力降维求解，最坏时间复杂度为$~O(n^2)~$。考虑对$~a_i~$升序，根据$~\hat{a}_i~$的表达式可以发现$~\hat{a}_i~$也是升序的，因此每次降维的时候必然会除去$~a_i~$的一个前缀而保留后缀。归纳下去可知最后当$~A~$的垂足在$~D~$内时，必然保留的是$~A~$的一个后缀维度。二分或者暴力判断保留的后缀长度，然后对于前缀直接计算平方和，后缀带入距离公式，单组数据的时间复杂度为$~O(n\log n)~$。注意到$~a~$的数据范围且复杂度的$~O(\log n)~$仅来自于对$~a~$的升序，因此考虑到基数排序，单组数据为线性复杂度$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; a(n), suf(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">        sort(a.begin(), a.end());</span><br><span class="line">        suf.back() = a.back();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) suf[i] = suf[i + <span class="number">1</span>] + a[i];</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            m - suf[n - mid] + mid * a[n - mid] &lt; <span class="number">0</span> ? r = mid : l = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int64_t</span> p = <span class="number">0</span>, q = l * m * m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n - l; ++i) p += a[i] * a[i];</span><br><span class="line">        p = p * l + (m - suf[n - l]) * (m - suf[n - l]);</span><br><span class="line">        <span class="keyword">int64_t</span> d = __gcd(p, q);</span><br><span class="line">        p /= d;</span><br><span class="line">        q /= d;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="string">'/'</span> &lt;&lt; q &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Parity-of-Tuples"><a href="#D-Parity-of-Tuples" class="headerlink" title="D. Parity of Tuples"></a>D. Parity of Tuples</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个$~m~$元组$~a_i=(a_{i1},a_{i2},\dots,a_{im})~$。定义$~f(x,a_i)=1~$当且仅当对任意$~a_{ij}\odot x~$在二进制表示上均有奇数个$~1~$，反之$~f(x,a_i)=0~$。定义$~count(x)=\sum_{i=1}^{n}f(x,a_i)~$，求</p><script type="math/tex; mode=display">\bigoplus_{x=0}^{2^k-1}\left(count(x)\cdot3^x\mod(10^9+7)\right)</script><p>数据范围$~1\leq n\leq10^5,~1\leq m\leq10,~1\leq k\leq20,~0\leq a_{ij}&lt; 2^k~$。<br>其中$~\odot~$和$~\oplus~$分别表示按位与和按位异或。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~f~$作为特征函数的恒等变换</p><script type="math/tex; mode=display">f(x,a_i)=\frac{1}{2^m}\prod_{j=1}^{m}\left(1-(-1)^{\mid a_i\odot x\mid}\right)</script><p>注意到如下性质</p><script type="math/tex; mode=display">(-1)^{\mid a\odot x\mid+\mid b\odot x\mid}=(-1)^{\mid(a\oplus b)\odot x\mid}</script><p>于是可以在$~O(2^m)~$的时间内把$~f(x,a_i)~$展开，求和得到</p><script type="math/tex; mode=display">count(x)=\frac{1}{2^m}\sum_{y=0}^{2^k-1}\left(g(y)\cdot(-1)^{\mid y\oplus x\mid}\right)</script><p>上式即为$~\rm FWT~$变换。单组数据时间复杂度为$~O(n\cdot2^m+k\cdot2^k)~$，注意$~O(n\cdot m\cdot2^m+k\cdot2^k)~$无法通过。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxk = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">1</span> &lt;&lt; maxk], inv2[maxm + <span class="number">1</span>], pow3[<span class="number">1</span> &lt;&lt; maxk], a[<span class="number">1</span> &lt;&lt; maxm], val[<span class="number">1</span> &lt;&lt; maxm], tot[<span class="number">1</span> &lt;&lt; maxm];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">inv2[<span class="number">0</span>] = pow3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">inv2[<span class="number">1</span>] = <span class="number">500000004</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxm; ++i) inv2[i] = mul(inv2[i - <span class="number">1</span>], inv2[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; maxk); ++i) pow3[i] = mul(pow3[i - <span class="number">1</span>], <span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; maxm); ++i) tot[i] = tot[i ^ lowbit(i)] ^ <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k) &#123;</span><br><span class="line"><span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="number">4</span> &lt;&lt; k);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="built_in">cin</span> &gt;&gt; a[<span class="number">1</span> &lt;&lt; i];</span><br><span class="line">++cnt[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">1</span>; s != (<span class="number">1</span> &lt;&lt; m); ++s) &#123;</span><br><span class="line">val[s] = val[s ^ lowbit(s)] ^ a[lowbit(s)];</span><br><span class="line">tot[s] &amp; <span class="number">1</span> ? --cnt[val[s]] : ++cnt[val[s]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != k; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> all = ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>) ^ <span class="number">1</span> &lt;&lt; i, sub = all; sub; sub = all &amp; (sub - <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="keyword">int</span> x = cnt[sub], y = cnt[sub ^ <span class="number">1</span> &lt;&lt; i];</span><br><span class="line">cnt[sub] = x + y;</span><br><span class="line">cnt[sub ^ <span class="number">1</span> &lt;&lt; i] = x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = cnt[<span class="number">0</span>], y = cnt[<span class="number">1</span> &lt;&lt; i];</span><br><span class="line">cnt[<span class="number">0</span>] = x + y;</span><br><span class="line">cnt[<span class="number">1</span> &lt;&lt; i] = x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s != (<span class="number">1</span> &lt;&lt; k); ++s) res ^= mul(cnt[s], mul(inv2[m], pow3[s]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-ABBA"><a href="#E-ABBA" class="headerlink" title="E. ABBA"></a>E. ABBA</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算有多少种由$~n+m~$个<code>A</code>和$~n+m~$个<code>B</code>组成的字符串满足存在一种划分为$~n+m~$个长度为$~2~$的子序列的方案，满足恰好有$~n~$个<code>AB</code>和$~m~$个<code>BA</code>。<br>数据范围$~0\leq n,m\leq10^3~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到只有两种非法串，任意一种划分方案中<code>AB</code>的数量均小于$~n~$或者任意一种划分方案中<code>BA</code>的数量均小于$~m~$，且全集恰好为两个非法串集合与合法串集合的一个不交并。考虑存在一种划分方案使得<code>AB</code>数量不小于$~n~$的串的数量和存在一种划分方案使得<code>BA</code>数量不小于$~m~$的串的数量之和，此时的答案刚好是全集的大小加上合法串的数量，动态规划即可。单组数据时间复杂度为$~O(nm)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> dp1[maxn][maxn], dp2[maxn][maxn], inv[maxn], fact[maxn], finv[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fact[n], mul(finv[k], finv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">        inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">        fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">        finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) <span class="built_in">memset</span>(dp1[i], <span class="number">0</span>, (n + m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n + m; ++i) <span class="built_in">memset</span>(dp2[i], <span class="number">0</span>, (n + m + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        dp1[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= ((n + m) &lt;&lt; <span class="number">1</span>); ++k) <span class="keyword">for</span> (<span class="keyword">int</span> i = min(n + m, k); ~i; --i) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = k - i;</span><br><span class="line">            <span class="keyword">if</span> (i - j &lt;= n) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) dp1[i][j] = add(dp1[i][j], dp1[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span> (j) dp1[i][j] = add(dp1[i][j], dp1[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j - i &lt;= m) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i) dp2[i][j] = add(dp2[i][j], dp2[i - <span class="number">1</span>][j]);</span><br><span class="line">                <span class="keyword">if</span> (j) dp2[i][j] = add(dp2[i][j], dp2[i][j - <span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; sub(add(dp1[n + m][n + m], dp2[n + m][n + m]), bino((n + m) &lt;&lt; <span class="number">1</span>, n + m)) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Random-Point-in-Triangle"><a href="#F-Random-Point-in-Triangle" class="headerlink" title="F. Random Point in Triangle"></a>F. Random Point in Triangle</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个三角形，在内部随机一个点将大三角形划分为$~3~$个子三角形。计算面积最大的子三角形的面积的期望值。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接积分或者离线蒙特卡洛模拟可得期望值即为大三角形面积的$~\frac{11}{18}~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> cross(<span class="keyword">int64_t</span> x1, <span class="keyword">int64_t</span> y1, <span class="keyword">int64_t</span> x2, <span class="keyword">int64_t</span> y2) &#123; <span class="keyword">return</span> x1 * y2 - y1 * x2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x1, y1, x2, y2, x3, y3;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; x3 &gt;&gt; y3)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">11</span> * <span class="built_in">abs</span>(cross(x1 - x2, y1 - y2, x1 - x3, y1 - y3)) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Substrings-2"><a href="#G-Substrings-2" class="headerlink" title="G. Substrings 2"></a>G. Substrings 2</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义序列$~a_1,a_2,\dots,a_k~$和$~b_1,b_2,\dots,b_k~$是同态的，如果存在一个单射$~f~$使得$~f(a_i)=b_i,\forall~1\leq i\leq k~$。现给定一个序列$~s_1,s_2,\dots,s_n~$，问最多可以选出多少个相互不同态的连续子序列。<br>数据范围$~1\leq n\leq5\times10^4~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>首先设法把同态条件转化为等于条件。对于任意一个子序列$~t_1,t_2,\dots,t_k~$。如果$~t_i~$的左边没有和它一样的值，那么把它变为$~n~$，否则把它变为它左边等于它且离它最近的距离。这样两个连续子序列同态等价于两个连续子序列在变换后一致。问题即转化为不同连续子序列数量问题。<br>考虑后缀数组，即将所有的后缀按照字典序排序。然后不同连续子序列数量等于$~\frac{n(n+1)}{2}~$减去所有字典序相邻后缀的$~\rm LCP~$。<br>但是每个$~s_i~$在不同的连续子序列内变化对应的值不一定相同。处理变化时考虑子序列的左端点从右向左移动的过程，注意到每次移动至多修改后缀的一个变化值，用可持久化数组分块来维护这个过程。<br>可持久化数组分块是数组分块的一种拓展，数组分块支持$~O(1)~$的单点修改和$~O(\sqrt n)~$的区间查询。改为记录后缀和则是$~O(\sqrt n)~$的单点修改和$~O(1)~$的区间查询。由于每次修改只会操作一个分块，因此对于每个时刻的数组状态，用$~O(\sqrt n)~$个指针指向它对应的分块，然后对于需要修改的那一分块，可以在$~O(\sqrt n)~$新处理一个块并重新指向它。<br>对于$~\rm LCP~$和后缀数组，考虑用哈希实现，数据很弱并且是时限很紧，所以用$~64~$位自然溢出。用可持久化分块数组维护哈希值，这样单组数据的时间复杂度为$~O(n\cdot(\sqrt n+\log^2n))~$。用<code>c</code>代替<code>c++</code>可以再使常数少一倍。</p><h3 id="代码（c-）"><a href="#代码（c-）" class="headerlink" title="代码（c++）"></a><strong>代码（<code>c++</code>）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> base = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1</span> &lt;&lt; <span class="number">8</span> ;</span><br><span class="line"><span class="keyword">uint64_t</span> bas[maxn], block[maxn &lt;&lt; <span class="number">1</span>][maxm], *my_hash[maxn][maxm], sum[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> n, m, b, s[maxn], p[maxn], from[maxn], last[maxn];</span><br><span class="line"><span class="keyword">size_t</span> block_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span>* new_block(<span class="keyword">size_t</span> size) &#123;</span><br><span class="line"><span class="built_in">memset</span>(block[block_size], <span class="number">0</span>, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span>* new_block(<span class="keyword">size_t</span> size, <span class="keyword">uint64_t</span>* from) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(block[block_size], from, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> suf_hash(<span class="keyword">int</span> i, <span class="keyword">int</span> p) &#123;</span><br><span class="line"><span class="keyword">int</span> j = p / m, k = p % m;</span><br><span class="line"><span class="keyword">return</span> (j == b - <span class="number">1</span> ? <span class="number">0U</span>LL : sum[i][j + <span class="number">1</span>]) + my_hash[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint64_t</span> get_hash(<span class="keyword">int</span> i, <span class="keyword">int</span> l) &#123; <span class="keyword">return</span> (suf_hash(i, i) - suf_hash(i, i + l)) * bas[n - i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = n - max(i, j);</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, r) == get_hash(j, r)) <span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">get_hash(i, m) == get_hash(j, m) ? l = m : r = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_at</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> from[i + j] &lt; i ? n : i + j - from[i + j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = LCP(i, j);</span><br><span class="line"><span class="keyword">if</span> (k + i == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (k + j == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> char_at(i, k) &lt; char_at(j, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">bas[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) bas[i] = bas[i - <span class="number">1</span>] * base;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">block_size = <span class="number">0</span>;</span><br><span class="line">b = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">m = n / b + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(from, <span class="number">-1</span>, n &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(last, <span class="number">-1</span>, (n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != b; ++i) &#123;</span><br><span class="line">my_hash[n][i] = new_block(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) my_hash[n][i][j] = <span class="keyword">uint64_t</span>(n) * bas[i * m + j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; ~j; --j) my_hash[n][i][j] += my_hash[n][i][j + <span class="number">1</span>];</span><br><span class="line">sum[n][i] = my_hash[n][i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = b - <span class="number">2</span>; ~i; --i) sum[n][i] += sum[n][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(my_hash[i], my_hash[i + <span class="number">1</span>], b * <span class="keyword">sizeof</span> (<span class="keyword">uint64_t</span> *));</span><br><span class="line"><span class="built_in">memcpy</span>(sum[i], sum[i + <span class="number">1</span>], b &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (~last[s[i]]) &#123;</span><br><span class="line">from[last[s[i]]] = i;</span><br><span class="line"><span class="keyword">int</span> j = last[s[i]] / m, k = last[s[i]] % m;</span><br><span class="line">my_hash[i][j] = new_block(m, my_hash[i][j]);</span><br><span class="line"><span class="keyword">uint64_t</span> x = <span class="keyword">uint64_t</span>(last[s[i]] - i - n) * bas[last[s[i]]];</span><br><span class="line"><span class="keyword">while</span> (~k) my_hash[i][j][k--] += x;</span><br><span class="line"><span class="keyword">while</span> (~j) sum[i][j--] += x;</span><br><span class="line">&#125;</span><br><span class="line">last[s[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">iota(p, p + n, <span class="number">0</span>);</span><br><span class="line">sort(p, p + n, cmp);</span><br><span class="line"><span class="keyword">int64_t</span> res = n * (n + <span class="number">1L</span>L) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) res -= LCP(p[i - <span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（c）"><a href="#代码（c）" class="headerlink" title="代码（c）"></a><strong>代码（<code>c</code>）</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> base (1000000007ULL)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn (65536)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm (256)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line">ull bas[maxn], block[maxn][maxm], *hash[maxn][maxm], sum[maxn][maxm];</span><br><span class="line"><span class="keyword">int</span> n, m, b, s[maxn], p[maxn], from[maxn], last[maxn], tmp[maxn];</span><br><span class="line"><span class="keyword">size_t</span> block_size;</span><br><span class="line"></span><br><span class="line"><span class="function">ull* <span class="title">new_block</span><span class="params">(<span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(block[block_size], <span class="number">0</span>, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull* <span class="title">copy_block</span><span class="params">(<span class="keyword">size_t</span> size, ull* from)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(block[block_size], from, size &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">return</span> block[block_size++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">suf_hash</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> j = p / m, k = p % m;</span><br><span class="line"><span class="keyword">return</span> (j == b - <span class="number">1</span> ? <span class="number">0U</span>LL : sum[i][j + <span class="number">1</span>]) + hash[i][j][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> l)</span> </span>&#123; <span class="keyword">return</span> (suf_hash(i, i) - suf_hash(i, i + l)) * bas[n - i]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCP</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r = n - (i &lt; j ? j : i);</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, r) == get_hash(j, r)) <span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (r - l != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (get_hash(i, m) == get_hash(j, m)) l = m;</span><br><span class="line"><span class="keyword">else</span>                                  r = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">char_at</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> from[i + j] &lt; i ? n : i + j - from[i + j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = LCP(i, j);</span><br><span class="line"><span class="keyword">if</span> (k + i == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (k + j == n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> char_at(i, k) &lt; char_at(j, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> s1 = size &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (!s1) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> *b = a + s1;</span><br><span class="line"><span class="keyword">size_t</span> s2 = size - s1;</span><br><span class="line">sort(a, s1);</span><br><span class="line">sort(b, s2);</span><br><span class="line"><span class="keyword">size_t</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i != s1 &amp;&amp; j != s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (cmp(a[i], b[j])) tmp[k++] = a[i++];</span><br><span class="line"><span class="keyword">else</span>                 tmp[k++] = b[j++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i != s1) tmp[k++] = a[i++];</span><br><span class="line"><span class="keyword">while</span> (j != s2) tmp[k++] = b[j++];</span><br><span class="line"><span class="built_in">memcpy</span>(a, tmp, size &lt;&lt; <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">bas[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) bas[i] = bas[i - <span class="number">1</span>] * base;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF) &#123;</span><br><span class="line">block_size = <span class="number">0</span>;</span><br><span class="line">b = <span class="built_in">sqrt</span>(n + <span class="number">1</span>);</span><br><span class="line">m = n / b + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memset</span>(from, <span class="number">-1</span>, n &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(last, <span class="number">-1</span>, (n + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, s + i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != b; ++i) &#123;</span><br><span class="line">hash[n][i] = new_block(m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != m; ++j) hash[n][i][j] = (ull)(n) * bas[i * m + j];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; ~j; --j) hash[n][i][j] += hash[n][i][j + <span class="number">1</span>];</span><br><span class="line">sum[n][i] = hash[n][i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = b - <span class="number">2</span>; ~i; --i) sum[n][i] += sum[n][i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="built_in">memcpy</span>(hash[i], hash[i + <span class="number">1</span>], b * <span class="keyword">sizeof</span> (ull *));</span><br><span class="line"><span class="built_in">memcpy</span>(sum[i], sum[i + <span class="number">1</span>], b &lt;&lt; <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (~last[s[i]]) &#123;</span><br><span class="line">from[last[s[i]]] = i;</span><br><span class="line"><span class="keyword">int</span> j = last[s[i]] / m, k = last[s[i]] % m;</span><br><span class="line">hash[i][j] = copy_block(m, hash[i][j]);</span><br><span class="line">ull x = (ull)(last[s[i]] - i - n) * bas[last[s[i]]];</span><br><span class="line"><span class="keyword">while</span> (~k) hash[i][j][k--] += x;</span><br><span class="line"><span class="keyword">while</span> (~j) sum[i][j--] += x;</span><br><span class="line">&#125;</span><br><span class="line">last[s[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) p[i] = i;</span><br><span class="line">sort(p, n);</span><br><span class="line">ll res = n * (n + <span class="number">1L</span>L) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) res -= LCP(p[i - <span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-XOR"><a href="#H-XOR" class="headerlink" title="H. XOR"></a>H. XOR</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个可重集$~a_1,a_2,\dots,a_n~$，计算</p><script type="math/tex; mode=display">\sum_{S\subseteq A}^{\oplus_{x\in S}x=0}\mid S\mid</script><p>数据范围$~1\leq n\leq10^5,~\sum n\leq2\times10^6,~0\leq a\leq10^{18}~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>交换求和顺序</p><script type="math/tex; mode=display">\begin{aligned}\sum_{S\subseteq A,~\oplus_{x\in S}x=0}{\mid S\mid}&=\sum_{S\subseteq A}^{\oplus_{x\in S}x=0}\sum_{x\in S}1\\&=\sum_{a\in A}\sum_{S\subseteq A\backslash\lbrace a\rbrace}^{\oplus_{x\in S}=a}1\end{aligned}</script><p>考虑线性基，则$~\sum_{S\subseteq A\backslash\lbrace a\rbrace}^{\oplus_{x\in S}=a}1~$等价于$~a~$由$~A\backslash\lbrace a\rbrace~$构成的空间$~S(A\backslash\lbrace a\rbrace)~$内线性表出的方案数。记$~x~$为$~0~$由$~S(A)~$内元素线性表出的方案数，则有$~x=2^{\mid A\mid-\mid S(A)\mid}~$。如果$~a\in S(A\backslash\lbrace a\rbrace)~$，则方案数为$~\frac{x}{2}~$，否则为$~0~$。<br>在构造$~S(A)~$的时候将$~A~$内的元素从左至右加入到$~S~$之中，这一过程至多只有$~64~$个$~a~$无法被前缀构成的$~S~$线性表出，它们单独判断与$~S(A\backslash\lbrace a\rbrace)~$的关系。对于其余的$~a~$，必有$~a\in S(A\backslash\lbrace a\rbrace)~$。单组数据的时间复杂度为$~O(64\cdot n+64^3)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">linear_space</span> :</span> <span class="built_in">vector</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="function">T <span class="title">find</span><span class="params">(T x)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; e : *<span class="keyword">this</span>) x = min(x, x ^ e); <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function">T <span class="title">push</span><span class="params">(T x)</span> </span>&#123; x = find(x); <span class="keyword">if</span> (x) <span class="keyword">this</span>-&gt;push_back(x); <span class="keyword">return</span> x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">linear_space&lt;T&gt; merge(<span class="keyword">const</span> linear_space&lt;T&gt;&amp; s1, <span class="keyword">const</span> linear_space&lt;T&gt;&amp; s2) &#123;</span><br><span class="line">linear_space&lt;T&gt; ret(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; x : s2) ret.push(x);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod  = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 =  <span class="number">500000004</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line"><span class="keyword">uint64_t</span> a[maxn];</span><br><span class="line">linear_space&lt;<span class="keyword">uint64_t</span>&gt; pre[maxn], suf[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> res = inv2, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">pre[i] = pre[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (!pre[i].push(a[i])) res = add(res, res);</span><br><span class="line">&#125;</span><br><span class="line">suf[n + <span class="number">1</span>].clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">suf[i] = suf[i + <span class="number">1</span>];</span><br><span class="line">suf[i].push(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (pre[i].size() == pre[i - <span class="number">1</span>].size() || !merge(pre[i - <span class="number">1</span>], suf[i + <span class="number">1</span>]).find(a[i])) ++cnt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(res, cnt) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Points-Division"><a href="#I-Points-Division" class="headerlink" title="I. Points Division"></a>I. Points Division</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要将平面上的$~n~$个点划分到集合$~A~$或$~B~$之中，每个点划分给不同集合会有价值$~a~$或$~b~$。同时划分需要满足$~A~$内的点不能在某个$~B~$内的点的右下方。输出价值总和的最大值。<br>数据范围$~1\leq n\leq10^5,~\sum n\leq5\times10^5~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现每种划分等价于一条从左下到右上的一条折线将平面划分，不妨设折线的每个左上拐点均为$~B~$内的一个点。显然所有这样的折线的水平部分的纵坐标和垂直部分的横坐标的取值均为$~O(n)~$。考虑从左到右，横坐标相同则从下到上，计算整条折线的最高水平线的位置的所有取法下的价值总和的最大值。用线段树维护，需要支持区间查询，区间加法和单点取$~\max~$。单组数据的时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, a, b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> make_pair(x, y) &lt; make_pair(p.x, p.y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, point&amp; p) &#123; <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y &gt;&gt; p.a &gt;&gt; p.b; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">17</span>;</span><br><span class="line">point p[maxn];</span><br><span class="line"><span class="keyword">int</span> pos[maxn];</span><br><span class="line"><span class="keyword">int64_t</span> dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int64_t</span> seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid   ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson  (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson  (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">seg[index] = tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (begin != (mid)) &#123; build(LEFT); build(RIGHT); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> val(i) (seg[i] + tag[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_down() do &#123; tag[lson] += tag[index]; tag[rson] += tag[index];       &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_up()   do &#123; seg[index] = max(val(lson), val(rson)); tag[index] = 0; &#125; while (false)</span></span><br><span class="line"><span class="keyword">int64_t</span> query(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> right) &#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right) <span class="keyword">return</span> LLONG_MIN;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= right) <span class="keyword">return</span> val(index);</span><br><span class="line">push_down();</span><br><span class="line"><span class="keyword">int64_t</span> ret = max(query(LEFT, right), query(RIGHT, right));</span><br><span class="line">push_up();</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int64_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= left) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left) &#123;</span><br><span class="line">tag[index] += x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify1(LEFT, left, x);</span><br><span class="line">modify1(RIGHT, left, x);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">int64_t</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt; pos || end &lt;= pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index] = max(val(index), x);</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify2(LEFT, pos, x);</span><br><span class="line">modify2(RIGHT, pos, x);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"data.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">sum += p[i].a;</span><br><span class="line">y.push_back(p[i].y);</span><br><span class="line">&#125;</span><br><span class="line">sort(p, p + n);</span><br><span class="line">sort(y.begin(), y.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) pos[i] = lower_bound(y.begin(), y.end(), p[i].y) - y.begin();</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != n; ) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j != n &amp;&amp; p[i].x == p[j].x) &#123;</span><br><span class="line">temp += p[j].b - p[j].a;</span><br><span class="line">dp[j] = max(<span class="keyword">int64_t</span>(<span class="number">0</span>), query(<span class="number">0</span>, n, <span class="number">1</span>, pos[j])) + temp;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i != j) &#123;</span><br><span class="line">modify1(<span class="number">0</span>, n, <span class="number">1</span>, pos[i], p[i].b - p[i].a);</span><br><span class="line">modify2(<span class="number">0</span>, n, <span class="number">1</span>, pos[i], dp[i]);</span><br><span class="line">++i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(<span class="keyword">int64_t</span>(<span class="number">0</span>), query(<span class="number">0</span>, n, <span class="number">1</span>, n)) + sum &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Fraction-Comparision"><a href="#J-Fraction-Comparision" class="headerlink" title="J. Fraction Comparision"></a>J. Fraction Comparision</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x, a, y, b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; a &gt;&gt; y &gt;&gt; b) &#123;</span><br><span class="line"><span class="keyword">if</span>      (__int128(x) * b == __int128(y) * a) <span class="built_in">cout</span> &lt;&lt; <span class="string">"=\n"</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (__int128(x) * b &lt;  __int128(y) * a) <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;\n"</span>;</span><br><span class="line"><span class="keyword">else</span>                                         <span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/881&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019牛客暑期多校训练营（第一场）&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Equivalent-Prefixes
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="多校" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%A0%A1/"/>
    
  </entry>
  
  <entry>
    <title>2019BNU排位四</title>
    <link href="http://yoursite.com/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E5%9B%9B/"/>
    <id>http://yoursite.com/2019/07/05/2019BNU排位四/</id>
    <published>2019-07-05T15:37:24.175Z</published>
    <updated>2019-07-05T15:40:16.326Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247474" target="_blank" rel="noopener">2019BNU排位四</a></p><h2 id="A-Slime-Combining"><a href="#A-Slime-Combining" class="headerlink" title="A. Slime Combining"></a>A. Slime Combining</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">20</span>; ++i) <span class="keyword">if</span> (n &amp; <span class="number">1</span> &lt;&lt; i) res.emplace_back(i + <span class="number">1</span>);</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Guess-the-Permutation"><a href="#B-Guess-the-Permutation" class="headerlink" title="B. Guess the Permutation"></a>B. Guess the Permutation</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(n));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : a) <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : row) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (find(a[i].begin(), a[i].end(), n - <span class="number">1</span>) != a[i].end()) &#123;</span><br><span class="line">a[i][i] = n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i].front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != n; ++j) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Constellation"><a href="#C-Constellation" class="headerlink" title="C. Constellation"></a>C. Constellation</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个点，找出一个三角形满足其它的点都在三角形外部。<br>数据范围$~3\leq n\leq100000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先取点$~1,2~$构成的直线，找直线上的点和直线外但离直线最近的点。直线上的点直接按坐标排序取头两个和直线外的点即构成所求三角形。排序用冒泡方式。总时间复杂度为$~O(n)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt;&gt; star(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; x(n), y(n), d(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p(&#123; <span class="number">0</span>, <span class="number">1</span> &#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">star[i] = make_pair(x[i], y[i]);</span><br><span class="line">d[i] = <span class="built_in">abs</span>((x[<span class="number">1</span>] - x[<span class="number">0</span>]) * (y[i] - y[<span class="number">0</span>]) - (x[i] - x[<span class="number">0</span>]) * (y[<span class="number">1</span>] - y[<span class="number">0</span>]));</span><br><span class="line"><span class="keyword">if</span> (!d[i] &amp;&amp; i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">p.emplace_back(i);</span><br><span class="line">d[i] = LLONG_MAX;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(p.size()); ++i) <span class="keyword">if</span> (star[p[i]] &lt; star[p[<span class="number">0</span>]]) swap(p[<span class="number">0</span>], p[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != <span class="keyword">int</span>(p.size()); ++i) <span class="keyword">if</span> (star[p[i]] &lt; star[p[<span class="number">1</span>]]) swap(p[<span class="number">1</span>], p[i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; p[<span class="number">1</span>] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; min_element(d.begin() + <span class="number">2</span>, d.end()) - d.begin() + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Hamiltonian-Spanning-Tree"><a href="#D-Hamiltonian-Spanning-Tree" class="headerlink" title="D. Hamiltonian Spanning Tree"></a>D. Hamiltonian Spanning Tree</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~n~$阶完全图除了一棵树的边的权值为$~x~$以外，其余边的权值均为$~y~$。输出哈密顿路径的最小值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对于$~x&gt;y~$的情况分类讨论即可。对于$~x\leq y~$的情况树形$~\rm DP~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cal = <span class="number">0</span>, mx[<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (v != p) &#123;</span><br><span class="line">dfs(v, u);</span><br><span class="line">cal += dp[v][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mx[<span class="number">1</span>] &lt; dp[v][<span class="number">0</span>] + <span class="number">1</span> - dp[v][<span class="number">1</span>]) mx[<span class="number">1</span>] = dp[v][<span class="number">0</span>] + <span class="number">1</span> - dp[v][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (mx[<span class="number">0</span>] &lt; mx[<span class="number">1</span>]) swap(mx[<span class="number">0</span>], mx[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">dp[u][<span class="number">0</span>] = cal + mx[<span class="number">0</span>];</span><br><span class="line">dp[u][<span class="number">1</span>] = dp[u][<span class="number">0</span>] + mx[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">adj[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= n; ++u) mx = max(mx, <span class="keyword">int</span>(adj[u].size()));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n - <span class="number">1</span>) * y + (mx == n - <span class="number">1</span> ? x - y : <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (n - <span class="number">1</span> - dp[<span class="number">1</span>][<span class="number">1</span>]) * y + dp[<span class="number">1</span>][<span class="number">1</span>] * x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Robot-Arm"><a href="#E-Robot-Arm" class="headerlink" title="E. Robot Arm"></a>E. Robot Arm</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个首尾相连的线段，初始时刻第$~i~$个线段的起点为$~(i-1,0)~$终点为$~(i,0)~$。需要支持两种操作：将一个线段固定起点伸长或固定起点旋转。每次操作输出最后一个线段的终点坐标。<br>数据范围$~1\leq n\leq 300000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>每个线段可以视为一个二维向量，那么每个线段的终点坐标等价于向量的前缀和。线段的伸长操作等价于向量的单点修改，线段的旋转操作等价于向量的后缀旋转。可以用线段树维护。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="keyword">double</span>(<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">19</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line"><span class="keyword">int</span> ang;</span><br><span class="line">Seg(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>, <span class="keyword">int</span> _a = <span class="number">0</span>): x(_x), y(_y), ang(_a) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">rad</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> PI * (ang % <span class="number">360</span>) / <span class="number">180</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cos</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">cos</span>(rad());        &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">sin</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">std</span>::<span class="built_in">sin</span>(rad());        &#125;</span><br><span class="line"><span class="function">Seg <span class="title">rotate</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">double</span> c = <span class="built_in">cos</span>(), s = <span class="built_in">sin</span>(); <span class="keyword">return</span> Seg(x * c - y * s, x * s + y * c); &#125;</span><br><span class="line">Seg <span class="keyword">operator</span>+ (<span class="keyword">const</span> Seg&amp; l) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Seg(x + l.x, y + l.y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">increase</span><span class="params">(<span class="keyword">double</span> l)</span> </span>&#123; <span class="keyword">double</span> k = <span class="number">1</span> + l / hypot(x, y); x *= k; y *= k; &#125;</span><br><span class="line">&#125; seg[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function">Seg <span class="title">merge</span><span class="params">(<span class="keyword">const</span> Seg&amp; l1, <span class="keyword">const</span> Seg&amp; l2)</span> </span>&#123; <span class="keyword">return</span> l1.rotate() + l2.rotate(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid   ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson  (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson  (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT  begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_down() do &#123; seg[lson].ang += seg[index].ang; seg[rson].ang += seg[index].ang; &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> push_up()   do &#123; seg[index] = merge(seg[lson], seg[rson]);                         &#125; while (false)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index] = Seg(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(LEFT);</span><br><span class="line">build(RIGHT);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify1</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">double</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= pos || end &lt; pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin == mid) &#123;</span><br><span class="line">seg[index].x += len;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify1(LEFT, pos, len);</span><br><span class="line">modify1(RIGHT, pos, len);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify2</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos, <span class="keyword">int</span> ang)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (end &lt;= pos) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= pos) &#123;</span><br><span class="line">seg[index].ang += ang;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">push_down();</span><br><span class="line">modify2(LEFT, pos, ang);</span><br><span class="line">modify2(RIGHT, pos, ang);</span><br><span class="line">push_up();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">1</span>) modify1(<span class="number">0</span>, n, <span class="number">1</span>, y    , z      );</span><br><span class="line"><span class="keyword">else</span>        modify2(<span class="number">0</span>, n, <span class="number">1</span>, y - <span class="number">1</span>, <span class="number">360</span> - z);</span><br><span class="line">Seg res = seg[<span class="number">1</span>].rotate();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>) &lt;&lt; res.x &lt;&lt; <span class="string">' '</span> &lt;&lt; res.y &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Double-Knapsack"><a href="#F-Double-Knapsack" class="headerlink" title="F. Double Knapsack"></a>F. Double Knapsack</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定两个大小为$~n~$的可重集合$~A,B~$，元素值均在$~1~$到$~n~$之间。输出它们两的子集使得两个子集的求和一样。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>把集合视为序列，子集视为连续子序列。考虑$~A~$的前缀和$~a_0,a_1,\dots,a_n~$，其中$~a_0=0~$，则$~a~$单增。对于$~B~$同理。不妨设$~a_n\leq b_n~$。对于每个$~a_i,~i=0,1,\dots,n~$，通过双指针找出第一个不小于$~a_i~$的$~b_j~$，此时必有$~b_j-a_i\in[0,n)~$。根据抽屉原理，存在$~i_1&lt; i_2,~j_1&lt; j_2~$，满足$~b_{j_1}-a_{i_1}=b_{j_2}-a_{i_2}~$。此时即构造出两个连续子序列。总时间复杂度为$~O(n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int64_t</span> a[maxn], b[maxn], ii[maxn], jj[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> d, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~ii[d]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i - ii[d] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = ii[d] + <span class="number">1</span>; k &lt;= i; ++k) <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; (k == i ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; j - jj[d] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = jj[d] + <span class="number">1</span>; k &lt;= j; ++k) <span class="built_in">cout</span> &lt;&lt; k &lt;&lt; (k == j ? <span class="string">'\n'</span> : <span class="string">' '</span> );</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ii[d] = i;</span><br><span class="line">jj[d] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">memset</span>(ii, <span class="number">-1</span>, <span class="keyword">sizeof</span> (ii));</span><br><span class="line"><span class="built_in">memset</span>(jj, <span class="number">-1</span>, <span class="keyword">sizeof</span> (jj));</span><br><span class="line">ii[<span class="number">0</span>] = jj[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123; <span class="built_in">cin</span> &gt;&gt; a[i]; a[i] += a[i - <span class="number">1</span>]; &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123; <span class="built_in">cin</span> &gt;&gt; b[j]; b[j] += b[j - <span class="number">1</span>]; &#125;</span><br><span class="line"><span class="keyword">if</span> (a[n] &lt;= b[n]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (b[j] &lt; a[i]) ++j;</span><br><span class="line">work(b[j] - a[i], i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, i = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">while</span> (a[i] &lt; b[j]) ++i;</span><br><span class="line">work(a[i] - b[j], i, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-2Char"><a href="#H-2Char" class="headerlink" title="H. 2Char"></a>H. 2Char</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>水题。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">26</span>][<span class="number">26</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (*min_element(str.begin(), str.end()) == *max_element(str.begin(), str.end())) &#123;</span><br><span class="line">cnt[str.front() - <span class="string">'a'</span>][str.front() - <span class="string">'a'</span>] += str.size();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ch;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">if</span> (find(str.begin(), str.end(), <span class="keyword">char</span>(i + <span class="string">'a'</span>)) != str.end())</span><br><span class="line">ch.emplace_back(i);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(ch.size()) &gt; <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">cnt[ch.front()][ch.back()] += str.size();</span><br><span class="line">cnt[ch.back()][ch.front()] += str.size();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">26</span>; ++j) <span class="keyword">if</span> (i != j) cnt[i][j] += cnt[i][i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">26</span>; ++j) <span class="keyword">if</span> (i != j) cnt[j][i] += cnt[i][i];</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) res = max(res, *max_element(cnt[i], cnt[i] + <span class="number">26</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Anton-and-Lines"><a href="#I-Anton-and-Lines" class="headerlink" title="I. Anton and Lines"></a>I. Anton and Lines</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> x1, x2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x1 &gt;&gt; x2;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt;&gt; line(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; l : line) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l.second &gt;&gt; l.first;</span><br><span class="line">l.first += l.second * x1;</span><br><span class="line">&#125;</span><br><span class="line">sort(line.begin(), line.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i)</span><br><span class="line"><span class="keyword">if</span> (line[i - <span class="number">1</span>].first != line[i].first &amp;&amp; (line[i].first - line[i - <span class="number">1</span>].first) &lt; (x2 - x1) * (line[i - <span class="number">1</span>].second - line[i].second))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Beautiful-Function"><a href="#J-Beautiful-Function" class="headerlink" title="J. Beautiful Function"></a>J. Beautiful Function</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义好函数$~f(t)~$为$~t,0,1,\dots,50~$，或这些好函数的加法、减法、乘法、取绝对值的复合，其中乘法至多使用$~50~$次。现给定$~n~$个圆，要求构造出参数方程$~(f(t),g(t))~$满足对于每个圆，存在$~t=0,1,\dots,50~$满足$~(f(t),g(t))~$在圆上或者圆内。<br>数据范围$~1\leq n\leq50,~0\leq x,y\leq50,~2\leq r\leq50~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>从特征函数角度入手。构造如下函数</p><script type="math/tex; mode=display">h(t)={\mid t-(p-1)\mid}+{\mid t-(p+1)\mid}-{\mid t-p\mid}-{\mid t-p\mid}</script><p>对于$~t\in\Bbb Z~$，不难发现$~f(t=p)=2,~f(t\neq p)=0~$。那么对于每个圆，由于半径$~r\geq 2~$，圆内必存在偶整点，令$~p~$等于角标，然后将特征函数乘上横纵坐标后求和即可。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="built_in">string</span> a, <span class="built_in">string</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"("</span> + a + <span class="string">"*((abs((t-("</span> + i + <span class="string">"-1)))+abs((t-("</span> + i + <span class="string">"+1))))-(abs((t-"</span> + i + <span class="string">"))+abs((t-"</span> + i + <span class="string">")))))"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">string</span>(n - <span class="number">1</span>, <span class="string">'('</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str(to_string(a[<span class="number">0</span>]), to_string(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"+"</span> &lt;&lt; str(to_string(a[i]), to_string(i)) &lt;&lt; <span class="string">")"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, x[<span class="number">50</span>], y[<span class="number">50</span>], r[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i] &gt;&gt; r[i];</span><br><span class="line">x[i] = (x[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">y[i] = (y[i] + <span class="number">1</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(x, n);</span><br><span class="line">print(y, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/247474&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNU排位四&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Slime-Combining&quot;&gt;&lt;a href=&quot;#A-Slim
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BNU排位三</title>
    <link href="http://yoursite.com/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%89/"/>
    <id>http://yoursite.com/2019/07/05/2019BNU排位三/</id>
    <published>2019-07-05T14:55:06.863Z</published>
    <updated>2019-07-05T14:55:12.866Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247395" target="_blank" rel="noopener">2019BNU排位三</a></p><h2 id="A-Nicoleta-and-the-circle-of-kids"><a href="#A-Nicoleta-and-the-circle-of-kids" class="headerlink" title="A. Nicoleta and the circle of kids"></a>A. Nicoleta and the circle of kids</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于$~n~$个点$~0,1,\dots,n-1~$，对于每个编号$~u~$，连接它到$~(u+1)\%n~$一条权值为$~1~$的边，一直到连接它到$~(u+k)\%n~$一条权值为$~k~$的边。计算这个图的最大生成树的大小。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~d=\gcd(n,k)~$，则原图可以分解为$~d~$个环，每个环均有$~\frac{n}{d}~$个点，并用权值为$~k~$的边连接。那么对于每个环上的点，用$~\frac{n}{d}-1~$条权值为$~k~$的边连接，再用$~d-1~$条权值为$~k-1~$的边连接，此时的生成树有$~n-d~$条$~k~$边和$~d-1~$条$~k-1~$边。不难证明如果$~k~$边数量超过$~n-d~$条，则必构成环，于是此树为最大生成树。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> N, K;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"><span class="keyword">int64_t</span> d = __gcd(N, K);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (N - <span class="number">1</span>) * K + <span class="number">1</span> - d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Ugly-Number"><a href="#B-Ugly-Number" class="headerlink" title="B. Ugly Number"></a>B. Ugly Number</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个字符串，问它是否是它的所有循环平移中字典序最小的那个。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>字符串哈希后可以在$~O(\log n)~$的时间内比较两个串的字典序，做法是二分出最长公共前缀$~\rm LCP~$，然后比较下一个字符，总时间复杂度为$~O(n\log n)~$。或者将字符串分解为若干不降子串，然后判断第一个的字典序是否最小，总时间复杂度为$~O(n)~$。</p><h3 id="代码（哈希-O-n-log-n-）"><a href="#代码（哈希-O-n-log-n-）" class="headerlink" title="代码（哈希$~O(n\log n)~$）"></a><strong>代码（哈希$~O(n\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bas = <span class="number">8886</span>     ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv = <span class="number">112339</span>   ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> pos[maxn], neg[maxn], my_hash[maxn], val[maxn], n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">pos[<span class="number">0</span>] = neg[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">pos[i] = mul(pos[i - <span class="number">1</span>], bas);</span><br><span class="line">neg[i] = mul(neg[i - <span class="number">1</span>], inv);</span><br><span class="line">&#125;</span><br><span class="line">iota(val, val + maxn, <span class="number">0</span>);</span><br><span class="line">shuffle(val, val + maxn, mt19937(chrono::steady_clock::now().time_since_epoch().count()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_hash</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> mul(sub(my_hash[r], my_hash[l]), neg[l]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (get_hash(<span class="number">0</span>, n) == get_hash(p, p + n)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> L = <span class="number">0</span>, R = n;</span><br><span class="line"><span class="keyword">while</span> (R - L != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> m = (L + R) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">get_hash(<span class="number">0</span>, m) == get_hash(p, p + m) ? L = m : R = m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str[L] &gt; str[p + L];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">str += str;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (n &lt;&lt; <span class="number">1</span>); ++i) my_hash[i + <span class="number">1</span>] = add(my_hash[i], mul(val[str[i]], pos[i]));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="keyword">if</span> (check(i)) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-）"><a href="#代码（-O-n-）" class="headerlink" title="代码（$~O(n)~$）"></a><strong>代码（$~O(n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span> || *min_element(str.begin(), str.end()) == *max_element(str.begin(), str.end()))</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (pos != n &amp;&amp; str[pos] &gt;= str[pos - <span class="number">1</span>]) ++pos;</span><br><span class="line"><span class="keyword">if</span> (pos == <span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">pre</span><span class="params">(str.substr(<span class="number">0</span>, pos))</span></span>;</span><br><span class="line">str += str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ppp = pos; ppp &lt; n; ppp = pos) &#123;</span><br><span class="line"><span class="keyword">for</span> (++pos; str[pos] &gt;= str[pos - <span class="number">1</span>]; ++pos);</span><br><span class="line"><span class="keyword">if</span> (str.substr(ppp, pos - ppp) &lt; pre) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Two-Cats"><a href="#C-Two-Cats" class="headerlink" title="C. Two Cats"></a>C. Two Cats</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问整除$~\prod_{i=1}^{n}v_i~$且因子个数为$~b~$的正整数个数。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对所有$~v~$因式分解后把$~\prod_{i=1}^{n}v_i~$的所有质因数及其幂指数存进<code>std::map</code>，然后对幂指数序列$~\rm DP~$即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> not_prime[maxn], factor[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; prime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!not_prime[i]) prime.emplace_back(factor[i] = i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : prime) &#123;</span><br><span class="line"><span class="keyword">if</span> (i * p &gt;= maxn) <span class="keyword">break</span>;</span><br><span class="line">not_prime[i * p] = <span class="number">1</span>;</span><br><span class="line">factor[i * p] = p;</span><br><span class="line"><span class="keyword">if</span> (i % p == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init_prime();</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">int</span> b, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : prime) &#123;</span><br><span class="line"><span class="keyword">if</span> (p &gt; v) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!(v % p)) &#123;</span><br><span class="line">++tot;</span><br><span class="line">v /= p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tot) cnt[p] += tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (v != <span class="number">1L</span>L) ++cnt[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(b + <span class="number">1</span>);</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; f : cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> x = f.second + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dpp(b + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; i * j &lt;= b &amp;&amp; j &lt;= x; ++j) dpp[i * j] = add(dpp[i * j], dp[i]);</span><br><span class="line">dp = move(dpp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Checkerboard"><a href="#D-Checkerboard" class="headerlink" title="D. Checkerboard"></a>D. Checkerboard</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> N, rs, cs, rt, ct;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; rs &gt;&gt; cs &gt;&gt; rt &gt;&gt; ct;</span><br><span class="line"><span class="keyword">int64_t</span> dis = <span class="built_in">abs</span>(rt - rs) + <span class="built_in">abs</span>(ct - cs);</span><br><span class="line"><span class="keyword">if</span> (!dis) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; (N &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (N &lt; dis ? <span class="number">0</span> : ((N - dis) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Loppinha-the-boy-who-likes-sopinha"><a href="#E-Loppinha-the-boy-who-likes-sopinha" class="headerlink" title="E. Loppinha, the boy who likes sopinha"></a>E. Loppinha, the boy who likes sopinha</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~01~$串，每个长度为$~p~$的连续$~1~$会消耗$~\frac{p(p+1)}{2}~$单位的蛋白质。但是总共只有$~K~$单位的蛋白质。计算最少把多少$~1~$变为$~0~$使得蛋白质足够。<br>数据范围$~1\leq N\leq450,~1\leq K\leq10^7~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用$~f(l,t)~$表示长度为$~l~$的连续$~1~$中间把$~t~$个$~1~$变为$~0~$后蛋白质的最少消耗量，然后对于原串一直模拟，直到$~K~$足够即可。总时间复杂度为$~O(N^2)~$。可以堆优化，总时间复杂度降为$~O(N\log N)~$。</p><h3 id="代码（-O-N-2-）"><a href="#代码（-O-N-2-）" class="headerlink" title="代码（$~O(N^2)~$）"></a><strong>代码（$~O(N^2)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> cal[maxn], cut[maxn][maxn], len[maxn], tim[maxn], cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">iota(cal, cal + maxn, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line">cut[i][<span class="number">0</span>] = cal[i] += cal[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != i; ++j) &#123;</span><br><span class="line"><span class="keyword">int</span> k = (i - j) / (j + <span class="number">1</span>), l = (i - j) % (j + <span class="number">1</span>);</span><br><span class="line">cut[i][j] = (j + <span class="number">1</span> - l) * cal[k] + l * cal[k + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j) &#123;</span><br><span class="line">len[cnt++] = j;</span><br><span class="line">sum += cal[j];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum &gt; K) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">0</span>, pos;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != cnt; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> cur = cut[len[i]][tim[i]] - cut[len[i]][tim[i] + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (val &lt; cur) &#123;</span><br><span class="line">val = cur;</span><br><span class="line">pos = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum -= val;</span><br><span class="line">++tim[pos];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-N-log-N-）"><a href="#代码（-O-N-log-N-）" class="headerlink" title="代码（$~O(N\log N)~$）"></a><strong>代码（$~O(N\log N)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cal(maxn);</span><br><span class="line">iota(cal.begin(), cal.end(), <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) cal[i] += cal[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">auto</span> F = [&amp;] (<span class="keyword">int</span> l, <span class="keyword">int</span> t) &#123;</span><br><span class="line"><span class="keyword">if</span> (t &gt; l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k1 = (l - t) / (t + <span class="number">1</span>), k2 = (l - t) % (t + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> (t + <span class="number">1</span> - k2) * cal[k1] + k2 * cal[k1 + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">auto</span> G = [&amp;] (<span class="keyword">int</span> l, <span class="keyword">int</span> t) &#123; <span class="keyword">return</span> F(l, t) - F(l, t + <span class="number">1</span>); &#125;;</span><br><span class="line"><span class="keyword">int</span> N, K;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K &gt;&gt; str;</span><br><span class="line">str.push_back(<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; len;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt;= N; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j) &#123;</span><br><span class="line">len.emplace_back(j);</span><br><span class="line">sum += cal[j];</span><br><span class="line">j = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">++j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = len.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tim(size);</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; heap;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != size; ++i) heap.emplace(G(len[i], tim[i]), i);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum &gt; K) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="keyword">auto</span> top = heap.top();</span><br><span class="line">heap.pop();</span><br><span class="line">sum -= top.first;</span><br><span class="line">heap.emplace(G(len[top.second], ++tim[top.second]), top.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Number-Preference"><a href="#F-Number-Preference" class="headerlink" title="F. Number Preference"></a>F. Number Preference</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> INF = <span class="number">1000000000000000000L</span>L;</span><br><span class="line"><span class="keyword">int</span> N, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int</span>&gt; like;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int64_t</span>&gt; hate;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="keyword">int</span> t, s;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; s;</span><br><span class="line">cnt += t == <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (s--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> l;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="number">1</span>) ++like[l];</span><br><span class="line"><span class="keyword">else</span> hate.emplace(l);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (like.empty()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; INF - hate.size() &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; p : like) res += hate.find(p.first) == hate.end() &amp;&amp; p.second == cnt;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Traffic-Management"><a href="#G-Traffic-Management" class="headerlink" title="G. Traffic Management"></a>G. Traffic Management</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~N~$辆车的初始位置$~S~$和初始速度$~V~$，均为正方向。如果两辆车相撞，则后方较快的消失。问最后一次撞击的位置。<br>数据范围$~1\leq N\leq10^5,~0\leq S,V\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。按初始位置排好序后不难发现后面的车至多与前面的车追尾一次。总时间复杂度为$~O(N\log N)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt; car(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; c : car) <span class="built_in">cin</span> &gt;&gt; c.first &gt;&gt; c.second;</span><br><span class="line">sort(car.begin(), car.end(), greater&lt;pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt;&gt;());</span><br><span class="line"><span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i != N; ++i)</span><br><span class="line">car[j].second &lt; car[i].second ? res = max(res, (car[j].first - car[i].first) / (car[i].second - car[j].second)) : j = i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>) &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-I-Will-Go"><a href="#I-I-Will-Go" class="headerlink" title="I. I Will Go"></a>I. I Will Go</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个大小为$~N~$的森林，根节点去聚会不受任何限制，其他节点去聚会的必要条件是它父亲也去了宴会。有$~Q~$次询问，询问$~y~$是否去了聚会，但是被告知$~x~$去了，判断能否根据$~x~$确定答案。<br>数据范围$~2\leq N\leq1\times10^5,~1\leq Q\leq2\times10^5~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>当且仅当$~x~$是$~y~$的后代时，才能确定答案。用$~\rm DFS~$判断即可。总时间复杂度为$~O(N+Q)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn], root;</span><br><span class="line"><span class="keyword">int</span> dfs_clock, l[maxn], r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; l[u] = dfs_clock++; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) dfs(v); r[u] = dfs_clock; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; Q;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != N; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (~a) son[a].emplace_back(i);</span><br><span class="line"><span class="keyword">else</span> root.emplace_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; r : root) dfs(r);</span><br><span class="line"><span class="keyword">while</span> (Q--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (l[x] &gt;= l[y] &amp;&amp; r[x] &lt;= r[y] ? <span class="string">"Yes\n"</span> : <span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-PC-is-for-kicking"><a href="#L-PC-is-for-kicking" class="headerlink" title="L. PC is for kicking"></a>L. PC is for kicking</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> N, a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; a;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; adj(N + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bfs(<span class="number">1</span>, a), vis(N + <span class="number">1</span>);</span><br><span class="line">vis[a] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (--N) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">adj[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!bfs.empty()) &#123;</span><br><span class="line">++res;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; next;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : bfs) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : adj[u]) <span class="keyword">if</span> (!vis[v]) &#123; next.emplace_back(v); vis[v] = <span class="number">1</span>; &#125;</span><br><span class="line">bfs = move(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/247395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNU排位三&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Nicoleta-and-the-circle-of-kids&quot;&gt;
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BNU排位二</title>
    <link href="http://yoursite.com/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/07/05/2019BNU排位二/</id>
    <published>2019-07-05T13:40:55.845Z</published>
    <updated>2019-07-05T13:41:02.572Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247236" target="_blank" rel="noopener">2019BNU排位二</a></p><h2 id="A-Nate-and-Actual-3D-Girls"><a href="#A-Nate-and-Actual-3D-Girls" class="headerlink" title="A. Nate and Actual 3D Girls"></a>A. Nate and Actual 3D Girls</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">26</span>), tot(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ++cnt[(ch - <span class="string">'A'</span>) % <span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ++tot[(ch - <span class="string">'A'</span> + k) % <span class="number">26</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> res = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">26</span>; ++i) res &amp;= cnt[i] &gt;= tot[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (res ? <span class="string">"Make her kokoro go doki-doki!"</span> : <span class="string">"It is gonna be daijoubu."</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Nate-and-Bones"><a href="#B-Nate-and-Bones" class="headerlink" title="B. Nate and Bones"></a>B. Nate and Bones</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n * m; i; --i) &#123;</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l;</span><br><span class="line">res += __gcd(x, l) != <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Nate-and-Contest-Invitation"><a href="#C-Nate-and-Contest-Invitation" class="headerlink" title="C. Nate and Contest Invitation"></a>C. Nate and Contest Invitation</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个朋友关系网。最多能邀请$~k~$个人，被邀请的人的朋友以及朋友的朋友等也会来。输出最多能来多少人。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>并查集或者$~\text{DFS}~$维护每个连通块的大小即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn], sz[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">return</span> u == fa[u] ? u : fa[u] = find(fa[u]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">u = find(u);</span><br><span class="line">v = find(v);</span><br><span class="line"><span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">fa[v] = u;</span><br><span class="line">sz[u] += sz[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) sz[fa[u] = u] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;&gt; fri(m);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; f : fri) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; f.first &gt;&gt; f.second;</span><br><span class="line">name.emplace(f.first);</span><br><span class="line">name.emplace(f.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; str : name) id[str] = temp++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; f : fri) merge(id[f.first], id[f.second]);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; group;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != n; ++u) <span class="keyword">if</span> (fa[u] == u) group.emplace_back(sz[u]);</span><br><span class="line">sort(group.begin(), group.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(group.begin() + max(<span class="number">0</span>, <span class="keyword">int</span>(group.size()) - k), group.end(), <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Nate-and-Dimension-Hopping-Money"><a href="#D-Nate-and-Dimension-Hopping-Money" class="headerlink" title="D. Nate and Dimension-Hopping Money"></a>D. Nate and Dimension-Hopping Money</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">double</span> n, x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; x &gt;&gt; y;</span><br><span class="line">x /= <span class="number">100</span>;</span><br><span class="line">y /= <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">5</span>)</span><br><span class="line">&lt;&lt; n &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x - y + x * y) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="string">' '</span></span><br><span class="line">&lt;&lt; n * (<span class="number">1</span> - x - y + x * y) / (<span class="number">1</span> - y + x * y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Nate-and-Fan-Meet-and-Greet"><a href="#F-Nate-and-Fan-Meet-and-Greet" class="headerlink" title="F. Nate and Fan Meet-and-Greet"></a>F. Nate and Fan Meet-and-Greet</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Nate-and-Game"><a href="#G-Nate-and-Game" class="headerlink" title="G. Nate and Game"></a>G. Nate and Game</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个三角形，问一条平行于$~\rm x~$轴的直线最多穿过多少三角形。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><p>扫描线维护每一条线经过的三角形数量。本题由于坐标范围小，可以改用差分数组维护，复杂度可以少一个$~\log~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; add, sub;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; line;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">3</span>], y[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="keyword">int</span> mi = *min_element(y, y + <span class="number">3</span>), mx = *max_element(y, y + <span class="number">3</span>);</span><br><span class="line">++add[mi];</span><br><span class="line">++sub[mx];</span><br><span class="line">line.emplace(mi);</span><br><span class="line">line.emplace(mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; y : line)&#123;</span><br><span class="line">res = max(res, cur += add[y]);</span><br><span class="line">cur -= sub[y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Nate-and-High-School-Nakama"><a href="#H-Nate-and-High-School-Nakama" class="headerlink" title="H. Nate and High School Nakama"></a>H. Nate and High School Nakama</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>总共有$~n~$个点，输出所有可能的图中的连通块数量之和。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先计算$~n~$阶完全图的连图子图数量$~f(n)~$。记不连通子图数量为$~g(n)~$，则有$~f(n)+g(n)=2^{\frac{n(n-1)}{2}}~$。对$~g(n)~$，枚举点$~1~$所在连通块的大小，则有</p><script type="math/tex; mode=display">g(n)=\sum_{k=1}^{n-1}f(k)\binom{n-1}{k-1}2^{\frac{(n-k)(n-k-1)}{2}}</script><p>即</p><script type="math/tex; mode=display">f(n)=2^{\frac{n(n-1)}{2}}-\sum_{k=1}^{n-1}f(k)\binom{n-1}{k-1}2^{\frac{(n-k)(n-k-1)}{2}}</script><p>记全点集为$~S=\lbrace~1,2,\dots,n~\rbrace~$，用边集$~E~$代表图，记$~F(E)~$为$~E~$的所有连通块点集构成的集合。即对任意$~V\in F(E)~$，有$~V\subset S~$且$~V~$在$~E~$下连通，并且$~V_1\cap V_2=\varnothing,\forall~V_1\neq V_2\in F(E)~$。于是答案为计算$~\sum_{E}{\mid F(E)\mid}~$。对于上述$~V~$与$~E~$的关系，即$~V~$构成$~E~$的连通块点集，记为$~V\mid E~$。则有如下恒等变换</p><script type="math/tex; mode=display">\sum_{E}{\mid F(E)\mid}=\sum_{E}\sum_{V\in F(E)}1=\sum_{V\subset S}\sum_{V\mid E}1</script><p>其中$~\sum_{V\mid E}1~$表示点集$~V~$恰好构成一个连通块的图的数量。不难注意到对于$~{\mid V_1\mid}={\mid V_2\mid}~$，有$~\sum_{V_1\mid E}1=\sum_{V_2\mid E}1~$。于是把枚举$~S~$的子集$~V~$改为枚举$~\mid V\mid~$，则答案为</p><script type="math/tex; mode=display">\sum_{E}{\mid F(E)\mid}=\sum_{k=1}^{n}\binom{n}{k}f(k)2^{\frac{(n-k)(n-k-1)}{2}}</script><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod  = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int64_t</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (n = (n % (mod - <span class="number">1</span>) + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> inv[maxn], fact[maxn], finv[maxn], cal[maxn], res[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">cal[i] = add(cal[i - <span class="number">1</span>], i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != maxn; ++i) cal[i] = fpow(<span class="number">2</span>, cal[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bino</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> mul(fact[n], mul(finv[k], finv[n - k])); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">res[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">2</span>; n != maxn; ++n) &#123;</span><br><span class="line">res[n] = cal[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k != n; ++k) res[n] = sub(res[n], mul(res[k], mul(bino(n - <span class="number">1</span>, k - <span class="number">1</span>), cal[n - k])));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">solve();</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; ++k) ans = add(ans, mul(res[k], mul(bino(n, k), cal[n - k])));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Nate-and-Integer-Coefficient"><a href="#I-Nate-and-Integer-Coefficient" class="headerlink" title="I. Nate and Integer Coefficient"></a>I. Nate and Integer Coefficient</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>已知$~a~$且$~x~$满足$~x^2-ax+1=0~$，求$~b~$满足$~x^{2n}-bx^n+1=0~$。<br>数据范围$~1\leq T\leq10^5,~{\mid a\mid},{\mid n\mid}\leq10^{18}~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现$~\pm n~$的答案是一样的，下面只考虑$~n\geq 0~$的情况。记$~a_k~$满足$~x^{2k}-a_kx^k+1=0~$。有$~a_0=2,~a_1=a~$。于是对于$~0\leq k_1\leq k_2~$，有</p><script type="math/tex; mode=display">a_{k_1}x^{k_1}=x^{2k_1}+1\\a_{k_2}x^{k_2}=x^{2k_2}+1</script><p>两式相乘，得</p><script type="math/tex; mode=display">\begin{aligned}a_{k_1}a_{k_2}x^{k_1+k_2}&=(x^{2k_1}+1)(x^{2k_2}+1)\\&=(x^{2(k_1+k_2)}+1)+x^{2k_1}(x^{2(k_2-k_1)}+1)\\&=a_{k1+k2}x^{k_1+k_2}+x^{2k_1}\cdot a_{k_2-k_1}x^{k_2-k_1}\\&=(a_{k_1+k_2}+a_{k_2-k_1})x^{k_1+k_2}\end{aligned}</script><p>取$~k_1=n,~k_2=n+1~$，于是得到序列$~\lbrace~a_n~\rbrace~$的线性递推式</p><script type="math/tex; mode=display">a_{n+1}=a_1a_n-a_{n-1}=a\cdot a_n-a_{n-1}</script><p>接下来矩阵快速幂即可。总时间复杂度为$~O(T\log n)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> A[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> B[<span class="number">2</span>][<span class="number">2</span>], <span class="keyword">int</span> C[<span class="number">2</span>][<span class="number">2</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">2</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">2</span>; ++j) &#123;</span><br><span class="line">C[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k != <span class="number">2</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> a, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> A = (a % mod + mod) % mod;</span><br><span class="line"><span class="keyword">if</span> (!n) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">'\n'</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> bas[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; A, mod - <span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125; &#125;, mat[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span> &#125; &#125;, tmp[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (n = <span class="built_in">abs</span>(n); n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">mul(mat, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(mat, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line">mul(bas, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(bas, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; add(mul(mat[<span class="number">1</span>][<span class="number">0</span>], A), add(mat[<span class="number">1</span>][<span class="number">1</span>], mat[<span class="number">1</span>][<span class="number">1</span>])) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/247236&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNU排位二&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Nate-and-Actual-3D-Girls&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BNU排位一</title>
    <link href="http://yoursite.com/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E4%B8%80/"/>
    <id>http://yoursite.com/2019/07/05/2019BNU排位一/</id>
    <published>2019-07-05T12:24:05.452Z</published>
    <updated>2019-07-05T12:24:15.483Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247234" target="_blank" rel="noopener">2019BNU排位一</a></p><h2 id="A-Mental-Rotation"><a href="#A-Mental-Rotation" class="headerlink" title="A. Mental Rotation"></a>A. Mental Rotation</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个图，输出旋转后的样子。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟即可，具体见代码。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">char</span> <span class="built_in">map</span>[<span class="number">128</span>];</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'.'</span>] = <span class="string">'.'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'&lt;'</span>] = <span class="string">'^'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'&gt;'</span>] = <span class="string">'v'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'^'</span>] = <span class="string">'&gt;'</span>;</span><br><span class="line"><span class="built_in">map</span>[<span class="string">'v'</span>] = <span class="string">'&lt;'</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; str;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; pic(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : pic) <span class="built_in">cin</span> &gt;&gt; row;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : str) ch == <span class="string">'R'</span> ? ++cnt : --cnt;</span><br><span class="line"><span class="keyword">auto</span> rotate = [&amp;] () &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; tmp(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != N; ++i) &#123;</span><br><span class="line">tmp[i].resize(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != N; ++j) tmp[i][j] = pic[N - <span class="number">1</span>  -j][i];</span><br><span class="line">&#125;</span><br><span class="line">pic = move(tmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; row : pic) <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ch : row) ch = <span class="built_in">map</span>[ch];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (cnt &amp;= <span class="number">3</span>; cnt; --cnt) rotate();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; row : pic) <span class="built_in">cout</span> &lt;&lt; row &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-SpongeBob-SquarePants"><a href="#B-SpongeBob-SquarePants" class="headerlink" title="B. SpongeBob SquarePants"></a>B. SpongeBob SquarePants</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> w, h;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (w == h ? <span class="string">"YES\n"</span> : <span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-I-Don’t-Want-To-Pay-For-The-Late-Jar"><a href="#C-I-Don’t-Want-To-Pay-For-The-Late-Jar" class="headerlink" title="C. I Don’t Want To Pay For The Late Jar!"></a>C. I Don’t Want To Pay For The Late Jar!</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> D;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; D;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= D; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> N, S, res = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N &gt;&gt; S;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="keyword">int</span> f, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; f &gt;&gt; t;</span><br><span class="line">res = max(res, f - max(<span class="number">0</span>, t - S));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Optimal-Slots"><a href="#E-Optimal-Slots" class="headerlink" title="E. Optimal Slots"></a>E. Optimal Slots</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出$~01~$背包的字典序最小方案。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸$~01~$背包，可以用<code>std::bitset</code>优化。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, N;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">if</span> (!T) <span class="keyword">break</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(N), cal(N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">bitset</span>&lt;(1 &lt;&lt; 14)&gt;&gt; dp0(N + <span class="number">1</span>), dp1(N + <span class="number">1</span>);</span><br><span class="line">dp1[N].<span class="built_in">set</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = N - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">dp0[i] = dp0[i + <span class="number">1</span>] | dp1[i + <span class="number">1</span>];</span><br><span class="line">dp1[i] = dp0[i] &lt;&lt; a[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = T; ~j; --j) <span class="keyword">if</span> (dp1[i].test(j)) &#123; cal[i] = j; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> sum = *max_element(cal.begin(), cal.end()), p = <span class="number">-1</span>; sum; sum -= a[p]) &#123;</span><br><span class="line"><span class="keyword">do</span> &#123; ++p; &#125; <span class="keyword">while</span> (!dp1[p].test(sum));</span><br><span class="line">res.emplace_back(a[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ans : res) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(res.begin(), res.end(), <span class="number">0</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Military-Class"><a href="#F-Military-Class" class="headerlink" title="F. Military Class"></a>F. Military Class</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>二分图，其中两行之间编号之差的绝对值不超过$~e~$的可以连边，同时给出了$~k~$对边不能连。问一共有多少完美匹配。<br>数据范围$~1\leq n\leq2000,~0\leq e\leq4,~0\leq k\leq2000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>状压$~\text{DP}~$。记录半径为$~4~$总共$~9~$个点的匹配状态，总时间复杂度为$~O(9\cdot2^9\cdot n)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = <span class="number">1</span> &lt;&lt; <span class="number">9</span> ;</span><br><span class="line"><span class="keyword">int</span> ok[maxn], dp[maxn][maxs];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, e, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; e &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">ok[i] = ((<span class="number">1</span> &lt;&lt; min(e + <span class="number">5</span>, n - i + <span class="number">4</span>)) - <span class="number">1</span>) ^ ((<span class="number">1</span> &lt;&lt; (<span class="number">4</span> - min(e, i))) - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(u - v) &lt;= e) ok[u - <span class="number">1</span>] &amp;= ~(<span class="number">1</span> &lt;&lt; (v - u + <span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>][((<span class="number">1</span> &lt;&lt; min(<span class="number">9</span>, n + <span class="number">4</span>)) - <span class="number">1</span>) ^ ((<span class="number">1</span> &lt;&lt; <span class="number">4</span>) - <span class="number">1</span>)] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> s = <span class="number">0</span>; s != maxs; ++s) <span class="keyword">if</span> (dp[i][s]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j != (<span class="number">1</span> &lt;&lt; <span class="number">9</span>); j &lt;&lt;= <span class="number">1</span>) <span class="keyword">if</span> (ok[i] &amp; s &amp; j) &#123;</span><br><span class="line"><span class="keyword">int</span> ss = s ^ j;</span><br><span class="line"><span class="keyword">if</span> (ss &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">ss &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">5</span> &lt; n) ss ^= <span class="number">1</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line">dp[i + <span class="number">1</span>][ss] = add(dp[i + <span class="number">1</span>][ss], dp[i][s]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxs; ++i) assert(!dp[n][i]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[n][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Are-You-Safe"><a href="#H-Are-You-Safe" class="headerlink" title="H. Are You Safe?"></a>H. Are You Safe?</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>求一个凸包并判断一些点是否在凸包内。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>直接抄板子。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">Point(<span class="keyword">int</span> _x = <span class="number">0</span>, <span class="keyword">int</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span>  <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x ? y &lt; p.y : x &lt; p.x; &#125;</span><br><span class="line">Point <span class="keyword">operator</span>- (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x - p.x, y - p.y); &#125;</span><br><span class="line"><span class="keyword">int</span>   <span class="keyword">operator</span>^ (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - p.x * y; &#125;</span><br><span class="line">&#125; c[<span class="number">64</span>], p[<span class="number">64</span>], h[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">convex</span><span class="params">(Point *p, <span class="keyword">int</span> n, Point* ch)</span> </span>&#123;</span><br><span class="line">sort(p, p + n);</span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; <span class="number">1</span> &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">ch[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> k = m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">while</span> (m &gt; k &amp;&amp; ((ch[m - <span class="number">1</span>] - ch[m - <span class="number">2</span>]) ^ (p[i] - ch[m - <span class="number">2</span>])) &lt;= <span class="number">0</span>) --m;</span><br><span class="line">ch[m++] = p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) --m;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= T; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> C, P;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; C &gt;&gt; P;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != C; ++i) <span class="built_in">cin</span> &gt;&gt; c[i].x &gt;&gt; c[i].y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != P; ++i) <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y;</span><br><span class="line"><span class="keyword">int</span> n = convex(c, C, h);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; cas &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; h[i].x &lt;&lt; <span class="string">' '</span> &lt;&lt; h[i].y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; h-&gt;x &lt;&lt; <span class="string">' '</span> &lt;&lt; h-&gt;y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p[P] = p[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) area += h[i] ^ h[i + <span class="number">1</span>];</span><br><span class="line">area = <span class="built_in">abs</span>(area);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != P; ++i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p[i].x &lt;&lt; <span class="string">' '</span> &lt;&lt; p[i].y &lt;&lt; <span class="string">" is "</span>;</span><br><span class="line"><span class="keyword">int</span> calc = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n; ++j) calc += <span class="built_in">abs</span>((h[j] - p[i]) ^ (h[j + <span class="number">1</span>] - p[i]));</span><br><span class="line"><span class="keyword">if</span> (area == calc) <span class="built_in">cout</span> &lt;&lt; <span class="string">"un"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"safe!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-To-Crash-Or-Not-To-Crash"><a href="#I-To-Crash-Or-Not-To-Crash" class="headerlink" title="I. To Crash Or Not To Crash"></a>I. To Crash Or Not To Crash</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str) &#123;</span><br><span class="line"><span class="keyword">auto</span> p = str.find(<span class="string">'='</span>);</span><br><span class="line"><span class="keyword">if</span> (~p) &#123;</span><br><span class="line"><span class="keyword">for</span> (++p; p != str.size(); ++p) <span class="keyword">if</span> (str[p] != <span class="string">'.'</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; str[p] &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"You shall pass!!!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Kitchen-Plates"><a href="#J-Kitchen-Plates" class="headerlink" title="J. Kitchen Plates"></a>J. Kitchen Plates</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一组大小关系，问是否存在一种排序满足所有的关系。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>拓扑排序。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> deg[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">5</span>; ++i) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> u = str.front() - <span class="string">'A'</span>, v = str.back() - <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">1</span>] == <span class="string">'&gt;'</span>) swap(u, v);</span><br><span class="line">adj[u].emplace_back(v);</span><br><span class="line">++deg[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; topo;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">0</span>; u != <span class="number">5</span>; ++u) <span class="keyword">if</span> (!deg[u]) topo.emplace_back(u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="keyword">int</span>(topo.size()); ++i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : adj[topo[i]]) <span class="keyword">if</span> (!--deg[u]) topo.emplace_back(u);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">int</span>(topo.size()) != <span class="number">5</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"impossible"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; u : topo) <span class="built_in">cout</span> &lt;&lt; <span class="keyword">char</span>(u + <span class="string">'A'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Help-The-Support-Lady"><a href="#K-Help-The-Support-Lady" class="headerlink" title="K. Help The Support Lady"></a>K. Help The Support Lady</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个任务，用时为$~t~$，期限为$~2t~$。问最多能做多少任务。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。对于每个任务，在$~t~$时刻之前开始才能完成，否则直接抛弃。对$~t~$升序，每次做当前可以完成的用时最短的任务即可。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> cas = <span class="number">1</span>; cas &lt;= m; ++cas) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; tt : t) <span class="built_in">cin</span> &gt;&gt; tt;</span><br><span class="line">sort(t.begin(), t.end());</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &lt;= t[i]) &#123;</span><br><span class="line">j += t[i];</span><br><span class="line">++res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; cas &lt;&lt; <span class="string">": "</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/247234&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNU排位一&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Mental-Rotation&quot;&gt;&lt;a href=&quot;#A-Ment
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BNU排位热身</title>
    <link href="http://yoursite.com/2019/07/05/2019BNU%E6%8E%92%E4%BD%8D%E7%83%AD%E8%BA%AB/"/>
    <id>http://yoursite.com/2019/07/05/2019BNU排位热身/</id>
    <published>2019-07-05T02:44:42.084Z</published>
    <updated>2019-07-05T12:08:04.617Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/247198" target="_blank" rel="noopener">2019BNU排位热身</a></p><h2 id="A-Pineapple-Incident"><a href="#A-Pineapple-Incident" class="headerlink" title="A. Pineapple Incident"></a>A. Pineapple Incident</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> t, s, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; s &gt;&gt; x;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (t &lt;= x &amp;&amp; (x - t) % s &lt;= <span class="number">1</span> &amp;&amp; t + <span class="number">1</span> != x ? <span class="string">"YES"</span> : <span class="string">"NO"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Barnicle"><a href="#B-Barnicle" class="headerlink" title="B. Barnicle"></a>B. Barnicle</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个科学记数法数字字符串，转化为小数表示。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用字符<code>&#39;e&#39;</code>和<code>&#39;.&#39;</code>把原串截成整数部分、小数部分和进位部分$~3~$段，然后可以利用<code>std::stringstream</code>把进位部分转化为整数，把小数部分的前缀移动至整数部分的后缀，处理完前导零和后导零即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">int</span> b, p1 = str.find(<span class="string">'.'</span>), p2 = str.find(<span class="string">'e'</span>);</span><br><span class="line">string a(str.substr(0, p1)), d(str.substr(p1 + 1, p2 - p1 - 1));</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss</span><span class="params">(str.substr(p2 + <span class="number">1</span>))</span></span>;</span><br><span class="line">ss &gt;&gt; b;</span><br><span class="line"><span class="keyword">int</span> bb = min(b, p2 - p1 - <span class="number">1</span>);</span><br><span class="line">b -= bb;</span><br><span class="line">a += d.substr(<span class="number">0</span>, bb);</span><br><span class="line">d  = d.substr(bb);</span><br><span class="line"><span class="keyword">while</span> (!d.empty() &amp;&amp; d.back() == <span class="string">'0'</span>) d.pop_back();</span><br><span class="line"><span class="keyword">if</span> (d.empty()) <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">string</span>(b, <span class="string">'0'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">'.'</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Lorenzo-Von-Matterhorn"><a href="#C-Lorenzo-Von-Matterhorn" class="headerlink" title="C. Lorenzo Von Matterhorn"></a>C. Lorenzo Von Matterhorn</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>在一棵完全二叉树上支持路径修改和路径查询操作。<br>数据范围$~1\leq q\leq1000,~1\leq u,v\leq10^{18},~1\leq w\leq10^9~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到这棵树的深度至为$~60~$层，以及总操作数不超过$~1000~$，那么涉及到的点或边的总量不会超过$~1.2\times10^6~$。于是可以用<code>std::map</code>暴力存权值，问题的关键变为如何在完全二叉树上确定路径。事实上只要当$~u\neq v~$时，一直让较大的那个数字除以$~2~$下取整即可，边可以用它的儿子点编号表示。总复杂度$~O(60q\log q)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">include &lt;bits/stdc++.h&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int64_t</span>, <span class="keyword">int64_t</span>&gt; cost;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> op;</span><br><span class="line"><span class="keyword">int64_t</span> u, v, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; op &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &lt; v) &#123;</span><br><span class="line">cost[v] += w;</span><br><span class="line">v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cost[u] += w;</span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (u != v) &#123;</span><br><span class="line"><span class="keyword">if</span> (u &lt; v) &#123;</span><br><span class="line">res += cost[v];</span><br><span class="line">v &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">res += cost[u];</span><br><span class="line">u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Puzzles"><a href="#D-Puzzles" class="headerlink" title="D. Puzzles"></a>D. Puzzles</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一棵树的形状，根节点为$~1~$，在随机$~\text{DFS}~$过程下，问每个节点的$~\text{DFS}~$序的期望$~f(u)~$。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先进行一次$~\text{DFS}~$过程线性处理出每个节点为根的子树的大小$~s(u)~$。根节点的期望值一定是$~1~$。假设已知节点$~p~$的期望值，那么考虑它的儿子$~u~$的期望值$~f(p)~$。对于另一个儿子$~v~$，如果先遍历了$~v~$则$~u~$的$~\text{DFS}~$序需要增加$~s(v)~$。注意到对于$~u~$的每个兄弟$~v~$，它们遍历的前后顺序的概率各占一半，且相互独立，于是有$~f(u)=f(p)+\frac{1}{2}\sum_{v\in son(p)}^{u\neq v}s(v)+1~$。再执行一遍$~\text{DFS}~$过程即可，总时间复杂度为$~O(n)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100001</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; son[maxn];</span><br><span class="line"><span class="keyword">double</span> sz[maxn], ord[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) sz[u] += dfs1(v); <span class="keyword">return</span> sz[u] += <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123; ord[u] += <span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; v : son[u]) &#123; ord[v] = ord[u] + (sz[u] - sz[v] - <span class="number">1</span>) / <span class="number">2</span>; dfs2(v); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">2</span>; u &lt;= n; ++u) &#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">son[p].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> u = <span class="number">1</span>; u != n; ++u) <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">7</span>) &lt;&lt; ord[u] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ord[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-PLEASE"><a href="#E-PLEASE" class="headerlink" title="E. PLEASE"></a>E. PLEASE</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~3~$个杯子，初始球在中间，每次等概率随机交换左边和中间或者右边和中间。问在$~n=\prod_{i=1}^{k}a_i~$次交换后球在中间的概率是多少，用即约分数取模后表出。<br>数据范围$~1\leq k\leq10^5,~1\leq a\leq10^{18}~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设第$~i~$次交换后球在中间的概率为$~b_i~$，则有$~b_0=1,~b_1=0~$。不难得出关系式</p><script type="math/tex; mode=display">b_{n+1}=\frac{1-b_n}{2}</script><p>及</p><script type="math/tex; mode=display">b_{n+1}-\frac{1}{3}=-\frac{1}{2}\left(b_n-\frac{1}{3}\right)</script><p>于是得出通项公式</p><script type="math/tex; mode=display">\begin{aligned}b_n &=\frac{1}{3}+\frac{2}{3}\left(-\frac{1}{2}\right)^n            \\    &=\frac{\frac{1}{3}\left(2^{n-1}-(-1)^{n-1}\right)}{2^{n-1}}\end{aligned}</script><p>于有$~p=\frac{1}{3}(2^{n-1}-(-1)^{n-1}),q=2^{n-1}~$且满足$~(p,q)=1~$。接下来欧拉降幂和快速幂即可，总时间复杂度为$~O(k+\log mod)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> neg = <span class="number">1000000006</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = <span class="number">500000004</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv3 = <span class="number">333333336</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">int64_t</span> aa = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> par = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">aa = a % neg * aa % neg;</span><br><span class="line">par &amp;= a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> two = fpow(<span class="number">2</span>, aa);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sub(mul(two, inv2), mul(par ? add(two, <span class="number">1</span>) : sub(two, <span class="number">1</span>), inv3)) &lt;&lt; <span class="string">'/'</span> &lt;&lt; mul(two, inv2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Link-Cut-Tree"><a href="#F-Link-Cut-Tree" class="headerlink" title="F. Link/Cut Tree"></a>F. Link/Cut Tree</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出$~[l,r]~$中的所有的$~k~$的幂。<br>数据范围$~1\leq l\leq r\leq10^{18},~2\leq k\leq10^9~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。注意不要爆<code>long long</code>。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int64_t</span> INF = <span class="number">1L</span>L &lt;&lt; <span class="number">60</span>;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int64_t</span> l, r, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; res;</span><br><span class="line"><span class="keyword">int64_t</span> cur = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (cur &lt; l) cur = <span class="keyword">double</span>(cur) * k &gt; INF ? INF : cur * k;</span><br><span class="line"><span class="keyword">while</span> (cur &lt;= r) &#123;</span><br><span class="line">res.emplace_back(cur);</span><br><span class="line">cur = <span class="keyword">double</span>(cur) * k &gt; INF ? INF : cur * k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != <span class="keyword">int</span>(res.size()); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Gena’s-Code"><a href="#G-Gena’s-Code" class="headerlink" title="G. Gena’s Code"></a>G. Gena’s Code</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一组数字，至多一个不是$~10~$的幂，求它们的积。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>找出不是$~10~$的幂的特殊数字串然后根据其它串的长度在它后面补$~0~$即可。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">head</span><span class="params">(<span class="string">"1"</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"0"</span>) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"1"</span> + <span class="built_in">string</span>(str.size() - <span class="number">1</span>, <span class="string">'0'</span>)) l += str.size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> head = str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; head &lt;&lt; <span class="built_in">string</span>(l, <span class="string">'0'</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Peter-and-Snow-Blower"><a href="#H-Peter-and-Snow-Blower" class="headerlink" title="H. Peter and Snow Blower"></a>H. Peter and Snow Blower</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个多边形和一个旋转中心，输出多边形绕旋转中心一周后扫过的面积。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>计算几何。只要求出多边形中离旋转中心最远的距离和最近的距离。具体见代码。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> x, y;</span><br><span class="line">Point(<span class="keyword">double</span> _x = <span class="number">0</span>, <span class="keyword">double</span> _y = <span class="number">0</span>): x(_x), y(_y) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt; (istream&amp; is, Point&amp; p) &#123; <span class="keyword">return</span> is &gt;&gt; p.x &gt;&gt; p.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis2</span><span class="params">(Point p1, Point p2)</span> </span>&#123; <span class="keyword">return</span> hypot(p1.x - p2.x, p1.y - p2.y); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> px, py;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; px &gt;&gt; py;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; x(n), y(n);</span><br><span class="line"><span class="keyword">double</span> R = <span class="number">0</span>, r = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line">x[i] -= px;</span><br><span class="line">y[i] -= py;</span><br><span class="line"><span class="keyword">double</span> d2 = x[i] * x[i] + y[i] * y[i];</span><br><span class="line">R = max(R, d2);</span><br><span class="line">r = min(r, d2);</span><br><span class="line">&#125;</span><br><span class="line">x.emplace_back(x.front());</span><br><span class="line">y.emplace_back(y.front());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (x[i + <span class="number">1</span>] * (x[i + <span class="number">1</span>] - x[i]) + y[i + <span class="number">1</span>] * (y[i + <span class="number">1</span>] - y[i]) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (x[i] * (x[i] - x[i + <span class="number">1</span>]) + y[i] * (y[i] - y[i + <span class="number">1</span>]) &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="built_in">fabs</span>(x[i + <span class="number">1</span>] * y[i] - x[i] * y[i + <span class="number">1</span>]) / hypot(x[i + <span class="number">1</span>] - x[i], y[i + <span class="number">1</span>] - y[i]);</span><br><span class="line">R = max(R, d * d);</span><br><span class="line">r = min(r, d * d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">7</span>) &lt;&lt; <span class="built_in">acos</span>(<span class="keyword">double</span>(<span class="number">-1</span>)) * (R - r) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Skills"><a href="#I-Skills" class="headerlink" title="I. Skills"></a>I. Skills</h2><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定能力序列$~a_1,a_2,\dots,a_n~$并且还可以再操作$~m~$次$~+1~$，序列值上界为$~A~$。最终序列的权值计算为</p><script type="math/tex; mode=display">(\sum_{i=1}^{n}{\Bbb I(a_i=A)})\times c_f+\min(a1,a2,\dots,a_n)\times c_m</script><p>输出最大的权值以及此时的新序列$~\hat{a}_1,\hat{a}_2,\dots,\hat{a}_n~$。<br>数据范围$~1\leq n\leq100000,~1\leq A\leq10^9,~0\leq c_f,c_m\leq1000,~0\leq m\leq10^{15}~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先对序列$~a_1,a_2,\dots,~a_n~$升序，处理好前缀和后缀和。权值最大化的方案一定是让一个前缀增加至一个相等的新最小值，后缀增加至$~A~$。那么枚举多长的后缀变为$~A~$，可以二分得到新的最小值最大可以是多少，更新答案即可。总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int64_t</span> A, cf, cm, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; A &gt;&gt; cf &gt;&gt; cm &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; a(n), p(n), suf(n), pre(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">iota(p.begin(), p.end(), <span class="number">0</span>);</span><br><span class="line">sort(p.begin(), p.end(), [&amp;] (<span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123; <span class="keyword">return</span> a[i] &lt; a[j]; &#125;);</span><br><span class="line">suf.front() = A - a[p.back()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) suf[i] = suf[i - <span class="number">1</span>] + A - a[p[n - i - <span class="number">1</span>]];</span><br><span class="line">pre.front() = a[p.front()];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) pre[i] = pre[i - <span class="number">1</span>] + a[p[i]];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) pre[i] = i * a[p[i]] + a[p[i]] - pre[i];</span><br><span class="line"><span class="keyword">int</span> pos1 = upper_bound(pre.begin(), pre.end(), m) - pre.begin(), pos2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int64_t</span> mii = min(A, a[p[pos1 - <span class="number">1</span>]] + (m - pre[pos1 - <span class="number">1</span>]) / pos1), res =  mii * cm;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> rem = m - suf[i];</span><br><span class="line"><span class="keyword">if</span> (rem &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">auto</span> ite = upper_bound(pre.begin(), pre.end(), rem);</span><br><span class="line"><span class="keyword">int</span> l = min(n - i - <span class="number">1</span>, (upper_bound(pre.begin(), pre.end(), rem) - pre.begin()));</span><br><span class="line"><span class="keyword">int64_t</span> mi = min(A, l ? a[p[l - <span class="number">1</span>]] + (rem - pre[l - <span class="number">1</span>]) / l : A);</span><br><span class="line"><span class="keyword">int64_t</span> ans = i * cf + cf + mi * cm;</span><br><span class="line"><span class="keyword">if</span> (res &lt;= ans) &#123;</span><br><span class="line">res = ans;</span><br><span class="line">mii = mi;</span><br><span class="line">pos1 = l;</span><br><span class="line">pos2 = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos1--) &#123;</span><br><span class="line">m -= mii - a[p[pos1]];</span><br><span class="line">a[p[pos1]] = mii;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos2) &#123;</span><br><span class="line">m -= A - a[p[n - pos2]];</span><br><span class="line">a[p[n - pos2--]] = A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; a[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/247198&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNU排位热身&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Pineapple-Incident&quot;&gt;&lt;a href=&quot;#A-
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BNUCPC</title>
    <link href="http://yoursite.com/2019/05/17/2019BNUCPC/"/>
    <id>http://yoursite.com/2019/05/17/2019BNUCPC/</id>
    <published>2019-05-17T10:17:33.334Z</published>
    <updated>2019-05-24T08:32:57.787Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ac.nowcoder.com/acm/contest/895" target="_blank" rel="noopener">2019BNUCPC</a></p><h2 id="A-足球"><a href="#A-足球" class="headerlink" title="A. 足球"></a>A. 足球</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">23</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; accumulate(a.begin(), a.end(), <span class="number">0</span>) * *min_element(a.begin(), a.end()) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-进制"><a href="#B-进制" class="headerlink" title="B. 进制"></a>B. 进制</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int64_t</span>&gt; sum(<span class="number">18</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int64_t</span> base = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; s : sum) &#123;</span><br><span class="line">s += base;</span><br><span class="line">base *= i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">reverse(str.begin(), str.end());</span><br><span class="line"><span class="keyword">int64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != str.size(); ++i) <span class="keyword">if</span> (str[i] == <span class="string">'1'</span>) res += sum[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-寻找路径"><a href="#C-寻找路径" class="headerlink" title="C. 寻找路径"></a>C. 寻找路径</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>改编自$~\text{2019 Google Code Jam Qualification T2}~$。要从$~n\times m~$的网格图的左下角走到右上角，只能向上或者向右。现给定一个由$~n~$个向上和$~m~$个向右组成的路径，问是否存在另一条路径与给定路径没有重复的边，存在则输出任意一种。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>如果第一步和最后一步不一样，则显然可以输出贴着右下方或者左上方的路径。如果一样，不妨设第一步和最后一步都是向上，那么如果新的路径存在，则它的第一步和最后一步必须向右。如果在给定路径上存在两个连续的向右，那么用$~n~$个向上从这两个向右的中点穿过，前面和后面均为向右即可。如果不存在，很容易发现答案也是不存在的。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">string</span> str, res;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; str;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'U'</span> &amp;&amp; str.back() == <span class="string">'U'</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != n + m; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'R'</span> &amp;&amp; str[i - <span class="number">1</span>] == <span class="string">'R'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(count(str.begin(), str.begin() + i, <span class="string">'R'</span>), <span class="string">'R'</span>) + <span class="built_in">string</span>(n, <span class="string">'U'</span>);</span><br><span class="line">res.append(n + m - res.size(), <span class="string">'R'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) res = <span class="string">"impossible"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'U'</span> &amp;&amp; str.back() == <span class="string">'R'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(m, <span class="string">'R'</span>) + <span class="built_in">string</span>(n, <span class="string">'U'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'R'</span> &amp;&amp; str.back() == <span class="string">'U'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(n, <span class="string">'U'</span>) + <span class="built_in">string</span>(m, <span class="string">'R'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.front() == <span class="string">'R'</span> &amp;&amp; str.back() == <span class="string">'R'</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != n + m; ++i) <span class="keyword">if</span> (str[i] == <span class="string">'U'</span> &amp;&amp; str[i - <span class="number">1</span>] == <span class="string">'U'</span>) &#123;</span><br><span class="line">res = <span class="built_in">string</span>(count(str.begin(), str.begin() + i, <span class="string">'U'</span>), <span class="string">'U'</span>) + <span class="built_in">string</span>(m, <span class="string">'R'</span>);</span><br><span class="line">res.append(n + m - res.size(), <span class="string">'U'</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (res.empty()) res = <span class="string">"impossible"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-选数字"><a href="#D-选数字" class="headerlink" title="D. 选数字"></a>D. 选数字</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定序列$~a_1,a_2,\dots,a_n~$，问等概率选$~k~$个数字中最小值的期望乘以$~\binom{n}{k}~$的值。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>题目等价于询问对于所有的$~k~$个数字的选法中最小值的总和。考虑第$~i~$小的数字的贡献次数，相当于先选这个数再在第$~i+1~$小至第$~n~$小（最大）的数字中选剩下的$~k-1~$个数字，这个值是$~\binom{n-i}{k-1}~$。最后全部加起来即可。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; inv(maxn), fact(maxn), finv(maxn);</span><br><span class="line">inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = fact[<span class="number">0</span>] = fact[<span class="number">1</span>] = finv[<span class="number">0</span>] = finv[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i != maxn; ++i) &#123;</span><br><span class="line">inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line">fact[i] = mul(fact[i - <span class="number">1</span>], i);</span><br><span class="line">finv[i] = mul(finv[i - <span class="number">1</span>], inv[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; aa : a) <span class="built_in">cin</span> &gt;&gt; aa;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">uint64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i + k &lt;= n; ++i) res += mul(mul(a[i], fact[n - i - <span class="number">1</span>]), mul(finv[k - <span class="number">1</span>], finv[n - k - i]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-高等术学"><a href="#E-高等术学" class="headerlink" title="E. 高等术学"></a>E. 高等术学</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>场上初始有$~1~$号怪兽，每个怪兽死亡都会召唤若干新的怪兽到场上，共$~n~$只，血量为$~h_1,h_2,\dots,h_n~$。攻击为$~\text{AOE}~$模式，即每次攻击场上所有怪兽受到相同伤害。攻击力为$~d_1,d_2,\dots,d_m~$的循环。每次攻击需要花费$~1~$的代价，但是如果本次攻击消灭的至少$~1~$只怪兽，则下次攻击免费。问消灭所有怪兽的总代价。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^5,~1\leq h\leq10^9,~1\leq d\leq10^9~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然要用堆来维护当前场上血量最少的怪。然后计算需要多少次攻击时现考虑需要多少个$~m~$次的攻击，然后在$~d~$的前缀和上二分。一个技巧是在把新的怪兽入堆时，把它的血量加上之前攻击力的总和。总时间复杂度为$~O(n(\log n+\log m))~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; h(n), d(m);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; next(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; hh : h) <span class="built_in">cin</span> &gt;&gt; hh;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; dd : d) <span class="built_in">cin</span> &gt;&gt; dd;</span><br><span class="line"><span class="keyword">auto</span> p = d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != m; ++i) p[i] += p[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; vec : next) &#123;</span><br><span class="line"><span class="keyword">size_t</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">vec.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; nn : vec) <span class="built_in">cin</span> &gt;&gt; nn, --nn;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;&gt; que;</span><br><span class="line">que.emplace(h.front(), <span class="keyword">size_t</span>(<span class="number">0</span>));</span><br><span class="line"><span class="keyword">uint64_t</span> cur = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> rem = que.top().first - cur / m * p.back();</span><br><span class="line"><span class="keyword">auto</span> ite = lower_bound(p.begin(), p.end(), rem);</span><br><span class="line"><span class="keyword">uint64_t</span> cnt = ite - p.begin() - cur % m;</span><br><span class="line"><span class="keyword">if</span> (ite == p.end()) &#123;</span><br><span class="line">rem -= p.back();</span><br><span class="line">cnt += rem / p.back() * m;</span><br><span class="line"><span class="keyword">if</span> (rem %= p.back()) cnt += lower_bound(p.begin(), p.end(), rem) - p.begin();</span><br><span class="line"><span class="keyword">else</span> --cnt;</span><br><span class="line">&#125;</span><br><span class="line">res += cnt;</span><br><span class="line">cur += cnt;</span><br><span class="line">++cur;</span><br><span class="line"><span class="keyword">uint64_t</span> tot = cur / m * p.back() + p[cur % m] - d[cur % m];</span><br><span class="line"><span class="keyword">while</span> (!que.empty() &amp;&amp; que.top().first &lt;= tot) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; nn : next[que.top().second]) que.emplace(h[nn] + tot, nn);</span><br><span class="line">que.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ++res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-仙人掌"><a href="#F-仙人掌" class="headerlink" title="F. 仙人掌"></a>F. 仙人掌</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问大小为$~n~$且满足$~\text{DFS}~$序为$~1,2,\dots,n~$的有标号仙人掌个数。仙人掌为任何一条边至多属于一个简单环的连通图。<br>数据范围$~1\leq T\leq5000,~1\leq n\leq5000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。用$~{\scr F}_i~$表示大小为$~i~$且满足$~\text{DFS}~$序单调的有标号仙人掌构成的集合。记$~dp_i^{(0)}={\mid {\scr F}_i\mid}~$，则$~dp^{(0)}~$为答案序列。对于仙人掌$~F~$，用$~S(F)\subseteq F~$表示$~F~$中包含根节点的不连通子树。记$~dp_i^{(1)}=\sum_{F\in{\scr F}_i}{\mid S(F)\mid}~$。显然$~dp_1^{(0)}=dp_1^{(0)}=1~$。对于$~i&gt;1~$，枚举根$~1~$的标号最大的儿子，设为$~j+1~$。则整个仙人掌等价于标号为$~1,2,\dots,j~$的仙人掌$~A~$的根节点$~1~$上挂一棵标号为$~j+1,j+2,\dots,i~$的仙人掌$~B~$，或者再加一条覆盖边$~(1,j+1)~$的非$~\text{DFS}~$树边$~l~$。注意到$~l~$的一端为$~1~$，另一端根据仙人掌的性质，必然在$~S(B)~$之中。所以有状态转移式</p><script type="math/tex; mode=display">\begin{aligned}dp_i^{(0)}&=\sum_{j=1}^{i-1}dp_j^{(0)}\times(dp_{i-j}^{(0)}+dp_{i-j}^{(1)})\\dp_i^{(1)}&=\sum_{j=1}^{i-1}dp_j^{(0)}\times dp_{i-j}^{(1)}+dp_j^{(1)}\times(dp_{i-j}^{(0)}+dp_{i-j}^{(1)})\\\end{aligned}</script><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">5000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">uint64_t</span>&gt; dp0(maxn + <span class="number">1</span>), dp1(maxn + <span class="number">1</span>);</span><br><span class="line">dp0[<span class="number">1</span>] = dp1[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">2</span>; i &lt;= maxn; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">1</span>; j != i; ++j) &#123;</span><br><span class="line">dp0[i] = add(dp0[i], mul(dp0[j], add(dp0[i - j], dp1[i - j])));</span><br><span class="line">dp1[i] = add(dp1[i], add(mul(dp0[j], dp1[i - j]), mul(dp1[j], add(dp0[i - j], dp1[i - j]))));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> T, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp0[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-慢慢变小的序列"><a href="#G-慢慢变小的序列" class="headerlink" title="G. 慢慢变小的序列"></a>G. 慢慢变小的序列</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>需要对序列$~A_1,A_2,\dots,A_n~$支持两种操作。修改操作为将区间$~[L,R]~$与首项为$~X~$，公差为$~Y~$的等差数列取最小值。查询操作为查询$~A_x~$的值。<br>数据范围$~1\leq n,q\leq100000,~{\mid A\mid}\leq100000,~{\mid X\mid}\leq100000,~{\mid Y\mid}\leq5~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到$~Y~$的数据范围，用$~11~$棵线段树维护每种公差的修改即可。总时间复杂度为$~O(11q\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">minn</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y)</span> </span>&#123; x = min(x, y); &#125;</span><br><span class="line"><span class="keyword">int</span> seg[<span class="number">11</span>][<span class="number">1</span> &lt;&lt; <span class="number">18</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build5</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[<span class="number">5</span>][index];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build5(LEFT);</span><br><span class="line">build5(RIGHT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= end || right &lt;= begin) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) &#123;</span><br><span class="line">minn(seg[id][index], x + (begin - left) * (id - <span class="number">5</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">modify(id, LEFT, SEG, x);</span><br><span class="line">modify(id, RIGHT, SEG, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> id, <span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (pos &gt; end || pos &lt;= begin) <span class="keyword">return</span> inf;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1</span> == end) <span class="keyword">return</span> seg[id][index];</span><br><span class="line"><span class="keyword">return</span> min(min(query(id, LEFT, pos), query(id, RIGHT, pos)), seg[id][index] + (pos - begin - <span class="number">1</span>) * (id - <span class="number">5</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> endl <span class="meta-string">'\n'</span></span></span><br><span class="line"><span class="built_in">memset</span>(seg, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (seg));</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line">build5(<span class="number">0</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; opt;</span><br><span class="line"><span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r, x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; x &gt;&gt; y;</span><br><span class="line">modify(y + <span class="number">5</span>, <span class="number">0</span>, n, <span class="number">1</span>, l - <span class="number">1</span>, r, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; ++i) minn(res, query(i, <span class="number">0</span>, n, <span class="number">1</span>, x));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-你不知道的故事"><a href="#H-你不知道的故事" class="headerlink" title="H. 你不知道的故事"></a>H. 你不知道的故事</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~2^k-1~$个灯和开关，初始亮灭状态给出。可以把它们视作一棵完全二叉树的$~\text{BFS}~$序。对于每个开关$~i~$，它一定能控制对应位置的灯$~i~$，有可能控制灯$~2i,2i+1,\lfloor\frac{i}{2}\rfloor~$，即完全二叉树上与它相邻的点。且保证每个灯不会被它的两个儿子开关同时控制。对于任意一种全局开关控制情况，均对应着一种开关方式使得亮的灯数最多。现问这个最多灯数的最小值（在所有全局开关控制情况下）。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。显然直接暴力枚举所有的全局开关控制情况然后做树形$~\text{DP}~$是不可能的。用三个$~01~$状态分别记录当前点的亮灭情况，父亲的亮灭情况，自己的开关能否控制父亲。数值表示的是当前点的子树能对答案的最大贡献。转移过程暴力枚举自己的开关能否控制左右儿子，左右儿子的开关能否控制自己，共$~12~$种情况取$~\min~$，然后根据自己是否按开关取$~\max~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1</span> &lt;&lt; <span class="number">15</span>], dp[<span class="number">1</span> &lt;&lt; <span class="number">15</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> loop(o) for (int o = 0; o != 2; ++o)</span></span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; k); ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> &lt;&lt; k &gt;&gt; <span class="number">1</span>; i != (<span class="number">1</span> &lt;&lt; k); ++i) loop(s) loop(f) loop(x) dp[i][s][f][x] = max((s ^ <span class="number">1</span>) + x - ((x &amp; f) &lt;&lt; <span class="number">1</span>), s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="number">1</span> &lt;&lt; k &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i; --i) loop(s) loop(f) loop(x) loop(l) loop(r) loop(lf) loop(rf) <span class="keyword">if</span> (!(lf &amp; rf))</span><br><span class="line">dp[i][s][f][x] = min(dp[i][s][f][x], max(</span><br><span class="line">dp[i &lt;&lt; <span class="number">1</span>][l ^ a[i &lt;&lt; <span class="number">1</span>]][s ^ <span class="number">1</span>][lf] + dp[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][r ^ a[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>]][s ^ <span class="number">1</span>][rf] + (s ^ <span class="number">1</span>) + x - ((x &amp; f) &lt;&lt; <span class="number">1</span>),</span><br><span class="line">dp[i &lt;&lt; <span class="number">1</span>][    a[i &lt;&lt; <span class="number">1</span>]][s    ][lf] + dp[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>][    a[i &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>]][s    ][rf] + s</span><br><span class="line">));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp[<span class="number">1</span>][a[<span class="number">1</span>]][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ac.nowcoder.com/acm/contest/895&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BNUCPC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-足球&quot;&gt;&lt;a href=&quot;#A-足球&quot; class=&quot;
      
    
    </summary>
    
      <category term="比赛笔记" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2019BITCPC</title>
    <link href="http://yoursite.com/2019/04/26/2019BITCPC/"/>
    <id>http://yoursite.com/2019/04/26/2019BITCPC/</id>
    <published>2019-04-26T15:37:04.393Z</published>
    <updated>2019-04-26T15:37:12.773Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/102174" target="_blank" rel="noopener">2019BITCPC</a></p><h2 id="A-两只脑斧"><a href="#A-两只脑斧" class="headerlink" title="A. 两只脑斧"></a>A. 两只脑斧</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">char</span>&gt; res;</span><br><span class="line">res[<span class="string">"0"</span>] = <span class="string">'X'</span>;</span><br><span class="line">res[<span class="string">"5--"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5-"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7-"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"2+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"5+"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"4+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"1++"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"6+"</span>] = <span class="string">'I'</span>;</span><br><span class="line">res[<span class="string">"3++"</span>] = <span class="string">'E'</span>;</span><br><span class="line">res[<span class="string">"7+"</span>] = <span class="string">'I'</span>;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[str];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-炼金术"><a href="#B-炼金术" class="headerlink" title="B. 炼金术"></a>B. 炼金术</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给$~m~$个小写字母串，要求输出一个长度为$~n~$的小写字母串，使得所有给定串都不是它的子串。保证一定有解。<br>数据范围$~1\leq n\leq10^5,~1\leq m\leq10^4,~{\sum_{i=1}^{m}\mid s_i\mid}\leq3\times10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>建立$~\text{AC}~$自动机，那么可以将其看成一个有向图，显然每个单词末尾字符所对应的节点是不可经过的。在建立自动机的$~\text{BFS}~$过程中，将当前节点是否可经过属性逻辑或上其$~fail~$节点的属性。那么扣去不可经过的节点，题目转化为在该有向图任意寻找一条长度为$~n~$的链。通过$~\text{DFS}~$寻找环，如果无环，则在$~\text{DAG}~$上$~\text{DP}~$，总时间复杂度为$~O(n+\sum s)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ACAM</span> &#123;</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> maxs = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> ch_size = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">size_t</span> next[ch_size], fail, to, dis; <span class="keyword">bool</span> end, vis; &#125; trie[maxs];</span><br><span class="line"><span class="keyword">size_t</span> size, n;</span><br><span class="line"><span class="keyword">char</span> res[maxs];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; <span class="built_in">memset</span>(trie, <span class="number">0</span>, <span class="keyword">sizeof</span> (trie)); size = <span class="number">1</span>, res[n] = <span class="string">'\0'</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> str[], <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != len; ++i) &#123;</span><br><span class="line"><span class="keyword">size_t</span> ch = str[i] - <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span> (!trie[cur].next[ch]) trie[cur].next[ch] = size++;</span><br><span class="line">cur = trie[cur].next[ch];</span><br><span class="line">&#125;</span><br><span class="line">trie[cur].end = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">size_t</span>&gt; que;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (trie-&gt;next[i]) que.emplace(trie-&gt;next[i]);</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = que.front();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].next[i]) &#123;</span><br><span class="line">trie[trie[cur].next[i]].fail = trie[trie[cur].fail].next[i];</span><br><span class="line">que.emplace(trie[cur].next[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">trie[cur].next[i] = trie[trie[cur].fail].next[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">trie[cur].end |= trie[trie[cur].fail].end;</span><br><span class="line">trie[cur].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">trie[<span class="number">0</span>].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">size_t</span> cur = <span class="number">0</span>, <span class="keyword">size_t</span> index = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index == n) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (~trie[cur].to) &#123;</span><br><span class="line">res[index++] = <span class="string">'a'</span> + trie[cur].to;</span><br><span class="line"><span class="keyword">return</span> dfs1(trie[cur].next[trie[cur].to], index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].vis) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">trie[cur].vis = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (!trie[trie[cur].next[i]].end) &#123;</span><br><span class="line">res[index] = <span class="string">'a'</span> + i;</span><br><span class="line"><span class="keyword">if</span> (dfs1(trie[cur].next[trie[cur].to = i], index + <span class="number">1</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> trie[cur].to = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">size_t</span> dfs2(<span class="keyword">size_t</span> cur = <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (trie[cur].dis) <span class="keyword">return</span> trie[cur].dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != ch_size; ++i) <span class="keyword">if</span> (!trie[trie[cur].next[i]].end)</span><br><span class="line">trie[cur].dis = max(trie[cur].dis, dfs2(trie[cur].next[i]));</span><br><span class="line"><span class="keyword">return</span> ++trie[cur].dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">route</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>, cur = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != ch_size; ++j) <span class="keyword">if</span> (i + trie[trie[cur].next[j]].dis &gt;= n) &#123;</span><br><span class="line">res[i] = <span class="string">'a'</span> + j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; acam;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">size_t</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; acam.n &gt;&gt; m;</span><br><span class="line">acam.init();</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">acam.insert(str.data(), str.size());</span><br><span class="line">&#125;</span><br><span class="line">acam.build_fail();</span><br><span class="line"><span class="keyword">if</span> (!acam.dfs1()) &#123;</span><br><span class="line">assert(acam.dfs2() &gt; acam.n);</span><br><span class="line">acam.route();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; acam.res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-赛尔逵传说"><a href="#C-赛尔逵传说" class="headerlink" title="C. 赛尔逵传说"></a>C. 赛尔逵传说</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>打怪兽。怪兽血量为$~d~$，攻击力为$~x~$，自己攻击力为$~k~$。同时可以嗑最多$~c~$次$~\text{buff}~$，使得下一次攻击力增加$~k~$，随后失效。怪物轮流上，自己先攻击，问最少损失的血量。<br>数据范围$~1\leq n\leq10^5,~1\leq k,c\leq10^6,~1\leq d,x\leq10^6~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>在不考虑$~\text{buff}~$的条件下，对付每个怪兽需要受到的攻击次数为$~\lfloor\frac{d-1}{k}\rfloor~$，而每层$~\text{buff}~$可以使得该次数减$~1~$。于是对于怪兽的攻击力$~x~$排序后模拟即可，总时间复杂度为$~O(n\log n + c)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> n, k, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; c;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;&gt; monster(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; m : monster) &#123;</span><br><span class="line"><span class="keyword">size_t</span> d, x;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; d &gt;&gt; x;</span><br><span class="line">m = pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;(x, (d - <span class="number">1</span>) / k);</span><br><span class="line">&#125;</span><br><span class="line">sort(monster.begin(), monster.end());</span><br><span class="line">reverse(monster.begin(), monster.end());</span><br><span class="line"><span class="keyword">uint64_t</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> m : monster) &#123;</span><br><span class="line"><span class="keyword">size_t</span> cur = min(c, m.second);</span><br><span class="line">c -= cur;</span><br><span class="line">res += m.first * <span class="keyword">uint64_t</span>(m.second - cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-碟中谍"><a href="#D-碟中谍" class="headerlink" title="D. 碟中谍"></a>D. 碟中谍</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个通道，上下侧为$~y=w~$和$~y=0~$，左右侧为$~x=+\infty~$和$~x=-\infty~$。同时平面上有$~n~$个圆形障碍物，坐标为$~(x,y)~$，半径为$~r~$。自己也是圆形，问最大的半径使得可以从左边移动至右边。<br>数据范围$~1\leq T\leq100,~1\leq 2\leq10^5,~0\leq n\leq10^3,~-10^5\leq x\leq10^5,~0\leq y\leq w,~1\leq r\leq10^5~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>假设当前自己的半径为$~R~$。则可以把上下侧改为$~y=w-R~$和$~y=R~$，每个圆的半径都增加$~R~$。那么此时能否通过等价于是否存在一条无半径路径穿越这个通道，等价于这些圆是否将上下侧连通。那么本题可以转化为最短路问题，路径的长度定义为路径上边的长度的最大值，边的长度定义为两个圆的距离。用$~\text{Dijstra}~$算法，总时间复杂度为$~O(Tn^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> inf = <span class="number">1e18</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span> <span class="keyword">double</span> x, y, r; &#125; circle[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">dis</span><span class="params">(<span class="keyword">const</span> Circle&amp; c1, <span class="keyword">const</span> Circle&amp; c2)</span> </span>&#123; <span class="keyword">return</span> max(<span class="number">0.0</span>, hypot(c1.x - c2.x, c1.y - c2.y) - c1.r - c2.r); &#125;</span><br><span class="line"><span class="keyword">double</span> cost[maxn][maxn], res[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%u"</span>, &amp;w, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;circle[i].x, &amp;circle[i].y, &amp;circle[i].r);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != n; ++j) cost[i][j] = dis(circle[i], circle[j]);</span><br><span class="line">cost[n + <span class="number">1</span>][n + <span class="number">1</span>] = cost[n][n] = <span class="number">0</span>;</span><br><span class="line">cost[n + <span class="number">1</span>][n] = cost[n][n + <span class="number">1</span>] = w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line">cost[n + <span class="number">1</span>][i] = cost[i][n + <span class="number">1</span>] = max(<span class="number">0.0</span>, circle[i].y - circle[i].r);</span><br><span class="line">cost[n][i] = cost[i][n] = max(<span class="number">0.0</span>, w - circle[i].y - circle[i].r);</span><br><span class="line">&#125;</span><br><span class="line">n += <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) res[i] = inf;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, n);</span><br><span class="line">res[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> next = n - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (next != n - <span class="number">2U</span>) &#123;</span><br><span class="line">vis[next] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">double</span> cur = inf;</span><br><span class="line"><span class="keyword">size_t</span> last = next;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (!vis[i]) <span class="keyword">if</span> ((res[i] = min(res[i], max(res[last], cost[last][i]))) &lt; cur) next = i, cur = res[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6f\n"</span>, res[n - <span class="number">2</span>] / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-只有一端开口的瓶子"><a href="#E-只有一端开口的瓶子" class="headerlink" title="E. 只有一端开口的瓶子"></a>E. 只有一端开口的瓶子</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>现在有一个$~1,2,\dots,n~$的全排列构成的序列和$~k~$个空的栈。可以有如下三种操作：把当前序列的头部放入第$~p~$个栈的顶部；把第$~p~$个栈的顶部放入新序列的尾部；把第$~p~$个栈的顶部放入第$~q~$个栈的顶部。最终要使得新序列升序，即为$~1,2,\dots,n~$。先给定$~T~$组全排列，问这些全排列分别至少需要准备多少个栈才能完成升序操作。<br>数据范围$~1\leq T\leq100,~1\leq n\leq10^5~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现答案不会大于$~2~$，那么只需要判断答案是否为$~1~$即可。线性栈模拟，总时间复杂度为$~O(Tn)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">size_t</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">size_t</span>&gt; sta;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> p;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">sta.emplace(p);</span><br><span class="line"><span class="keyword">while</span> (!sta.empty() &amp;&amp; sta.top() == next) &#123;</span><br><span class="line">sta.pop();</span><br><span class="line">++next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (sta.empty() ? <span class="number">1</span> : <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-风王之瞳"><a href="#F-风王之瞳" class="headerlink" title="F. 风王之瞳"></a>F. 风王之瞳</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>计算长宽为$~n,m~$的正方形网格图有多少个格点正方形。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不妨设$~n\leq m~$。先考虑对于边长为$~k\leq n~$的正方形，顶点都落在该正方形上的格点正方形有$~k~$个。而这样的正方形有$~(n-k+1)(m-k+1)~$个。于是答案为</p><script type="math/tex; mode=display">\sum_{k=1}^{n}k(n-k+1)(m-k+1)=\frac{n(n+1)(n+2)(2m-n+1)}{12}</script><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">if</span> (n &gt; m) swap(n, m);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n * (n + <span class="number">1</span>) * (n + <span class="number">2</span>) / <span class="number">6</span> * (<span class="number">2</span> * m - n + <span class="number">1</span>) / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="G-神圣的-F2-连接着我们"><a href="#G-神圣的-F2-连接着我们" class="headerlink" title="G. 神圣的 F2 连接着我们"></a>G. 神圣的 F2 连接着我们</h3><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个二分图，两边的编号都是$~1,2,\dots,n~$，左边有$~p~$个关键点$~x_1,x_2,\dots,x_p~$，右边有$~q~$个关键点$~y_1,y_2,\dots,y_q~$。还有$~m~$组双向边，权值为$~w~$，将左边编号在$~[a,b]~$的点于右边编号在$~[c,d]~$的点相连，注意同一侧的点之间是没有边的。需要所有左边的关键点$~x~$到右边最近的$~y~$的距离，或者无法连通。<br>数据范围$~1\leq n,m,p,q\leq10^5,~1\leq a\leq b\leq n,~1\leq c\leq d\leq n,~1\leq w\leq10^9~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>显然是多源最短路问题，关键在于如何建图，如果暴力建图那么边数是$~O(nm)~$的。对于每侧的点都建立两棵线段树：在线段树一上，所有的父子对都连一条父亲指向儿子的权值为$~0~$的边；在线段树二上，所有的父子对都连一条儿子指向父亲的权值为$~0~$的边；在两颗线段树对应的点对上，连一条线段树一上节点指向线段树二上节点的权值为$~0~$的边。对于题目给出的边，将区间$~[a,b]~$和$~[c,d]~$在两边的线段树上分解，再给图增加两个中间点代表从左到右和从右到左的边。连接的边有：在左二树分解到的节点指向一号中间点的权值为$~w~$的边；一号中间点指向在右一树分解到的节点的权值为$~0~$的边；在右二树上分解到的节点指向二号中间点的权值为$~w~$的边；二号中间点指向在左一树分解到的节点的权值为$~0~$的边。然后跑堆优化的$~\text{Dijstra}~$多源最短路，只要在最开始将所有的$~y~$入堆，剩下的步骤和单源最短路一致。总时间复杂度为$~O(m\log^2n)~$，空间复杂度为$~O(n+m\log n)~$。注意本题会卡时间常数和<strong>空间常数</strong>。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (lson ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson, side</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson, side</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size_t uint32_t</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> zero = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">size_t</span> pos[<span class="number">2</span>][maxn], graph_size, seg[<span class="number">2</span>][maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">uint64_t</span> dis; <span class="keyword">size_t</span> side, index; &#125; node[maxn * <span class="number">10</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">size_t</span>, <span class="keyword">size_t</span>&gt;&gt; dir[maxn * <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">size_t</span> begin, <span class="keyword">size_t</span> end, <span class="keyword">size_t</span> index, <span class="keyword">size_t</span> side)</span> </span>&#123;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].side = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].side = side;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].index = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].index = index;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].dis = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].dis = <span class="number">-1</span>;</span><br><span class="line">dir[graph_size &lt;&lt; <span class="number">1</span>].emplace_back(graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">seg[side][index] = graph_size++;</span><br><span class="line"><span class="keyword">if</span> (begin + <span class="number">1U</span> == end) &#123;</span><br><span class="line">pos[side][end] = index;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">build(LEFT);</span><br><span class="line">build(RIGHT);</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span>].emplace_back(seg[side][lson] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span>].emplace_back(seg[side][rson] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][lson] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">dir[seg[side][rson] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>, zero);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">size_t</span> left, <span class="keyword">size_t</span> right, <span class="keyword">size_t</span> begin, <span class="keyword">size_t</span> end, <span class="keyword">size_t</span> index, <span class="keyword">size_t</span> side, <span class="keyword">size_t</span> w)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt;= end || right &lt;= begin) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (left &lt;= begin &amp;&amp; right &gt;= end) &#123;</span><br><span class="line">dir[seg[side][index] &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].emplace_back(graph_size &lt;&lt; <span class="number">1</span> ^ side, w);</span><br><span class="line">dir[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span> ^ side].emplace_back(seg[side][index] &lt;&lt; <span class="number">1</span>, zero);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">link(SEG, LEFT, w);</span><br><span class="line">link(SEG, RIGHT, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">size_t</span> n, m, p, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; p &gt;&gt; q;</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">build(<span class="number">0</span>, n, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> a, b, c, d, w;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; w;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].side = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].side = <span class="number">-1</span>;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].index = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].index = <span class="number">-1</span>;</span><br><span class="line">node[graph_size &lt;&lt; <span class="number">1</span>].dis = node[graph_size &lt;&lt; <span class="number">1</span> ^ <span class="number">1</span>].dis = <span class="number">-1</span>;</span><br><span class="line">link(--a, b, <span class="number">0</span>, n, <span class="number">1</span>, <span class="number">0</span>, w);</span><br><span class="line">link(--c, d, <span class="number">0</span>, n, <span class="number">1</span>, <span class="number">1</span>, w);</span><br><span class="line">++graph_size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; x(p);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; xx : x) <span class="built_in">cin</span> &gt;&gt; xx;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;, greater&lt;pair&lt;<span class="keyword">uint64_t</span>, <span class="keyword">size_t</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">que.emplace(<span class="keyword">uint64_t</span>(zero), seg[<span class="number">1</span>][pos[<span class="number">1</span>][y]] &lt;&lt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> dis = que.top().first;</span><br><span class="line"><span class="keyword">size_t</span> cur = que.top().second;</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (~node[cur].dis) <span class="keyword">continue</span>;</span><br><span class="line">node[cur].dis = dis;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> next : dir[cur]) <span class="keyword">if</span> (!~node[next.first].dis) que.emplace(dis + next.second, next.first);</span><br><span class="line">dir[cur].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">uint64_t</span> res = zero;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> xx : x) res = max(res, node[seg[<span class="number">0</span>][pos[<span class="number">0</span>][xx]] &lt;&lt; <span class="number">1</span>].dis);</span><br><span class="line"><span class="keyword">if</span> (~res) <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"boring game"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="H-目标是成为数论大师"><a href="#H-目标是成为数论大师" class="headerlink" title="H. 目标是成为数论大师"></a>H. 目标是成为数论大师</h3><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问$~f(x)=\sqrt{ax}+b~$的点，保证存在且为整数。输出格式为升序不重。<br>数据范围$~1\leq T\leq100,~-10^3\leq a,b\leq10^3~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>解二次方程，注意细节。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">int</span> x) &#123; <span class="keyword">if</span> ((<span class="keyword">int</span>)round(<span class="built_in">sqrt</span>(a * x)) + b == x) res.emplace_back(x); &#125;;</span><br><span class="line"><span class="keyword">int</span> delta = round(<span class="built_in">sqrt</span>(a * a + <span class="number">4</span> * a * b));</span><br><span class="line">add((a + <span class="number">2</span> * b - delta) / <span class="number">2</span>);</span><br><span class="line">add((a + <span class="number">2</span> * b + delta) / <span class="number">2</span>);</span><br><span class="line">sort(res.begin(), res.end());</span><br><span class="line">res.resize(unique(res.begin(), res.end()) - res.begin());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span> &lt;&lt; res.front();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i != res.size(); ++i) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="I-出给-paul-lu-的数数题"><a href="#I-出给-paul-lu-的数数题" class="headerlink" title="I. 出给 paul-lu 的数数题"></a>I. 出给 paul-lu 的数数题</h3><h3 id="题目大意-8"><a href="#题目大意-8" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>一个$~n\times n~$的表上每个位置的值只能取$~[1,k]~$。定义一个位置为$~\text{bi}~$点当且仅当它严格大于它所处的行与列的所有其它的值。记$~B_i\in[0,n^2]~$为恰好有$~i~$个$~\text{bi}~$点的方案数。计算$~\sum_{i=0}^{n^2}{i^2\cdot B_i}~$。<br>数据范围$~1\leq T\leq20,~1\leq n,k\leq200~$。</p><h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对任意方案$~A~$，用$~f(A)~$表示该方案下的$~\text{bi}~$点的数量，则有</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_Af^2(A)</script><p>用$~S(A)~$表示该方案下的所有$~\text{bi}~$点的集合，则</p><script type="math/tex; mode=display">f(A)=\sum_{p\in S(A)}1</script><p>于是</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_A\sum_{p_1\in S(A)}\sum_{p_2\in S(A)}1</script><p>对于两点$~p_1,p_2~$（可重），用$~g(p_1,p_2)~$表示它们均为$~\text{bi}~$的方案数，则可以交换求和顺序，得到</p><script type="math/tex; mode=display">\sum_{i=0}^{n^2}{i^2\cdot B_i}=\sum_{p_1}\sum_{p_2}g(p_1,p_2)</script><p>当$~p_1,p_2~$不重合但同行或者同列时，显然有$~g=0~$。不难发现$~g~$其实只有$~2~$种非平凡取值，即$~p_1,p_2~$重合时和$~p_1,p_2~$不重合时。那么令$~g_0=g((1,1),(1,1)),~g_1=g((1,1),(2,2))~$，则有</p><script type="math/tex; mode=display">g_0=k^{(n-1)^2}\sum_{i=0}^{k-1}i^{2(n-1)}                                           \\g_1=k^{(n-2)^2}\sum_{i=0}^{k-1}\sum_{j=0}^{k-1}\min(i,j)^{2(n-1)}\max(i,j)^{2(n-2)} \\\sum_{i=0}^{n^2}{i^2\cdot B_i}=n^2g_0+n^2(n-1)^2g_1                                 \\</script><p>剩下的计算步骤是十分简单的。</p><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint64_t</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">auto</span> sub = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a &lt; b ? a - b + mod : a - b; &#125;;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> sub(a, mod - b); &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;] (<span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">uint64_t</span>&amp; b) &#123; <span class="keyword">return</span> a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> fpow = [&amp;] (<span class="keyword">uint64_t</span> a, <span class="keyword">uint64_t</span> n) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) ret = mul(ret, a);</span><br><span class="line">a = mul(a, a);</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">uint64_t</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="keyword">uint64_t</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">uint64_t</span> i = <span class="number">0</span>; i != k; ++i) cal1 = add(cal1, fpow(i, (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>));</span><br><span class="line">cal1 = mul(cal1, fpow(k, (n - <span class="number">1</span>) * (n - <span class="number">1</span>)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">uint64_t</span> i = <span class="number">0</span>; i != k; ++i) <span class="keyword">for</span> (<span class="keyword">uint64_t</span> j = <span class="number">0</span>; j != k; ++j)</span><br><span class="line">cal2 = add(cal2, mul(fpow(min(i, j), (n - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>), fpow(max(i, j), (n - <span class="number">2</span>) &lt;&lt; <span class="number">1</span>)));</span><br><span class="line">cal2 = mul(mul(cal2, (n - <span class="number">1</span>) * (n - <span class="number">1</span>)), fpow(k, (n - <span class="number">2</span>) * (n - <span class="number">2</span>)));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(add(cal1, cal2), n * n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-金色传说"><a href="#J-金色传说" class="headerlink" title="J. 金色传说"></a>J. 金色传说</h2><h3 id="题目大意-9"><a href="#题目大意-9" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>定义一个长度为$~n~$的字符串表达式合法，当且仅当它仅由$~0,1,\dots,9~$，以及$~+~$或$~-~$组成，且首尾不能是运算符，运算符不相邻（注意允许数字有前导零）。问所有长度为$~n~$的合法字符串表达式的值之和。<br>数据范围$~1\leq T\leq100,~1\leq n\leq5\times10^5~$。</p><h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>设答案序列为$~{f_n}~$，前几项$~f_0=0,~f_1=45,~f_2=4950,\dots~$，其生成多项式为</p><script type="math/tex; mode=display">F(x)=\sum_{n=0}^{\infty}f_nx^n</script><p>准备工作先考虑序列$~{g_n:g_n=10^n}~$，易得其生成多项式为</p><script type="math/tex; mode=display">G(x)=~\sum_{n=0}^{\infty}10^nx^n=\frac{1}{1-10x}</script><p>考虑仅有数字组成的字符串，对应的答案序列为$~{h_n:h_n=\frac{10^n(10^n-1)}{2}}~$，其生成多项式可以推出为</p><script type="math/tex; mode=display">H(x)=\sum_{n=0}^{\infty}h_nx^n=\frac{1}{2}\left(\frac{1}{1-100x}-\frac{1}{1-10x}\right)</script><p>计算$~f_n~$。若没有运算符，则对$~f_n~$为$~h_n~$。若有运算符，考虑最后一个数字的长度$~k~$，满足$~1\leq k\leq n-2~$。此时最后一个数字有$~g_k~$种取法，运算符有$~2~$种取法。注意到此时由于正负号相消，最后一个数字对于$~f_n~$的贡献为$~0~$，于是剩下的贡献为$~2g_kf_{n-1-k}~$。即</p><script type="math/tex; mode=display">\begin{aligned}f_n &=h_n+2\sum_{k=1}^{n-2}g_kf_{n-1-k}             \\    &=h_n-2f_{n-1-k}+2\sum_{k=0}^{n-1}g_kf_{n-1-k}  \\\end{aligned}</script><p>这是一个卷积式，它对于$n\geq1~$均满足。于是对于$~n=1,2,\dots~$，等式两边乘以$~x^{n-1}~$后累加，可以得出生成多项式的等式</p><script type="math/tex; mode=display">\frac{F(x)-F(0)}{x}=\frac{H(x)-H(0)}{x}-2F(x)+2G(x)F(x)</script><p>可以算出</p><script type="math/tex; mode=display">F(x)=\frac{1}{1-110x+980x^2+2000x^3}</script><p>于是对于$~n\geq3~$，有线性递推式</p><script type="math/tex; mode=display">f_n=110f_{n-1}-980f_{n-2}-2000f_{n-3}</script><p>预处理或者矩阵快速幂均可通过此题，时间复杂度分别为$~O(n+T)~$和$~O(T\log n)~$。</p><h3 id="代码（-O-T-log-n-）"><a href="#代码（-O-T-log-n-）" class="headerlink" title="代码（$~O(T\log n)~$）"></a><strong>代码（$~O(T\log n)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">size_t</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;] (<span class="keyword">const</span> <span class="keyword">size_t</span>&amp; a, <span class="keyword">const</span> <span class="keyword">size_t</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mat_mul = [&amp;] (<span class="keyword">size_t</span> A[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">size_t</span> B[<span class="number">3</span>][<span class="number">3</span>], <span class="keyword">size_t</span> C[<span class="number">3</span>][<span class="number">3</span>]) &#123; <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j) <span class="keyword">for</span> (<span class="keyword">size_t</span> k = <span class="number">0</span>; k != <span class="number">3</span>; ++k) C[i][j] = add(C[i][j], mul(A[i][k], B[k][j])); &#125;;</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, res[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span> &#125; &#125;, bas[<span class="number">3</span>][<span class="number">3</span>] = &#123; &#123; <span class="number">110</span>, mod - <span class="number">980</span>, mod - <span class="number">2000</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, &#125;, &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span> &#125; &#125;, tmp[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">cin</span> &gt;&gt; n; n; n &gt;&gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">mat_mul(res, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(res, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">mat_mul(bas, bas, tmp);</span><br><span class="line"><span class="built_in">memcpy</span>(bas, tmp, <span class="keyword">sizeof</span> (tmp));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mul(add(mul(res[<span class="number">2</span>][<span class="number">0</span>], <span class="number">110</span>), res[<span class="number">2</span>][<span class="number">1</span>]), <span class="number">45</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-多项式求导"><a href="#K-多项式求导" class="headerlink" title="K. 多项式求导"></a>K. 多项式求导</h2><h3 id="题目大意-10"><a href="#题目大意-10" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>多项式求导。</p><h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; ~i; --i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a_(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) a_[i - <span class="number">1</span>] = mul(a[i], i);</span><br><span class="line">a = a_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="L-旅行的意义"><a href="#L-旅行的意义" class="headerlink" title="L. 旅行的意义"></a>L. 旅行的意义</h2><h3 id="题目大意-11"><a href="#题目大意-11" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>地图是个$~\text{DAG}~$，起点为$~1~$。每到一个新的点会停留$~1~$天，然后等概率的选择再留$~1~$天或者去下一个可以到的点，路程花费$~1~$天。至多停留$~2~$天，然后必须等概率的选择下一个可以到的点，如果不能继续则停止。问总天数的期望。<br>数据范围$~1\leq T\leq10,~1\leq n\leq10^5,~0\leq m\leq10^5~$</p><h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸的$~\text{DAG}~$上概率$~\text{DP}~$，代码使用的拓扑排序代替记忆化$~\text{DFS}~$。<strong>注意快读！</strong></p><h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">auto</span> add = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod; &#125;;</span><br><span class="line"><span class="keyword">auto</span> mul = [&amp;mod] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; a, <span class="keyword">const</span> <span class="keyword">int</span>&amp; b) &#123; <span class="keyword">return</span> <span class="number">1L</span>L * a * b % mod; &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; inv(<span class="number">100002</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100001</span>; ++i) inv[i] = mul(inv[mod % i], mod - mod / i);</span><br><span class="line"><span class="keyword">size_t</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt;&gt; to(n), from(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">size_t</span>&gt; deg(n, <span class="number">0</span>), topo;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(n, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">size_t</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">--u;</span><br><span class="line">--v;</span><br><span class="line">to[u].emplace_back(v);</span><br><span class="line">from[v].emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> u = <span class="number">0</span>; u != n; ++u) <span class="keyword">if</span> (!(deg[u] = to[u].size())) &#123;</span><br><span class="line">res[u] = <span class="number">2</span>;</span><br><span class="line">topo.emplace_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != topo.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">auto</span>&amp; u = topo[i];</span><br><span class="line"><span class="keyword">if</span> (!to[u].empty()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : to[u]) res[u] = add(res[u], res[v]);</span><br><span class="line">res[u] = mul(res[u], inv[to[u].size()]);</span><br><span class="line">res[u] = add(res[u], inv[to[u].size() + <span class="number">1</span>] + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : from[u]) <span class="keyword">if</span> (!--deg[v]) topo.emplace_back(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.front() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/102174&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019BITCPC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-两只脑斧&quot;&gt;&lt;a href=&quot;#A-两只脑斧&quot; class=&quot;he
      
    
    </summary>
    
      <category term="刷题笔记" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 542 [Alex Lopashev Thanks-Round] (Div. 2)</title>
    <link href="http://yoursite.com/2019/04/18/Codeforces%20Round%20542%20%5BAlex%20Lopashev%20Thanks-Round%5D%20(Div.%202)/"/>
    <id>http://yoursite.com/2019/04/18/Codeforces Round 542 [Alex Lopashev Thanks-Round] (Div. 2)/</id>
    <published>2019-04-18T10:15:18.855Z</published>
    <updated>2019-04-18T10:27:32.608Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1130" target="_blank" rel="noopener">Codeforces Round #542 [Alex Lopashev Thanks-Round] (Div. 2)</a></p><h2 id="A-Be-Positive"><a href="#A-Be-Positive" class="headerlink" title="A. Be Positive"></a>A. Be Positive</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a, neg = <span class="number">0</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a &lt; <span class="number">0</span>) ++neg;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span>) ++pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (neg * <span class="number">2</span> &gt;= n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pos * <span class="number">2</span> &gt;= n) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Two-Cakes"><a href="#B-Two-Cakes" class="headerlink" title="B. Two Cakes"></a>B. Two Cakes</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个长度为$~2n~$的序列，数字$~1,2,\dots,n~$各出现$~2~$次。有$~2~$人初始再序列的最左边，他们分别要依次拿到$~1,2,\dots,n~$，且每个数字只能被拿一次，所以结束时刚好拿完。问这$~2~$人移动距离之和的最小值。<br>数据范围$~1\leq n\leq10^5~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。见代码。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; pos(n + <span class="number">1</span>);</span><br><span class="line">pos.front() = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n * <span class="number">2</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">pos[a].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i)</span><br><span class="line">res += min(<span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">0</span>] - pos[i][<span class="number">0</span>]) + <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">1</span>] - pos[i][<span class="number">1</span>]), <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">0</span>] - pos[i][<span class="number">1</span>]) + <span class="built_in">abs</span>(pos[i + <span class="number">1</span>][<span class="number">1</span>] - pos[i][<span class="number">0</span>]));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Connect"><a href="#C-Connect" class="headerlink" title="C. Connect"></a>C. Connect</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给一个地图由土和水组成，起点终点均在土上，只能在土上移动。可以至多建$~1~$个隧道连接$~2~$个土，欧式距离的平方。问从起点到终点的最小花费。<br>数据范围$~1\leq n\leq50~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>爆搜$~\text{BFS}~$或者$~\text{DFS}~$得到起点和终点的联通块，然后暴力枚举隧道的起点和终点即可。总时间复杂度为$~O(n^4)~$。<br>注意到在爆搜过程中，可以不枚举终点纵坐标$~y_2~$，只需要使得$~(y-y_1 )^2~$最小，这一步可以预处理，所以总时间复杂度可以降为$~O(n^3)~$。</p><h3 id="代码（-O-n-4-）"><a href="#代码（-O-n-4-）" class="headerlink" title="代码（$~O(n^4)~$）"></a><strong>代码（$~O(n^4)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> cell[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="built_in">memset</span>(cell, <span class="string">'1'</span>, <span class="keyword">sizeof</span> (cell));</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;, dis[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dis));</span><br><span class="line"><span class="keyword">int</span> n, r1, c1, r2, c2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r1 &gt;&gt; c1 &gt;&gt; r2 &gt;&gt; c2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; cell[i][j];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line"><span class="keyword">auto</span> push = [&amp;] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y) &#123; cell[x][y] = <span class="string">'1'</span>; que.emplace_back(x, y); &#125;;</span><br><span class="line">push(r2, c2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) dis[X][y] = min(dis[X][y], (Y - y) * (Y - y));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">que.clear();</span><br><span class="line">push(r1, c1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) res = min(res, (X - x) * (X - x) + dis[x][Y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码（-O-n-3-）"><a href="#代码（-O-n-3-）" class="headerlink" title="代码（$~O(n^3)~$）"></a><strong>代码（$~O(n^3)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> cell[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span> &#125;, dis[<span class="number">52</span>][<span class="number">52</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cell, <span class="string">'1'</span>, <span class="keyword">sizeof</span> (cell));</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> (dis));</span><br><span class="line"><span class="keyword">int</span> n, r1, c1, r2, c2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r1 &gt;&gt; c1 &gt;&gt; r2 &gt;&gt; c2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="built_in">cin</span> &gt;&gt; cell[i][j];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; que;</span><br><span class="line"><span class="keyword">auto</span> push = [&amp;] (<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y) &#123; cell[x][y] = <span class="string">'1'</span>; que.emplace_back(x, y); &#125;;</span><br><span class="line">push(r2, c2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1</span>; y &lt;= n; ++y) dis[X][y] = min(dis[X][y], (Y - y) * (Y - y));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = INT_MAX;</span><br><span class="line">que.clear();</span><br><span class="line">push(r1, c1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i != que.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> X = que[i].first;</span><br><span class="line"><span class="keyword">int</span> Y = que[i].second;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; ++x) res = min(res, (X - x) * (X - x) + dis[x][Y]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> j = <span class="number">0</span>; j != <span class="number">4U</span>; ++j) <span class="keyword">if</span> (cell[X + dx[j]][Y + dy[j]] == <span class="string">'0'</span>) push(X + dx[j], Y + dy[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D1-Toy-Train-Simplified"><a href="#D1-Toy-Train-Simplified" class="headerlink" title="D1. Toy Train (Simplified)"></a>D1. Toy Train (Simplified)</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$个车站围成环，以及$~m~$颗糖果的初始位置和目标位置。火车每次到站至多只能装$~1~$颗糖果，但是可以卸下若干糖果。问分别以每个站为起点，要将所有糖果送到目标地点，火车的最少行驶距离。<br>数据范围$~2\leq n\leq100,~1\leq m\leq200~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑第$~i~$站，一共有$~x~$颗糖果以它为起点，且最近的终点为$~y~$，这一步可以在$~O(m)~$内处理完。那么火车第$~1~$次到达该站时，至少还要行驶$~(x-1)\cdot n+y~$。而每次到达一个新站，取该站目标地点最远的那颗糖果这样就能得到最小距离的方案。按题意枚举起点以及起点到所有站的距离，总时间复杂度为$~O(n^2+m)~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis(n + <span class="number">1</span>, <span class="number">0</span>), cnt(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">++cnt[a];</span><br><span class="line">dis[a] = min(dis[a], a &gt; b ? b - a : b - a - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span> (cnt[j])</span><br><span class="line">res = max(res, (i &gt; j ? j - i + n : j - i) + cnt[j] * n + dis[j]);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D2-Toy-Train"><a href="#D2-Toy-Train" class="headerlink" title="D2. Toy Train"></a>D2. Toy Train</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>上一题的基础上增加数据范围$~2\leq n\leq5000,~1\leq m\leq20000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>上一题的$~O(n^2+m)~$做法依然能过。但是注意到在计算第$~1~$个位置的答案时，已经处理的大部分区间的最小值。那么只需要记录前缀$~\min~$和后缀$~\min~$，这样每个位置的答案可以在$~O(1)~$内求出，总时间复杂度为$~O(n+m)~$。</p><h3 id="代码（-O-n-m-）"><a href="#代码（-O-n-m-）" class="headerlink" title="代码（$~O(n+m)~$）"></a><strong>代码（$~O(n+m)~$）</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis(n + <span class="number">1</span>, <span class="number">0</span>), cnt(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">++cnt[a];</span><br><span class="line">dis[a] = min(dis[a], a &gt; b ? b - a : b - a - n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(n, -n), suf(n + <span class="number">2</span>, -n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != n; ++i) &#123;</span><br><span class="line">pre[i] = pre[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[i]) pre[i] = max(pre[i], cnt[i] * n + dis[i] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i; --i) &#123;</span><br><span class="line">suf[i] = suf[i + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cnt[i]) suf[i] = max(suf[i], cnt[i] * n + dis[i] + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(pre[i - <span class="number">1</span>] + n - i, suf[i] - i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Wrong-Answer"><a href="#E-Wrong-Answer" class="headerlink" title="E. Wrong Answer"></a>E. Wrong Answer</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>要计算一个序列的</p><script type="math/tex; mode=display">\max_{0\leq l\leq r< n}{(r-l+1)\sum_{i=l}^{r}{a_i}}</script><p>现给出一个假算法的伪代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function find_answer(n, a)</span><br><span class="line"># Assumes n is an integer between 1 and 2000, inclusive</span><br><span class="line"># Assumes a is a list containing n integers: a[0], a[1], ..., a[n-1]</span><br><span class="line">res = 0</span><br><span class="line">cur = 0</span><br><span class="line">k = -1</span><br><span class="line">for i = 0 to i = n-1</span><br><span class="line">cur = cur + a[i]</span><br><span class="line">if cur &lt; 0</span><br><span class="line">cur = 0</span><br><span class="line">k = i</span><br><span class="line">res = max(res, (i-k)*cur)</span><br><span class="line">return res</span><br></pre></td></tr></table></figure></p><p>输出一个序列$~a_0,a_1,\dots,a_{n-1}~$满足正确算法得到的答案比假算法得到的答案恰好大$~k~$。<br>数据范围$~1\leq k\leq10^9,~1\leq n\leq2000,~{\mid a_i\mid}\leq10^6~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不妨令$~a_0=0,~a_i\geq 0,~\forall~i&gt;0,~S=\sum_{i&gt;0} a_i&gt;1~$。于是有$~k=n(S-1)-(n-1)S=S-n~$。令$~n=2000~$，于是$~S=k+2000~$，构造方法十分简单。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxa = <span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">k += maxn;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; maxn &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i != maxn; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (k &gt; maxa) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; maxa, k -= maxa;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; k, k = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #542 [Alex Lopashev Thanks-Round] (Div. 2)&lt;
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round 541 (Div. 2)</title>
    <link href="http://yoursite.com/2019/03/12/Codeforces%20Round%20541%20(Div.%202)/"/>
    <id>http://yoursite.com/2019/03/12/Codeforces Round 541 (Div. 2)/</id>
    <published>2019-03-12T05:49:45.902Z</published>
    <updated>2019-03-12T05:49:52.721Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1131" target="_blank" rel="noopener">Codeforces Round #541 (Div. 2)</a></p><h2 id="A-Sea-Battle"><a href="#A-Sea-Battle" class="headerlink" title="A. Sea Battle"></a>A. Sea Battle</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> w1, h1, w2, h2;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w1 &gt;&gt; h1 &gt;&gt; w2 &gt;&gt; h2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (w1 + h1 + h2 + <span class="number">2</span> &lt;&lt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Draw"><a href="#B-Draw" class="headerlink" title="B. Draw!"></a>B. Draw!</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">res += max(<span class="number">0</span>, min(a, b) - last);</span><br><span class="line">last = max(a, b) - (a != b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Birthday"><a href="#C-Birthday" class="headerlink" title="C. Birthday"></a>C. Birthday</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数子，要求排成一个环，使得相邻的差的绝对值之和最小。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>贪心。升序后奇项排一起偶项排一起。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n &amp; <span class="number">1</span> ? n - <span class="number">2</span> : n - <span class="number">1</span>; i != <span class="number">1</span>; i -= <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Gourmet-choice"><a href="#D-Gourmet-choice" class="headerlink" title="D. Gourmet choice"></a>D. Gourmet choice</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>由$~n+m~$个菜品，给出一个$~n\times m~$的矩阵表示相应的比较关系。输出根据这个矩阵的打分方式，满足矩阵的比较关系，且不同的分数数量最小。有可能输出不存在。<br>数据范围$~1\leq n,m\leq1000~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>拓扑排序。建图时需要注意如果$~a&gt;b~$且$~b=c~$，则需要增加$~a&gt;c~$。可以用$~\text{DSU}~$并查集和$~\text{bitset}~$来维护相等的联通块，这样建图的时间复杂度上限为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}})~$（不写按秩合并）。应该还有更优的建图方式，但上述做法能过，总时间复杂度为$~O(\frac{(n+m)^3\log n+m}{\text{bitset}}+(n+m)^2)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, deg[maxn], fa[maxn], res[maxn];</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxn&gt; mat[maxn], adj[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; toward[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">mat[fa[y] = x] |= mat[y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; now;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) adj[i] |= mat[find(j)];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j) <span class="keyword">if</span> (adj[i][j]) ++deg[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) <span class="keyword">if</span> (!deg[i]) now.push_back(i);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!now.empty()) &#123;</span><br><span class="line">cnt += now.size();</span><br><span class="line">topo.push_back(now);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; i : now) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != n + m; ++j)</span><br><span class="line"><span class="keyword">if</span> (adj[i][j]) <span class="keyword">if</span> (!--deg[j]) tmp.push_back(j);</span><br><span class="line">now = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cnt != n + m) <span class="built_in">exit</span>((<span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n + m; ++i) mat[fa[i] = i].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j != n + m; ++j) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&lt;'</span>) adj[j].<span class="built_in">set</span>(i);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'&gt;'</span>) adj[i].<span class="built_in">set</span>(j);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'='</span>) merge(i, j);</span><br><span class="line">&#125;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i) <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; j : topo[i]) res[j] = topo.size() - i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="built_in">cout</span> &lt;&lt; res[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != m; ++i) <span class="built_in">cout</span> &lt;&lt; res[i + n] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-String-Multiplication"><a href="#E-String-Multiplication" class="headerlink" title="E. String Multiplication"></a>E. String Multiplication</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>对于给定字符串$~s=\overline{s_1s_2\dots s_n}~$和$~t=\overline{t_1t_2\dots t_m}~$，定义$~s+t=\overline{s_1s_2\dots s_nt_1t_2\dots t_m}~$和$~s\cdot t=t+s_1+t+s_2+t+\dots+t+s_n+t~$。现给定字符串序列$~p_1,p_2,\dots,p_n~$，问$~(((p_1\cdot p_2)\cdot p3)\cdot\dots)\cdot p_n~$中最长的连续相同子序列长度。<br>数据范围$~\sum{\mid p\mid}\leq100000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>不难发现$~\cdot~$运算满足结合律，那么等价于询问$~p_1\cdot(p_2\cdot(\dots\cdot p_n))~$。直接线性模拟即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">strs.push(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">int</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>, res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch1 = now.front(), ch2 = now.back(), last = <span class="string">'$'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++cal1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch2) ++cal2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != last) cnt = <span class="number">0</span>;</span><br><span class="line">res = max(res, ++cnt);</span><br><span class="line">last = ch;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> check = res == (<span class="keyword">int</span>)now.size();</span><br><span class="line"><span class="keyword">while</span> (!strs.empty()) &#123;</span><br><span class="line">now = strs.top();</span><br><span class="line">strs.pop();</span><br><span class="line"><span class="keyword">if</span> (check) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp1 = <span class="number">0</span>, tmp2 = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)now.size(); ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp1;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal1 = tmp1 + (tmp1 + <span class="number">1</span>) * res;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = now.size() - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line"><span class="keyword">if</span> (now[i] == ch1) ++tmp2;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cal2 = tmp2 + (tmp2 + <span class="number">1</span>) * res;</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ch : now) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch != ch1) cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> tmp = max(tmp, ++cnt);</span><br><span class="line">&#125;</span><br><span class="line">res = max(res, tmp + (tmp + <span class="number">1</span>) * res);</span><br><span class="line">check = tmp == (<span class="keyword">int</span>)now.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ch1 == ch2) &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch1)) res = max(res, cal1 + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (~now.find(ch2)) res = max(res, cal2 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Asya-And-Kittens"><a href="#F-Asya-And-Kittens" class="headerlink" title="F. Asya And Kittens"></a>F. Asya And Kittens</h2><p>给定正整数$~n~$和$~n-1~$对$~x\not=y~$，满足$~1\leq x,y\leq n~$。需要找到一个全排列，初始每项均属于单独的区间。然后按顺序考虑$~(x,y)~$，$x~$所在的区间必须与$~y~$所在的区间相邻，然后将这两个区间合并，最终整个全排列均在一个区间之内。<br>数据范围$~2\leq n\leq150000~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>裸并查集。不写按秩合并的时间复杂度上限为$~O(n\log n)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150001</span>;</span><br><span class="line"><span class="keyword">int</span> fa[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : (fa[x] = find(fa[x])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x = find(x);</span><br><span class="line">y = find(y);</span><br><span class="line">sons[fa[y] = x].push_back(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; u &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; v : sons[u]) dfs(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) fa[i] = i;</span><br><span class="line"><span class="keyword">while</span> (--n) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">merge(x, y);</span><br><span class="line">&#125;</span><br><span class="line">dfs(find(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Most-Dangerous-Shark"><a href="#G-Most-Dangerous-Shark" class="headerlink" title="G. Most Dangerous Shark"></a>G. Most Dangerous Shark</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给出$~m~$个多米诺骨牌的给高度$~a~$和花费$~c~$。问将所有多米诺骨牌推倒的最小总花费。<br>数据范围$~1\leq m\leq10^7,~1\leq a\leq m,~1\leq c\leq100000~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>用$~left_i~$表示将$~i~$向左推，恰好推倒至$~left_i~$。那么不难发现所有的区间$~I_i=[left_i,i]~$均互相包含或者不交，所以可以通过栈结构来线性求出。同理用$~right_i~$表示将$~i~$向右推，恰好推倒至$~right_i~$。接下来动态规划，用$~dp_i~$表示将前$~i~$个都推倒的最小花费，则有转移式</p><script type="math/tex; mode=display">dp_i=\min\lbrace dp_j+c_i:left_i\leq j< i\rbrace\cup\lbrace dp_{j-1}+c_j:j< i\leq right_j\rbrace</script><p>整个过程均可用栈维护，总时间复杂度为$~O(m)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; blocks(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(m + <span class="number">1</span>), left(m + <span class="number">1</span>), right(m + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; c(m + <span class="number">1</span>), dp(m + <span class="number">1</span>), minn(m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; block : blocks) &#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">block.resize(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : block) <span class="built_in">cin</span> &gt;&gt; domi.second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q, index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> id, mul;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; id &gt;&gt; mul;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; domi : blocks[id - <span class="number">1</span>]) &#123;</span><br><span class="line">++index;</span><br><span class="line">a[index] = domi.first;</span><br><span class="line">c[index] = domi.second * mul;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta1;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i; --i) &#123;</span><br><span class="line"><span class="keyword">for</span> (right[i] = min(m, i + a[i] - <span class="number">1</span>); !sta1.empty() &amp;&amp; right[i] &gt;= sta1.top(); sta1.pop())</span><br><span class="line">right[i] = max(right[i], right[sta1.top()]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!sta1.empty()) sta1.pop();</span><br><span class="line">dp.front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; sta2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">minn[i] = dp[left[i] = max(<span class="number">0</span>, i - a[i])];</span><br><span class="line"><span class="keyword">for</span> (left[i] = max(<span class="number">0</span>, i - a[i]); !sta1.empty() &amp;&amp; left[i] &lt; sta1.top(); sta1.pop()) &#123;</span><br><span class="line">left[i] = min(left[i], left[sta1.top()]);</span><br><span class="line">minn[i] = min(minn[i], minn[sta1.top()]);</span><br><span class="line">&#125;</span><br><span class="line">dp[i] = minn[i] + c[i];</span><br><span class="line"><span class="keyword">while</span> (!sta2.empty() &amp;&amp; i &gt; right[sta2.top().first]) sta2.pop();</span><br><span class="line"><span class="keyword">if</span> (sta2.empty()) &#123;</span><br><span class="line">sta2.push(make_pair(right[i], dp[i - <span class="number">1</span>] + c[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dp[i] = min(dp[i], sta2.top().second);</span><br><span class="line">sta2.push(make_pair(right[i], min(sta2.top().second, dp[i - <span class="number">1</span>] + c[i])));</span><br><span class="line">&#125;</span><br><span class="line">minn[i] = min(minn[i], dp[i]);</span><br><span class="line">sta1.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dp.back() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1131&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces Round #541 (Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;A-Sea-Battle&quot;
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest (TBC)</title>
    <link href="http://yoursite.com/2019/03/10/2014-2015%20ACM-ICPC,%20NEERC,%20Northern%20Subregional%20Contest%20(TBC)/"/>
    <id>http://yoursite.com/2019/03/10/2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest (TBC)/</id>
    <published>2019-03-10T04:00:44.878Z</published>
    <updated>2019-03-13T13:21:24.455Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/gym/100531" target="_blank" rel="noopener">2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest</a></p><h2 id="A-Alarm-Clock"><a href="#A-Alarm-Clock" class="headerlink" title="A. Alarm Clock"></a>A. Alarm Clock</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"alarm.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"alarm.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> d[] = &#123;<span class="number">6</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">24</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">60</span>; ++j)</span><br><span class="line">res[d[i % <span class="number">10</span>] + d[i / <span class="number">10</span>] + d[j % <span class="number">10</span>] + d[j / <span class="number">10</span>]] = make_pair(i, j);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">auto</span> ite = res.find(n);</span><br><span class="line"><span class="keyword">if</span> (ite == res.end()) <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%02d:%02d\n"</span>, ite-&gt;second.first, ite-&gt;second.second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Buffcraft"><a href="#B-Buffcraft" class="headerlink" title="B. Buffcraft"></a>B. Buffcraft</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。有坑。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"buffcraft.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"buffcraft.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> b, k, cd, cp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; b &gt;&gt; k &gt;&gt; cd &gt;&gt; cp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt; d(cd + <span class="number">1</span>), p(cp + <span class="number">1</span>);</span><br><span class="line">d.front() = p.front() = make_pair(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) <span class="built_in">cin</span> &gt;&gt; d[i].first, d[i].second = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) <span class="built_in">cin</span> &gt;&gt; p[i].first, p[i].second = i;</span><br><span class="line">sort(d.begin() + <span class="number">1</span>, d.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line">sort(p.begin() + <span class="number">1</span>, p.end(), greater&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">int</span>&gt;&gt;());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; dd(cd + <span class="number">1</span>, <span class="number">0</span>), pp(cp + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cd; ++i) dd[i] = dd[i - <span class="number">1</span>] + d[i].first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cp; ++i) pp[i] = pp[i - <span class="number">1</span>] + p[i].first;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= min(k, cd); ++i) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = (b + dd[i]) * (pp[min(cp, k - i)] + <span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span> (cal &lt; temp) &#123;</span><br><span class="line">cal = temp;</span><br><span class="line">n = i;</span><br><span class="line">m = min(cp, k - i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">' '</span> &lt;&lt; m &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">cout</span> &lt;&lt; d[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (n) <span class="built_in">cout</span> &lt;&lt; d[n].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; ++i) <span class="built_in">cout</span> &lt;&lt; p[i].second &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">if</span> (m) <span class="built_in">cout</span> &lt;&lt; p[m].second;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Digits"><a href="#D-Digits" class="headerlink" title="D. Digits"></a>D. Digits</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>输出最小的$~n~$个不同正整数的和，满足这些数的各位数之和相等。<br>数据范围$~1\leq n\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>注意到数据范围较小，考虑爆搜。爆搜$~10^7~$以内的正整数更新数据范围内对应的答案即可。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"digits.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"digits.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; res(<span class="number">5001</span>, <span class="number">0x3f3f3f3f3f3f3f3f</span>), cal(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; cnt(<span class="number">64</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10000000</span>; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j /= <span class="number">10</span>) sum += j % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> (++cnt[sum] &lt;= <span class="number">5000</span>) res[cnt[sum]] = min(res[cnt[sum]], cal[sum] += i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[n] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Grave"><a href="#G-Grave" class="headerlink" title="G. Grave"></a>G. Grave</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"grave.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"grave.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> x[<span class="number">4</span>], y[<span class="number">4</span>], w, h;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; x[i] &gt;&gt; y[i];</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w &gt;&gt; h;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">2</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">3</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">2</span>] - y[<span class="number">0</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (x[<span class="number">1</span>] - x[<span class="number">0</span>] &gt;= w &amp;&amp; y[<span class="number">1</span>] - y[<span class="number">3</span>] &gt;= h) flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag ? <span class="string">"Yes"</span> : <span class="string">"No"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="H-Hiking-in-the-Hills"><a href="#H-Hiking-in-the-Hills" class="headerlink" title="H. Hiking in the Hills"></a>H. Hiking in the Hills</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个三维空间下的地形图，表面由$~n~$个三角形拼接而成。然后给定平面上的起点和终点，输出一条路径，使得路径的海拔的最大值最小。<br>数据范围$~2\leq n\leq2000~$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>对偶图的单源最短路问题。将三角形视为点，任意相接触的两三角形的公共边或公共点是为边，那么边权则是公共部分的最低海拔。暴力建图即可，时间复杂度为$~O(n^2)~$，单元最短路用$~\text{Dijstra}~$算法，是否堆优化均不影响时间复杂度。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">ll x, y, z;</span><br><span class="line">Point() &#123;&#125;</span><br><span class="line">Point(ll xx, ll yy, ll zz): x(xx), y(yy), z(zz) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; z; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt;  y &lt;&lt; <span class="string">' '</span> &lt;&lt;  z &lt;&lt; <span class="string">'\n'</span>; &#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x == p.x &amp;&amp; y == p.y; &#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x - p.x, y - p.y, <span class="number">0</span>); &#125;</span><br><span class="line">ll <span class="keyword">operator</span> ^ (<span class="keyword">const</span> Point&amp; p) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x * p.y - y * p.x; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> Point <span class="title">lower</span><span class="params">(<span class="keyword">const</span> Point&amp; p1, <span class="keyword">const</span> Point&amp; p2)</span> </span>&#123; <span class="keyword">return</span> p1.z &lt; p2.z ? p1 : p2; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triagnle</span> &#123;</span></span><br><span class="line">Point p[<span class="number">3</span>];</span><br><span class="line">Triagnle() &#123;&#125;</span><br><span class="line">Triagnle(Point a, Point b, Point c) &#123; p[<span class="number">0</span>] = a, p[<span class="number">1</span>] = b, p[<span class="number">2</span>] = c; &#125;</span><br><span class="line">Triagnle(Point pp[]) &#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i] = pp[i]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) p[i].input(); &#125;</span><br><span class="line"><span class="function">ll <span class="title">area</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>((p[<span class="number">1</span>] - p[<span class="number">0</span>]) ^ (p[<span class="number">2</span>] - p[<span class="number">0</span>])); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">have</span><span class="params">(Point&amp; pp)</span> </span>&#123;</span><br><span class="line">ll cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) cal += <span class="built_in">abs</span>((p[i] - pp) ^ (p[(i + <span class="number">1</span>) % <span class="number">3</span>] - pp));</span><br><span class="line"><span class="keyword">return</span> cal == area();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="built_in">vector</span>&lt;Point&gt; <span class="keyword">operator</span> &amp; (<span class="keyword">const</span> Triagnle&amp; t1, <span class="keyword">const</span> Triagnle&amp; t2) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; ret;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">3</span>; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j != <span class="number">3</span>; ++j)</span><br><span class="line"><span class="keyword">if</span> (t1.p[i] == t2.p[j]) ret.push_back(t1.p[i]);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">Point p;</span><br><span class="line"><span class="keyword">int</span> id, from;</span><br><span class="line">ll h;</span><br><span class="line">Node() &#123;&#125;</span><br><span class="line">Node(Point pp, <span class="keyword">int</span> i, <span class="keyword">int</span> f, ll hh): p(pp), id(i), from(f), h(hh) &#123;&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp; n) <span class="keyword">const</span> &#123; <span class="keyword">return</span> h &gt; n.h; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"hiking.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"hiking.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;Triagnle&gt; planes(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; plane : planes) plane.input();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, Point&gt;&gt;&gt; adj(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j != n; ++j) &#123;</span><br><span class="line"><span class="keyword">auto</span> tmp = planes[i] &amp; planes[j];</span><br><span class="line"><span class="keyword">if</span> (tmp.size()) &#123;</span><br><span class="line"><span class="keyword">if</span> (tmp.size() == <span class="number">1</span>) &#123;</span><br><span class="line">adj[i].push_back(mp(j, tmp.front()));</span><br><span class="line">adj[j].push_back(mp(i, tmp.front()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">auto</span> p = lower(tmp.front(), tmp.back());</span><br><span class="line">adj[i].push_back(mp(j, p));</span><br><span class="line">adj[j].push_back(mp(i, p));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Point start, finish;</span><br><span class="line">start.input();</span><br><span class="line">finish.input();</span><br><span class="line"><span class="keyword">int</span> begin, end;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(start)) &#123;</span><br><span class="line">begin = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) <span class="keyword">if</span> (planes[i].have(finish)) &#123;</span><br><span class="line">end = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Node&gt; que;</span><br><span class="line">que.push(Node(start, begin, begin, start.z));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; vis(n, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; from(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; nodes(n);</span><br><span class="line"><span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line"><span class="keyword">auto</span> now = que.top();</span><br><span class="line">que.pop();</span><br><span class="line"><span class="keyword">if</span> (vis[now.id]) <span class="keyword">continue</span>;</span><br><span class="line">vis[now.id] = <span class="literal">true</span>;</span><br><span class="line">from[now.id] = now.from;</span><br><span class="line">nodes[now.id] = now.p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; next : adj[now.id]) <span class="keyword">if</span> (!vis[next.ff]) que.push(Node(next.ss, next.ff, now.id, max(now.h, next.ss.z)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; res(<span class="number">1</span>, finish);</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">res.push_back(nodes[end]);</span><br><span class="line"><span class="keyword">if</span> (end == begin) <span class="keyword">break</span>;</span><br><span class="line">end = from[end];</span><br><span class="line">&#125;</span><br><span class="line">reverse(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; ans : res) ans.output();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="I-Instruction"><a href="#I-Instruction" class="headerlink" title="I. Instruction"></a>I. Instruction</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>铁路轨道视为一棵$~n~$个节点的二叉树，起点为根节点，终点为叶节点。然后给定$~m~$列火车的出发时刻$~t~$和终点$~p~$。每个非叶节点的初始指向为编号较小的子节点。为使得每辆火车均到达相应终点，那么需要在一些时刻修改一些非叶节点的指向。输出一种不超过$~100000~$次的修改方案。<br>数据范围$~3\leq n\leq51,~1\leq m\leq100,~0\leq t\leq10000,~1\leq p\leq26~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>模拟。对于每辆火车，考虑它从起点到终点的过程，则可以得到这条路径上的非叶节点在某些时刻需要满足的状态（指向哪个子节点）。最终对于每个节点，所有的状态按时间升序然后去重即可。总时间复杂度为$~O(nm\log m)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"instruction.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"instruction.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">128</span>], fa[<span class="number">64</span>], son[<span class="number">64</span>][<span class="number">2</span>], tmp[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, to[<span class="number">64</span>][<span class="number">64</span>], go[<span class="number">64</span>][<span class="number">64</span>], state[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;, check[<span class="number">64</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch &gt;&gt; f;</span><br><span class="line">fa[i] = f;</span><br><span class="line">to[f][i] = tmp[f];</span><br><span class="line">son[f][tmp[f]++] = i;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'p'</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">p[name] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j; j = fa[j]) go[fa[j]][i] = to[fa[j]][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">check[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; node[<span class="number">64</span>], res;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; ch;</span><br><span class="line"><span class="keyword">int</span> id = p[ch];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != id; i = son[i][go[i][id]]) node[i].push_back(mp(t++, go[i][id]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span> (check[i]) &#123;</span><br><span class="line">sort(node[i].begin(), node[i].end());</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> fuck : node[i]) <span class="keyword">if</span> (now != fuck.ss) &#123;</span><br><span class="line">now = fuck.ss;</span><br><span class="line">res.push_back(mp(fuck.ff, i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sort(res.begin(), res.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ans : res) <span class="built_in">cout</span> &lt;&lt; ans.ss &lt;&lt; <span class="string">' '</span> &lt;&lt; ans.ff &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="J-Joy-of-Flight"><a href="#J-Joy-of-Flight" class="headerlink" title="J. Joy of Flight"></a>J. Joy of Flight</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定起点和终点坐标，飞机需要恰好在第$~k~$秒到达终点，同时给出这期间的风向变化和飞机的最大速度$~v_\max~$，每秒飞机的真实位移等于飞机速度向量于风速向量之和。输出每秒飞机所到达的坐标或者不存在到达终点的方案。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>分离风速与自身速度。那么方案存在等价于起点经过$~k~$秒的风吹所到达的坐标与终点的距离$~dis~$小于等于$~k\cdot v_\max~$。那么每秒的飞机速度即为$~\frac{dis}{k}~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; pll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">freopen(<span class="string">"joy.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">"joy.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">pll begin, end;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;begin.ff, &amp;begin.ss, &amp;end.ff, &amp;end.ss);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> vmax;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;n, &amp;k, &amp;vmax);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, pll&gt;&gt; input(n);</span><br><span class="line"><span class="built_in">vector</span>&lt;pll&gt; winds(k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%lld%lld"</span>, &amp;input[i].ff, &amp;input[i].ss.ff, &amp;input[i].ss.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = input[i - <span class="number">1</span>].ff; i &amp;&amp; j != input[i].ff; ++j) winds[j] = input[i - <span class="number">1</span>].ss;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = input.back().ff; i != k; ++i) winds[i] = input.back().ss;</span><br><span class="line">pll flow = mp(end.ff - begin.ff, end.ss - begin.ss);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) flow = mp(flow.ff - wind.ff, flow.ss - wind.ss);</span><br><span class="line"><span class="keyword">if</span> (flow.ff * flow.ff + flow.ss * flow.ss &gt; vmax * vmax * k * k) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"No"</span>), <span class="number">0</span>;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">pll temp = begin;</span><br><span class="line"><span class="keyword">int</span> day = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; wind : winds) &#123;</span><br><span class="line">++day;</span><br><span class="line">temp = mp(temp.ff + wind.ff, temp.ss + wind.ss);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f %f\n"</span>, temp.ff + (<span class="keyword">double</span>)flow.ff * day / k, temp.ss + (<span class="keyword">double</span>)flow.ss * day / k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="K-Kebab-House"><a href="#K-Kebab-House" class="headerlink" title="K. Kebab House"></a>K. Kebab House</h2><h3 id="题目大意-7"><a href="#题目大意-7" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数轴上从$~1~$开始有$~n~$个相连的线段区间，并给出每个区间的长度$~q~$。现要在所有线段内合法的取若干个点，满足相邻的两个点之间所未取到的点的数量至少为$~t~$，每个线段内最多取$~q-x~$个点。问合法的方案数（包括不取）。<br>数据范围$~1\leq n\leq1000,~0\leq t\leq100,~0\leq q\leq250,~0\leq x\leq q~$。</p><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>动态规划。问$~\text{WSY}~$。</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ul = <span class="built_in">std</span>::<span class="keyword">uint32_t</span>;</span><br><span class="line"><span class="keyword">using</span> li = <span class="built_in">std</span>::<span class="keyword">int32_t</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="built_in">std</span>::<span class="keyword">int64_t</span>;</span><br><span class="line"><span class="keyword">using</span> ull = <span class="built_in">std</span>::<span class="keyword">uint64_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ul base = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">plus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b &lt; base ? a + b : a + b - base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">minus</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &lt; b ? a + base - b : a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ul <span class="title">mul</span><span class="params">(ul a, ul b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> ull(a) * ull(b) % ull(base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//#define TEST</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::istream&amp; myis = <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="built_in">std</span>::ostream&amp; myos = <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> TEST</span></span><br><span class="line"><span class="built_in">std</span>::<span class="function">ifstream <span class="title">myis</span><span class="params">(<span class="string">"kebab.in"</span>)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="function">ofstream <span class="title">myos</span><span class="params">(<span class="string">"kebab.out"</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ul m, n, t;</span><br><span class="line">ul segst[<span class="number">250001</span>];</span><br><span class="line">ul segable[<span class="number">250001</span>];</span><br><span class="line">ul sum[<span class="number">250001</span>];</span><br><span class="line">ul ans[<span class="number">250001</span>][<span class="number">251</span>];</span><br><span class="line">ul finalans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">myis.tie(<span class="number">0</span>);</span><br><span class="line">myis &gt;&gt; m &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">0</span>, st = <span class="number">1</span>; i != m; ++i) &#123;</span><br><span class="line">ul q, x;</span><br><span class="line">myis &gt;&gt; q &gt;&gt; x;</span><br><span class="line"><span class="keyword">for</span> (ul j = st; j != st + q; ++j) &#123;</span><br><span class="line">segst[j] = st;</span><br><span class="line">segable[j] = q - x;</span><br><span class="line">&#125;</span><br><span class="line">st = st + q;</span><br><span class="line">n = st - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (ul i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">sum[i] = sum[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (ul j = <span class="number">1</span>; j &lt;= segable[i]; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span>) &#123;</span><br><span class="line">ans[i][j] = sum[<span class="built_in">std</span>::min(i - t - <span class="number">1</span>, segst[i] - <span class="number">1</span>)];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= t + <span class="number">1</span> &amp;&amp; i - t - <span class="number">1</span> &gt;= segst[i] + j - <span class="number">2</span>) &#123;</span><br><span class="line">ans[i][j] = minus(ans[i - t - <span class="number">1</span>][j - <span class="number">1</span>], segst[i] + j - <span class="number">2</span> &gt;= <span class="number">1</span> ? ans[segst[i] + j - <span class="number">3</span>][j - <span class="number">1</span>] : ul(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sum[i] = plus(sum[i], ans[i][j]);</span><br><span class="line">finalans = plus(finalans, ans[i][j]);</span><br><span class="line">ans[i][j] = plus(ans[i - <span class="number">1</span>][j], ans[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">myos &lt;&lt; finalans &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/gym/100531&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2014-2015 ACM-ICPC, NEERC, Northern Subregional Contest&lt;/a&gt;&lt;/p
      
    
    </summary>
    
      <category term="训练笔记" scheme="http://yoursite.com/categories/%E8%AE%AD%E7%BB%83%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 61 (Rated for Div. 2)</title>
    <link href="http://yoursite.com/2019/03/10/Educational%20Codeforces%20Round%2061%20(Rated%20for%20Div.%202)/"/>
    <id>http://yoursite.com/2019/03/10/Educational Codeforces Round 61 (Rated for Div. 2)/</id>
    <published>2019-03-10T04:00:44.878Z</published>
    <updated>2019-03-10T04:07:59.844Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://codeforces.com/contest/1132" target="_blank" rel="noopener">Educational Codeforces Round 61 (Rated for Div. 2)</a></p><h2 id="A-Regular-Bracket-Sequence"><a href="#A-Regular-Bracket-Sequence" class="headerlink" title="A. Regular Bracket Sequence"></a>A. Regular Bracket Sequence</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>现有$~cnt_1~$个$~\text{((}~$，$cnt_2~$个$~\text{()}~$，$~cnt_3~$个$~\text{)(}~$，$~cnt_4~$个$~\text{))}~$。问能否组合成一个合法括号串。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>判断$~cnt_1=cnt_4~$，且$~cnt_1&gt;0~$或$~cnt_3=0~$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != <span class="number">4</span>; ++i) <span class="built_in">cin</span> &gt;&gt; cnt[i];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (cnt[<span class="number">0</span>] == cnt[<span class="number">3</span>] &amp;&amp; (cnt[<span class="number">0</span>] &amp;&amp; !cnt[<span class="number">2</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Discounts"><a href="#B-Discounts" class="headerlink" title="B. Discounts"></a>B. Discounts</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>水题。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; a(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : a) <span class="built_in">cin</span> &gt;&gt; in;</span><br><span class="line">sort(a.begin(), a.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = accumulate(a.begin(), a.end(), <span class="number">0L</span>L);</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum - a[n - q] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-Painting-the-Fence"><a href="#C-Painting-the-Fence" class="headerlink" title="C. Painting the Fence"></a>C. Painting the Fence</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$以内$~q~$个离散区间，问$~q-2~$个区间的并集最多包含多少个整点。<br>数据范围$~3\leq n,q\leq5000~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~q-1~$的做法。对于数轴$~1,2,\dots,n~$上差分，则得到所包含于区间数量的差分数组。同时把每个区间放入其右端点的$~\text{vector}~$之中。从小到大枚举右端点，则可以知道每个区间中有多少个点的值为$~1~$，代表不取这个区间所减少的答案。整个过程都是线性的，所以时间复杂度为$~O(n+q)~$。那么对于本体，现暴力枚举第一个不选的区间即可，总时间复杂度为$~O(q\cdot(n+q))~$。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d(n + <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; seg(q);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; line(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; seg[i].first &gt;&gt; seg[i].second;</span><br><span class="line">++d[seg[i].first];</span><br><span class="line">--d[++seg[i].second];</span><br><span class="line">line[seg[i].second - <span class="number">1</span>].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != q; ++i) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dd(d), sweep(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">--dd[seg[i].first];</span><br><span class="line">++dd[seg[i].second];</span><br><span class="line"><span class="keyword">int</span> sub = <span class="number">0x3f3f3f3f</span>, cal = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">sweep[j] = sweep[j - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ((dd[j] += dd[j - <span class="number">1</span>]) == <span class="number">1</span>) ++sweep[j];</span><br><span class="line"><span class="keyword">if</span> (dd[j]) ++cal;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; k : line[j]) <span class="keyword">if</span> (i != k)</span><br><span class="line">sub = min(sub, sweep[seg[k].second - <span class="number">1</span>] - sweep[seg[k].first - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"> res = max(res, cal - sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-Stressful-Training"><a href="#D-Stressful-Training" class="headerlink" title="D. Stressful Training"></a>D. Stressful Training</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有$~n~$台电脑，给出初始电量$~a~$和每分钟耗电$~b~$。总共$~k~$分钟，现有$~1~$个充电器，每分钟只能给$~1~$台电脑充电。问使得在最后一刻之前没有电脑没电（为负）的最小功率或者不存在。<br>数据范围$~1\leq n,k\leq2\cdot10^5,~1\leq a\leq10^{17},~1\leq b\leq10^{12}~$。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分答案，然后判断是否合法。使用优先队列的话总时间复杂度为$~O(k\log n\log\max)~$，很难通过。对于每台电脑，将其放入没电的时刻所对应的$~\text{vector}~$之中，模拟这$~k~$分钟即可。这样总时间复杂度为$~O((n+k)\log\max)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; ab;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt;&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) time.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first / laptop.second &lt; k) line[laptop.first / laptop.second].push_back(laptop);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> fuck = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; time : line) &#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : time) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> temp = ((laptop.first / laptop.second + <span class="number">1</span>) * laptop.second - laptop.first - <span class="number">1</span>) / x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((cnt -= temp) &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> ((laptop.first + temp * x) / laptop.second &lt; k) line[(laptop.first + temp * x) / laptop.second].push_back(make_pair(laptop.first + temp * x, laptop.second));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">ab.resize(n);</span><br><span class="line">line.resize(--k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; in : ab) <span class="built_in">cin</span> &gt;&gt; in.second;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; laptop : ab) <span class="keyword">if</span> (laptop.first &lt; laptop.second * k) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line">x = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check()) right = x;</span><br><span class="line"><span class="keyword">else</span> left = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (right == INF ? <span class="number">-1</span> : right) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-Knapsack"><a href="#E-Knapsack" class="headerlink" title="E. Knapsack"></a>E. Knapsack</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>数字$~1\leq i\leq8~$有$~cnt_i~$个。问组成的和在不超过$~W~$下的最大值。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>考虑$~S=\gcd(1,2,\dots,8)=840~$。对于数字$~i~$，取$~\frac{S}{i}~$个求和能得到$~S~$。动态规划，记$~dp[i][j]~$为已经考虑了前$~i~$个数字，每个数字至多取$~\min(\frac{S}{i},cnt_i)~$个，未取过的数字还能凑出多少$~S~$。这样空间复杂度为$~O(8^2\cdot840)~$，时间复杂度为$~O(8\cdot\log8\cdot840^2)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> gcd = <span class="number">840</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w, cnt, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;&gt; dp(maxn + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;(maxn * gcd + <span class="number">1</span>, <span class="number">-1</span>));</span><br><span class="line">dp.front().front() = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= maxn; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= gcd / i &amp;&amp; j &lt;= cnt; ++j) <span class="keyword">for</span> (<span class="keyword">int</span> k = i * j; k &lt;= maxn * gcd; ++k)</span><br><span class="line"><span class="keyword">if</span> (~dp[i - <span class="number">1</span>][k - i * j]) dp[i][k] = max(dp[i][k], dp[i - <span class="number">1</span>][k - i * j] + (cnt - j) / (gcd / i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= maxn * gcd &amp;&amp; i &lt;= w; ++i) <span class="keyword">if</span> (~dp.back()[i])</span><br><span class="line">res = max(res, i + gcd * min(dp.back()[i], (w - i) / gcd));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-Clear-the-String"><a href="#F-Clear-the-String" class="headerlink" title="F. Clear the String"></a>F. Clear the String</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个小写字母串，每次可以消除连续的相同子串，问最小消除次数。<br>数据范围$~1\leq n\leq500~$。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>相邻去重后就是一个区间$~\text{DP}~$问题。具体见代码，时间复杂度为$~O(n^3)~$。</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (~dp[l][r]) <span class="keyword">return</span> dp[l][r];</span><br><span class="line"><span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> dp[l][r] = <span class="number">0</span>;</span><br><span class="line">dp[l][r] = calc(l + <span class="number">1</span>, r) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt; r; ++i) <span class="keyword">if</span> (str[l] == str[i]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, i - <span class="number">1</span>) + calc(i, r));</span><br><span class="line"><span class="keyword">if</span> (str[l] == str[r]) dp[l][r] = min(dp[l][r], calc(l + <span class="number">1</span>, r - <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> dp[l][r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; str;</span><br><span class="line">str = <span class="built_in">string</span>(str.begin(), unique(str.begin(), str.end()));</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> (dp));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(<span class="number">0</span>, str.size() - <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="G-Greedy-Subsequences"><a href="#G-Greedy-Subsequences" class="headerlink" title="G. Greedy Subsequences"></a>G. Greedy Subsequences</h2><h3 id="题目大意-6"><a href="#题目大意-6" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个序列$~a_1,a_2,\dots,a_n~$，定义贪心子序列满足除首项外，每一项均为原序列中右边第一个大于前一项的值。给定$~k~$，输出区间$~[1,k],~[2,k+1],~\dots,~[n-k+1,n]~$的最长贪心子序列长度。<br>数据范围$~1\leq k\leq n\leq10^6,~1\leq a\leq n~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~f(r)=\max\lbrace l:a_r\geq a_l,~l&lt; r\rbrace~$，其中不妨设$~a_0=\inf~$。这一步可以通过单调栈线性求出。再令$~g(l,r)~$表示首相为$~a_l~$，右边不超过$~r~$的最长贪心子序列长度。则有转移式</p><script type="math/tex; mode=display">g(l,r)=\begin{cases}g(l,r-1)    &\text{$l\leq f(r)$}    \\g(l,r-1)+1  &\text{$l>f(r)$}\end{cases}</script><p>且区间$~[r-k+1,r]~$的答案为$~\max_{l=r-k+1}^{r}{g(l,r)}~$。用线段树维护即可，总时间复杂度为$~O(n\log n)~$。</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], seg[maxn &lt;&lt; <span class="number">1</span>], tag[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mid ((begin + end) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (index &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (index &lt;&lt; 1 ^ 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEFT begin, mid, lson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RIGHT mid, end, rson</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SEG left, right</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">seg[index] += tag[index];</span><br><span class="line"><span class="keyword">if</span> (index &lt; maxn) &#123;</span><br><span class="line">tag[lson] += tag[index];</span><br><span class="line">tag[rson] += tag[index];</span><br><span class="line">&#125;</span><br><span class="line">tag[index] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) &#123;</span><br><span class="line">++tag[index];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left &lt; mid) modify(LEFT, SEG);</span><br><span class="line"><span class="keyword">if</span> (right &gt; mid) modify(RIGHT, SEG);</span><br><span class="line">seg[index] = max(seg[lson] + tag[lson], seg[rson] + tag[rson]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> begin, <span class="keyword">int</span> end, <span class="keyword">int</span> index, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">push_down(index);</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= left &amp;&amp; end &lt;= right) <span class="keyword">return</span> seg[index];</span><br><span class="line"><span class="keyword">if</span> (begin &gt;= right || end &lt;= left) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> max(query(LEFT, SEG), query(RIGHT, SEG));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">sta.push(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (a[sta.top()] &lt; a[i]) sta.pop();</span><br><span class="line">modify(<span class="number">0</span>, n, <span class="number">1</span>, sta.top(), i);</span><br><span class="line">sta.push(i);</span><br><span class="line"><span class="keyword">if</span> (i &gt;= k) <span class="built_in">cout</span> &lt;&lt; query(<span class="number">0</span>, n, <span class="number">1</span>, i - k, i) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1132&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Educational Codeforces Round 61 (Rated for Div. 2)&lt;/a&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/Codeforces/"/>
    
    
  </entry>
  
  <entry>
    <title>EOJ Monthly 2019.2 (based on February Selection)</title>
    <link href="http://yoursite.com/2019/02/25/EOJ%20Monthly%202019.2%20(based%20on%20February%20Selection)/"/>
    <id>http://yoursite.com/2019/02/25/EOJ Monthly 2019.2 (based on February Selection)/</id>
    <published>2019-02-25T09:29:22.057Z</published>
    <updated>2019-02-27T09:08:35.860Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://acm.ecnu.edu.cn/contest/140" target="_blank" rel="noopener">EOJ Monthly 2019.2 (based on February Selection)</a></p><h2 id="A-回收卫星"><a href="#A-回收卫星" class="headerlink" title="A. 回收卫星"></a>A. 回收卫星</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>交互题。有一个球心为$~(x,~y,~z)~$半径为$~r~$的球，且原点$~(0,~0,~0)~$保证在球内部或边界上。每次可以询问一个点是否在球的内部或边界上，需要在至多$~200~$次询问下确定球心坐标。<br>数据范围$~{\mid x\mid}\leq10^9,~{\mid y\mid}\leq10^9,~{\mid z\mid}\leq10^9,~1\leq r\leq10^9~$。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>通过二分可以确定$~x_1=\max\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$和$~x_2=\min\lbrace x_0\mid(x-x_0)^2+y^2+z^2\leq r^2\rbrace~$。注意到绝对值最大为$~2\times10^9~$，二分上界必须大于该数，且会爆$~\text{int}~$。<br>考虑关于$~x_0~$的一元二次方程</p><script type="math/tex; mode=display">(x-x_0)^2+y^2+z^2=r^2</script><p>解为</p><script type="math/tex; mode=display">x_0=x\pm\sqrt{r^2-y^2-z^2}</script><p>于是有</p><script type="math/tex; mode=display">x_1=x+\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x_2=x-\left\lfloor\sqrt{r^2-y^2-z^2}\right\rfloor   \\x={\frac{x_1+x_2}{2}}</script><p>同理可解出$~y~$与$~z~$。次数最多$~6\times32=192~$次。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">2000000001</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; y, <span class="keyword">const</span> <span class="keyword">int</span>&amp; z)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="string">' '</span> &lt;&lt; z &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> left, right, x1, x2, y1, y2, z1, z2;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(-mid, <span class="number">0</span>, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">x2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, -mid, <span class="number">0</span>)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">y2 = -left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z1 = left;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">left = <span class="number">0</span>, right = INF;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = left + right &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (query(<span class="number">0</span>, <span class="number">0</span>, -mid)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line">z2 = -left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; (x1 + x2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (y1 + y2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="string">' '</span> &lt;&lt; (z1 + z2 &gt;&gt; <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-解题"><a href="#B-解题" class="headerlink" title="B. 解题"></a>B. 解题</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个$~n~$位大整数，询问$~q~$次，每次给定一个正整数$~m~$。选取大整数十进制表示下连续的一段保留，其余全变成$~0~$，找出最小的如此生成的正整数满足是$~m~$的倍数，或者不存在。<br>数据范围$~1\leq n\leq10^6,~1\leq q\leq500,~\sum m\leq5\times10^7~$。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>记$~a_i~$为大整数后$~i~$位模$~m~$的余数，注意需要添加$~a_0=0~$。取区间$~[l,r]~$生成的数字是$~m~$的倍数，等价于$~a_{n+1-l}=a_{n-r}~$。只要将$~i~$从小到大计算$~a_i~$，对于最小的$~j~$，存在$~i&lt; j~$满足$~a_i=a_j~$，则答案$~[l,r]=[n+1-j,n-i]~$。由抽屉原理，至多计算$~m+1~$次就一定能得出答案。总时间复杂度为$~O(\sum m)~$。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">string</span> num;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = num.size();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dig(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != n; ++i) dig[i] = num[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos(m, <span class="number">0</span>);</span><br><span class="line">pos[<span class="number">0</span>] = n;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> base = <span class="number">1</span>, now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; ~i; --i) &#123;</span><br><span class="line">now = (now + base * dig[i]) % m;</span><br><span class="line"><span class="keyword">if</span> (pos[now]) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; pos[now] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos[now] = i;</span><br><span class="line">base = base * <span class="number">10</span> % m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-魔板"><a href="#C-魔板" class="headerlink" title="C. 魔板"></a>C. 魔板</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>有一个$~n\times m~$个格点的网格图，第$~i~$行第$~j~$列的坐标为$~(i,j)~$。每个点有个数字，有序状态下$~(i,j)~$的数字为$~(i-1)\times m+j~$。有两种置换方式：选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x,y+1)~$上的数字顺时针交换；选择$~(x&lt; n,~y&lt; m)~$，将$~(x,y),(x+1,y),(x+1,y+1),(x,y+1)~$上的数字顺时针交换。现给定一个打乱的状态，输出任意一种使其有序的操作方式，且次数不能超过$~3\cdot10^6~$。<br>数据范围$~2\leq n,m\leq100~$。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>构造大模拟。注意到先进行$~1~$次操作$~2~$再进行$~2~$次操作$~1~$，等价于只交换$~(x+1,y)~$和$~(x+1,y+1)~$。先进行$~2~$次操作$~1~$再进行$~1~$次操作$~2~$，等价于只交换$~(x,y+1)~$和$~(x+1,y+1)~$。那么暴力模拟即可，上限$~3\cdot10^6~$其实很宽松。</p><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a><strong>题解</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ff first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ss second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line">pii pos[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">int</span> mat[<span class="number">101</span>][<span class="number">101</span>], m, n, res_size;</span><br><span class="line">pair&lt;<span class="keyword">int</span>, pii&gt; res[<span class="number">1</span> &lt;&lt; <span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = b] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = c] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">1</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = mat[x][y], b = mat[x + <span class="number">1</span>][y], c = mat[x + <span class="number">1</span>][y + <span class="number">1</span>], d = mat[x][y + <span class="number">1</span>];</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y] = a] = mp(x + <span class="number">1</span>, y);</span><br><span class="line">pos[mat[x + <span class="number">1</span>][y + <span class="number">1</span>] = b] = mp(x + <span class="number">1</span>, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y + <span class="number">1</span>] = c] = mp(x, y + <span class="number">1</span>);</span><br><span class="line">pos[mat[x][y] = d] = mp(x, y);</span><br><span class="line">res[res_size++] = mp(<span class="number">2</span>, mp(x, y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work2(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap_right</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">work1(x, y);</span><br><span class="line">work1(x, y);</span><br><span class="line">work2(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; mat[i][j];</span><br><span class="line">pos[mat[i][j]] = mp(i, j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, k = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; ++j, ++k) &#123;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &lt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss);</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ss &gt; j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != n) &#123;</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_up(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (pos[k].ff &gt; i + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">1</span>) &#123;</span><br><span class="line">work2(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos[k].ff != i) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != m) &#123;</span><br><span class="line">work1(pos[k].ff - <span class="number">1</span>, pos[k].ss);</span><br><span class="line">work1(pos[k].ff, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">swap_right(pos[k].ff - <span class="number">1</span>, pos[k].ss - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res_size &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != res_size; ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res[i].ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ff &lt;&lt; <span class="string">' '</span> &lt;&lt; res[i].ss.ss &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="D-进制转换"><a href="#D-进制转换" class="headerlink" title="D. 进制转换"></a>D. 进制转换</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>问$~[l,r]~$中有多少个数的$~k~$进制表示恰好有$~m~$个末尾$~0~$。<br>数据范围$1\leq T\leq10^5,~1\leq l\leq r\leq10^18,~2\leq k,m\leq100$。</p><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>水题。预处理所有的$~k^m~$，然后将$~k^m~$的倍数的数量减去$~k^{m+1}~$的数量即可。总时间复杂度为$~O(km+T)~$，注意细节。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pown[<span class="number">101</span>][<span class="number">102</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; n, <span class="keyword">const</span> <span class="keyword">int</span>&amp; k, <span class="keyword">const</span> <span class="keyword">int</span>&amp; m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~pown[k][m] ? n / pown[k][m] : <span class="number">0</span>) - (~pown[k][m + <span class="number">1</span>] ? n / pown[k][m + <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">pown[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">101</span>; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (pown[i][j - <span class="number">1</span>] &lt; INF / i &amp;&amp; ~pown[i][j - <span class="number">1</span>])</span><br><span class="line">pown[i][j] = pown[i][j - <span class="number">1</span>] * i;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pown[i][j] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line"><span class="keyword">int</span> k, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; k &gt;&gt; m;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; calc(r, k, m) - calc(l - <span class="number">1</span>, k, m) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="E-中位数"><a href="#E-中位数" class="headerlink" title="E. 中位数"></a>E. 中位数</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定一个带点权有重边的有向无环图$~\text{DAG}~$，问点$~1~$到点$~n~$所有路径的最大中位数。路径的中位数定义为升序后角标为$~\lfloor\frac{x}{2}\rfloor+1~$的权值。</p><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>二分套$~\text{DAG}~$上差分$~\text{DP}~$。二分答案，然后对于权值大于等于当前值的点标记为$~1~$反之为$~-1~$。从点$~1~$开始跑$~\text{DP}~$，如果点$~n~$的结果小于$~0~$，则当前值过大。可以先对$~\text{DAG}~$先拓扑排序，这样$~\text{DP}~$过程不需要用递归实现，常数小。总时间复杂度为$~O(n\log A)~$。</p><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> deg[maxn], a[maxn], cal[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; adj[maxn], topo;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u = <span class="number">1</span>)</span> </span>&#123; <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) <span class="keyword">if</span> (!deg[v]++) dfs(v); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">topo.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i != (<span class="keyword">int</span>)topo.size(); ++i)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> j : adj[topo[i]]) <span class="keyword">if</span> (!--deg[j]) topo.push_back(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x, <span class="keyword">const</span> <span class="keyword">int</span>&amp; end)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(cal, <span class="number">0xc0</span>, <span class="keyword">sizeof</span> (cal));</span><br><span class="line">cal[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> u : topo) &#123;</span><br><span class="line">a[u] &lt; x ? --cal[u] : ++cal[u];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) cal[v] = max(cal[v], cal[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cal[end] &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">adj[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line">dfs();</span><br><span class="line"><span class="keyword">if</span> (!deg[n]) <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>;</span><br><span class="line">topo_sort();</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">while</span> (right - left != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (check(mid, n)) left = mid;</span><br><span class="line"><span class="keyword">else</span> right = mid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; left &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="F-方差"><a href="#F-方差" class="headerlink" title="F. 方差"></a>F. 方差</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a><strong>题目大意</strong></h3><p>给定$~n~$个数，问$~m~$个数的最小方差$~\sigma^2~$是多少，输出$~\sigma^2m^2~$。<br>数据范围$~1\leq m\leq n\leq10^6,~1\leq x\leq10^3~$。</p><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a><strong>题解</strong></h3><p>先排序，注意到数据范围，桶排（基数排序）的时间复杂度为$~O(n+x)~$。注意到方差计算公式</p><script type="math/tex; mode=display">\begin{aligned}\sigma^2    &=\frac{1}{m}\sum(a-\bar{a})^2   \\            &=\frac{1}{m}\sum a^2-\bar{a}^2\end{aligned}</script><p>于是答案计算公式为</p><script type="math/tex; mode=display">\max\{m\sum_{i=l}^{r}a_i^2-(\sum_{i=l}^{r}a_i)^2\}</script><p>滑窗即可。总时间复杂度为$~O(n+x)~$。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a><strong>代码</strong></h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">1</span> &lt;&lt; <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ n; ++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">sort(a, a + n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cal1 = <span class="number">0</span>, cal2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i ^ m; ++i) cal1 += a[i] * a[i], cal2 += a[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = cal1 * m - cal2 * cal2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i ^ n; ++i) &#123;</span><br><span class="line">cal1 += a[i] * a[i] - a[i - m] * a[i - m];</span><br><span class="line">cal2 += a[i] - a[i - m];</span><br><span class="line">res = min(res, cal1 * m - cal2 * cal2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://acm.ecnu.edu.cn/contest/140&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EOJ Monthly 2019.2 (based on February Selection)&lt;/a&gt;&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="刷题笔记" scheme="http://yoursite.com/categories/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
